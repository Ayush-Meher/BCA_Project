{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\SPIDER\\\\Downloads\\\\Project\\\\Demo GPT\\\\Demo 1\\\\src\\\\components\\\\Game.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport styled from 'styled-components';\nimport JavaScriptConsole from './JavaScriptConsole';\nimport Game3D from './Game3D';\nimport SaveLoadModal from './SaveLoadModal';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GameContainer = styled.div`\n  display: grid;\n  grid-template-areas:\n    \"header header header\"\n    \"grid view console\";\n  grid-template-columns: minmax(300px, 25%) minmax(400px, 45%) minmax(300px, 30%);\n  grid-template-rows: 60px 1fr;\n  gap: 16px;\n  padding: 16px;\n  height: 100vh;\n  background-color: #1E1E1E;\n  box-sizing: border-box;\n`;\n_c = GameContainer;\nconst Header = styled.div`\n  grid-area: header;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  background: #2A2A2A;\n  padding: 0 20px;\n  border-radius: 12px;\n  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\n`;\n_c2 = Header;\nconst Title = styled.h1`\n  color: white;\n  margin: 0;\n  font-size: 24px;\n`;\n_c3 = Title;\nconst GameControls = styled.div`\n  display: flex;\n  gap: 10px;\n  margin-bottom: 10px;\n`;\n_c4 = GameControls;\nconst SaveLoadButton = styled.button`\n  background-color: #2ecc71;\n  color: white;\n  padding: 8px 16px;\n  border-radius: 4px;\n  border: none;\n  cursor: pointer;\n  font-weight: bold;\n\n  &:hover {\n    background-color: #27ae60;\n  }\n`;\n_c5 = SaveLoadButton;\nconst MoneyDisplay = styled.div`\n  background-color: #27ae60;\n  color: white;\n  padding: 8px 16px;\n  border-radius: 4px;\n  font-weight: bold;\n`;\n_c6 = MoneyDisplay;\nconst TechTreeButton = styled.button`\n  background-color: #8e44ad;\n  &:hover {\n    background-color: #9b59b6;\n  }\n`;\n_c7 = TechTreeButton;\nconst GameGridContainer = styled.div`\n  grid-area: grid;\n  display: flex;\n  flex-direction: column;\n  gap: 16px;\n  background: #2A2A2A;\n  border-radius: 12px;\n  padding: 20px;\n  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\n`;\n_c8 = GameGridContainer;\nconst GameGrid = styled.div`\n  display: grid;\n  grid-template-columns: repeat(${props => props.size}, 1fr);\n  grid-template-rows: repeat(${props => props.size}, 1fr);\n  gap: 5px;\n  width: 300px;\n  height: 300px;\n  background-color: #8B4513;\n  padding: 10px;\n  border-radius: 5px;\n`;\n_c9 = GameGrid;\nconst LandTile = styled.div`\n  width: 100%;\n  aspect-ratio: 1;\n  background-color: ${props => {\n  if (props.isPlowed) return '#8B4513';\n  if (props.hasCrop && props.cropState === 'growing') return '#90EE90';\n  if (props.hasCrop && props.cropState === 'ready') return '#228B22';\n  return '#90EE90';\n}};\n  border: 1px solid #2c3e50;\n  cursor: pointer;\n  position: relative;\n  transition: all 0.3s ease;\n\n  &:hover {\n    transform: scale(1.05);\n  }\n`;\n_c10 = LandTile;\nconst CropIndicator = styled.div`\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  width: 80%;\n  height: 80%;\n  background-color: ${props => props.color};\n  border-radius: 50%;\n`;\n_c11 = CropIndicator;\nconst StyledDroneSprite = styled.div`\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  width: 60%;\n  height: 60%;\n  transform: translate(-50%, -50%);\n  z-index: 2;\n  filter: drop-shadow(0 2px 4px rgba(0, 0, 0, 0.3));\n  \n  &::before {\n    content: 'ðŸ›¸';\n    position: absolute;\n    top: 50%;\n    left: 50%;\n    transform: translate(-50%, -50%);\n    font-size: 24px;\n  }\n`;\n_c12 = StyledDroneSprite;\nconst StyledGameStats = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 12px;\n  padding: 16px;\n  background: #232323;\n  border-radius: 8px;\n  font-size: 14px;\n  color: #E0E0E0;\n\n  div {\n    display: flex;\n    justify-content: space-between;\n    padding: 8px;\n    background: rgba(255, 255, 255, 0.05);\n    border-radius: 4px;\n  }\n`;\n_c13 = StyledGameStats;\nconst ThreeDViewContainer = styled.div`\n  grid-area: view;\n  background: #2A2A2A;\n  border-radius: 12px;\n  overflow: hidden;\n  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\n`;\n_c14 = ThreeDViewContainer;\nconst StyledConsoleContainer = styled.div`\n  grid-area: console;\n  display: flex;\n  flex-direction: column;\n  gap: 16px;\n  background: #2A2A2A;\n  border-radius: 12px;\n  padding: 20px;\n  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\n`;\n_c15 = StyledConsoleContainer;\nconst ConsoleTabs = styled.div`\n  display: flex;\n  gap: 5px;\n  margin-bottom: 10px;\n`;\n_c16 = ConsoleTabs;\nconst ConsoleTab = styled.button`\n  background-color: ${props => props.active ? '#3498db' : '#2c3e50'};\n  color: white;\n  border: none;\n  padding: 5px 10px;\n  border-radius: 3px;\n  cursor: pointer;\n  \n  &:hover {\n    background-color: ${props => props.active ? '#2980b9' : '#34495e'};\n  }\n`;\n_c17 = ConsoleTab;\nconst AddConsoleButton = styled.button`\n  background-color: #27ae60;\n  color: white;\n  border: none;\n  padding: 5px 10px;\n  border-radius: 3px;\n  cursor: pointer;\n  \n  &:hover {\n    background-color: #219653;\n  }\n`;\n_c18 = AddConsoleButton;\nconst ConsoleWrapper = styled.div`\n  display: ${props => props.active ? 'block' : 'none'};\n  height: calc(100% - 40px);\n  background: #2A2A2A;\n  border-radius: 8px;\n  overflow: hidden;\n`;\n_c19 = ConsoleWrapper;\nconst CloseButton = styled.span`\n  margin-left: 8px;\n  padding: 0 4px;\n  color: #fff;\n  opacity: 0.7;\n  cursor: pointer;\n  \n  &:hover {\n    opacity: 1;\n  }\n`;\n_c20 = CloseButton;\nexport const Game = ({\n  inventory,\n  setInventory,\n  money,\n  setMoney,\n  onOpenTechTree,\n  unlockedCrops\n}) => {\n  _s();\n  const [activeConsole, setActiveConsole] = useState(0);\n  const [consoles, setConsoles] = useState([{\n    id: 0,\n    name: 'Console 1'\n  }]);\n  const [consoleContents, setConsoleContents] = useState({});\n  const [modalState, setModalState] = useState({\n    isOpen: false,\n    mode: null\n  });\n  const [lastAction, setLastAction] = useState(null);\n  const [gameState, setGameState] = useState({\n    grid: Array(1).fill().map(() => Array(1).fill(null)),\n    money: money,\n    inventory: {\n      wheat_seeds: 0,\n      corn_seeds: 0,\n      potato_seeds: 0,\n      wheat: 0,\n      corn: 0,\n      potato: 0,\n      ...inventory\n    },\n    dronePosition: {\n      x: 0,\n      y: 0\n    },\n    droneInventory: [],\n    land: Array(1).fill().map(() => ({\n      isPlowed: false,\n      hasCrop: false,\n      cropType: null,\n      cropState: null\n    })),\n    drone: {\n      x: 0,\n      y: 0\n    },\n    unlockedCrops: unlockedCrops,\n    selectedCrop: null\n  });\n  const farmRef = useRef(null);\n\n  // Initialize shared farm instance\n  useEffect(() => {\n    if (!farmRef.current) {\n      farmRef.current = createFarmInstance(gameState, setGameState, handleBuyItem, handleSellItem);\n    }\n\n    // Update farm properties without recreating the object\n    if (farmRef.current) {\n      // Only update the properties that can change\n      farmRef.current.money = gameState.money;\n      farmRef.current.land = gameState.land;\n      farmRef.current.size = Math.sqrt(gameState.land.length);\n      farmRef.current.drone = gameState.drone;\n      farmRef.current.inventory = gameState.inventory;\n      farmRef.current.unlockedCrops = gameState.unlockedCrops;\n    }\n  }, [gameState]);\n\n  // Function to create farm instance\n  const createFarmInstance = (gameState, setGameState, onBuyItem, onSellItem) => {\n    const farm = {\n      money: gameState.money,\n      land: gameState.land,\n      size: Math.sqrt(gameState.land.length),\n      maxSize: 5,\n      drone: gameState.drone,\n      inventory: gameState.inventory,\n      unlockedCrops: gameState.unlockedCrops,\n      print: function (text) {\n        // Print function will be set by each console\n        return text; // Use the parameter to satisfy ESLint\n      },\n      expand: function () {\n        if (this.size >= this.maxSize) {\n          this.print(`Farm is already at maximum size (${this.maxSize}x${this.maxSize})`);\n          return false;\n        }\n        const newSize = this.size + 1;\n        const newLand = Array(newSize * newSize).fill().map((_, index) => {\n          if (index < this.land.length) {\n            return this.land[index];\n          }\n          return {\n            isPlowed: false,\n            hasCrop: false,\n            cropType: null,\n            cropState: null,\n            plantedTime: null\n          };\n        });\n        setGameState(prev => ({\n          ...prev,\n          land: newLand\n        }));\n        this.land = newLand;\n        this.size = newSize;\n        this.print(`Farm expanded to ${newSize}x${newSize}`);\n        return true;\n      },\n      move: function (x, y) {\n        if (0 <= x && x < this.size && 0 <= y && y < this.size) {\n          setGameState(prev => ({\n            ...prev,\n            dronePosition: {\n              x,\n              y\n            },\n            drone: {\n              x,\n              y\n            }\n          }));\n          this.drone = {\n            x,\n            y\n          };\n          this.print(`Moved to (${x}, ${y})`);\n          return true;\n        }\n        this.print(\"Invalid coordinates\");\n        return false;\n      },\n      plow: function () {\n        const x = this.drone.x;\n        const y = this.drone.y;\n        const index = y * this.size + x;\n        if (this.land[index].isPlowed) {\n          this.print(\"This tile is already plowed\");\n          return false;\n        }\n        const newLand = [...this.land];\n        newLand[index] = {\n          ...newLand[index],\n          isPlowed: true\n        };\n        setGameState(prev => ({\n          ...prev,\n          land: newLand\n        }));\n        this.land = newLand;\n        this.print(`Successfully plowed tile at (${x}, ${y})`);\n        return true;\n      },\n      plant: function (cropType) {\n        const x = this.drone.x;\n        const y = this.drone.y;\n        const index = y * this.size + x;\n\n        // Check if crop is unlocked\n        if (!this.unlockedCrops.includes(cropType)) {\n          this.print(`Cannot plant ${cropType} - You need to unlock it first in the Tech Tree!`);\n          return false;\n        }\n\n        // Check if we have seeds\n        if (!this.inventory[`${cropType}_seeds`] || this.inventory[`${cropType}_seeds`] <= 0) {\n          this.print(`Cannot plant ${cropType} - No seeds available!`);\n          return false;\n        }\n        if (this.land[index].isPlowed && !this.land[index].hasCrop) {\n          const newLand = [...this.land];\n          newLand[index] = {\n            ...newLand[index],\n            hasCrop: true,\n            cropType: cropType,\n            cropState: 'growing',\n            plantedTime: Date.now()\n          };\n\n          // Update inventory\n          const newInventory = {\n            ...this.inventory,\n            [`${cropType}_seeds`]: this.inventory[`${cropType}_seeds`] - 1\n          };\n          setGameState(prev => ({\n            ...prev,\n            land: newLand,\n            inventory: newInventory\n          }));\n          this.land = newLand;\n          this.inventory = newInventory;\n          this.print(`Successfully planted ${cropType} at (${x}, ${y})`);\n          return true;\n        }\n        this.print(`Failed to plant ${cropType} - Make sure the tile is plowed and empty`);\n        return false;\n      },\n      harvest: function () {\n        const x = this.drone.x;\n        const y = this.drone.y;\n        const index = y * this.size + x;\n        if (this.land[index].hasCrop && this.land[index].cropState === 'ready') {\n          const cropType = this.land[index].cropType;\n          const newLand = [...this.land];\n          newLand[index] = {\n            ...newLand[index],\n            hasCrop: false,\n            cropType: null,\n            cropState: null,\n            plantedTime: null\n          };\n\n          // Update inventory\n          const newInventory = {\n            ...this.inventory,\n            [cropType]: (this.inventory[cropType] || 0) + 1\n          };\n          setGameState(prev => ({\n            ...prev,\n            land: newLand,\n            inventory: newInventory\n          }));\n          this.land = newLand;\n          this.inventory = newInventory;\n          this.print(`Successfully harvested ${cropType} at (${x}, ${y})`);\n          return true;\n        }\n        this.print(`Failed to harvest - No ready crop at (${x}, ${y})`);\n        return false;\n      },\n      scan: function () {\n        const x = this.drone.x;\n        const y = this.drone.y;\n        const index = y * this.size + x;\n        const tile = this.land[index];\n        let status = \"empty\";\n        if (tile.isPlowed) {\n          status = \"plowed\";\n        }\n        if (tile.hasCrop) {\n          status = `${tile.cropState} ${tile.cropType}`;\n        }\n        this.print(`Scan results at (${x}, ${y}): ${status}`);\n        return status;\n      },\n      position: function () {\n        return {\n          x: this.drone.x,\n          y: this.drone.y\n        };\n      },\n      buy: function (itemType, amount = 1) {\n        const prices = {\n          wheat_seeds: 10,\n          corn_seeds: 20,\n          potato_seeds: 15\n        };\n        const cost = prices[itemType];\n        if (!cost) {\n          this.print(`Cannot buy ${itemType} - Item not available in shop!`);\n          return false;\n        }\n        if (onBuyItem(itemType, amount, cost)) {\n          this.print(`Bought ${amount} ${itemType} for $${cost * amount}`);\n          return true;\n        } else {\n          this.print(`Cannot buy ${itemType} - Not enough money!`);\n          return false;\n        }\n      },\n      sell: function (itemType, amount = 1) {\n        const prices = {\n          wheat: 25,\n          corn: 40,\n          potato: 30\n        };\n        const price = prices[itemType];\n        if (!price) {\n          this.print(`Cannot sell ${itemType} - Item not recognized!`);\n          return false;\n        }\n        if (onSellItem(itemType, amount, price)) {\n          this.print(`Sold ${amount} ${itemType} for $${price * amount}`);\n          return true;\n        } else {\n          this.print(`Cannot sell ${itemType} - Not enough in inventory!`);\n          return false;\n        }\n      },\n      toString: function () {\n        return `Farm(money=$${this.money}, size=${this.size}x${this.size}, inventory=${JSON.stringify(this.inventory)})`;\n      }\n    };\n    return farm;\n  };\n\n  // Update parent state when gameState changes\n  useEffect(() => {\n    setInventory(gameState.inventory);\n    setMoney(gameState.money);\n  }, [gameState.inventory, gameState.money, setInventory, setMoney]);\n\n  // Function to update inventory\n  const updateInventory = items => {\n    setGameState(prevState => ({\n      ...prevState,\n      inventory: {\n        ...prevState.inventory,\n        ...items\n      }\n    }));\n  };\n\n  // Function to update money\n  const updateMoney = amount => {\n    setGameState(prevState => ({\n      ...prevState,\n      money: prevState.money + amount\n    }));\n  };\n\n  // Add this function to handle buying items\n  const handleBuyItem = (itemType, amount, cost) => {\n    const totalCost = amount * cost;\n    if (gameState.money >= totalCost) {\n      updateMoney(-totalCost);\n      updateInventory({\n        [itemType]: (gameState.inventory[itemType] || 0) + amount\n      });\n      return true;\n    }\n    return false;\n  };\n\n  // Add this function to handle selling items\n  const handleSellItem = (itemType, amount, price) => {\n    if (gameState.inventory[itemType] >= amount) {\n      const totalPrice = amount * price;\n      updateMoney(totalPrice);\n      updateInventory({\n        [itemType]: gameState.inventory[itemType] - amount\n      });\n      return true;\n    }\n    return false;\n  };\n\n  // Add crop growth system\n  useEffect(() => {\n    const growthInterval = setInterval(() => {\n      setGameState(prevState => {\n        const newLand = [...prevState.land];\n        let hasChanges = false;\n        newLand.forEach((tile, index) => {\n          if (tile.hasCrop && tile.cropState === 'growing') {\n            const growthTime = {\n              wheat: 1000,\n              // 1 second for wheat\n              corn: 2000,\n              // 2 seconds for corn\n              potato: 3000 // 3 seconds for potato\n            };\n            const currentTime = Date.now();\n            const elapsedTime = currentTime - tile.plantedTime;\n            if (elapsedTime >= growthTime[tile.cropType]) {\n              newLand[index] = {\n                ...tile,\n                cropState: 'ready'\n              };\n              hasChanges = true;\n            }\n          }\n        });\n        return hasChanges ? {\n          ...prevState,\n          land: newLand\n        } : prevState;\n      });\n    }, 1000); // Check every second\n\n    return () => clearInterval(growthInterval);\n  }, []);\n\n  // Add visual feedback for crop state\n  const getCropColor = (cropType, cropState) => {\n    if (cropState === 'growing') {\n      return {\n        wheat: '#F4D03F80',\n        // Semi-transparent yellow\n        corn: '#F39C1280',\n        // Semi-transparent orange\n        potato: '#93511680' // Semi-transparent brown\n      }[cropType] || '#90EE90';\n    } else if (cropState === 'ready') {\n      return {\n        wheat: '#F4D03F',\n        // Bright yellow\n        corn: '#F39C12',\n        // Bright orange\n        potato: '#935116' // Rich brown\n      }[cropType] || '#228B22';\n    }\n    return '#90EE90';\n  };\n  const handleConsoleContentChange = (consoleId, content) => {\n    setConsoleContents(prev => ({\n      ...prev,\n      [consoleId]: content\n    }));\n  };\n  const handleSave = saveName => {\n    const gameData = {\n      gameState: {\n        grid: gameState.grid,\n        money: gameState.money,\n        inventory: gameState.inventory,\n        dronePosition: gameState.dronePosition,\n        droneInventory: gameState.droneInventory,\n        land: gameState.land,\n        drone: gameState.drone,\n        unlockedCrops: gameState.unlockedCrops\n      },\n      consoles: {\n        states: consoleContents,\n        active: activeConsole,\n        list: consoles\n      },\n      currentSaveName: saveName // Store the current save name\n    };\n    const existingSaves = JSON.parse(localStorage.getItem('farmGameSaves') || '{}');\n    existingSaves[saveName] = gameData;\n    localStorage.setItem('farmGameSaves', JSON.stringify(existingSaves));\n    setModalState({\n      isOpen: false,\n      mode: null\n    });\n  };\n  const handleLoad = saveName => {\n    const saves = JSON.parse(localStorage.getItem('farmGameSaves') || '{}');\n    try {\n      const gameData = saves[saveName];\n\n      // Restore game state\n      setGameState(gameData.gameState);\n      setMoney(gameData.gameState.money);\n\n      // Properly update inventory in parent state\n      if (gameData.gameState.inventory) {\n        setInventory(gameData.gameState.inventory);\n      }\n\n      // Restore console states\n      if (gameData.consoles) {\n        setConsoles(gameData.consoles.list || [{\n          id: 0,\n          name: 'Console 1'\n        }]);\n        setActiveConsole(gameData.consoles.active || 0);\n        setConsoleContents(gameData.consoles.states || {});\n      }\n\n      // When loading a save, automatically set up to save back to the same file\n      setModalState({\n        isOpen: false,\n        mode: null,\n        lastSaveName: saveName // Store the last used save name\n      });\n    } catch (error) {\n      console.error('Error loading game:', error);\n      alert('Error loading game save');\n    }\n  };\n\n  // Modified save button click handler\n  const handleSaveClick = () => {\n    if (modalState.lastSaveName) {\n      // If we have a last save name, use it directly\n      handleSave(modalState.lastSaveName);\n    } else {\n      // Otherwise open the modal for a new save\n      setModalState({\n        isOpen: true,\n        mode: 'save'\n      });\n    }\n  };\n  const handleDelete = saveName => {\n    const saves = JSON.parse(localStorage.getItem('farmGameSaves') || '{}');\n    delete saves[saveName];\n    localStorage.setItem('farmGameSaves', JSON.stringify(saves));\n    // Force a re-render of the modal\n    setModalState({\n      ...modalState\n    });\n  };\n  const addNewConsole = () => {\n    const newConsole = {\n      id: consoles.length,\n      name: `Console ${consoles.length + 1}`\n    };\n    setConsoles([...consoles, newConsole]);\n  };\n  const removeConsole = id => {\n    if (consoles.length > 1) {\n      const newConsoles = consoles.filter(console => console.id !== id);\n      setConsoles(newConsoles);\n      if (activeConsole === id) {\n        setActiveConsole(newConsoles[0].id);\n      }\n    }\n  };\n\n  // Add action handler function\n  const handleGameAction = (type, tileIndex) => {\n    setLastAction({\n      type,\n      tileIndex\n    });\n  };\n\n  // Add action completion handler\n  const handleActionComplete = action => {\n    // Reset last action\n    setLastAction(null);\n\n    // Update game state based on action\n    const newLand = [...gameState.land];\n    const tile = newLand[action.tileIndex];\n    let harvestedCrop; // Move declaration outside case blocks\n\n    switch (action.type) {\n      case 'PLOW':\n        {\n          tile.isPlowed = true;\n          break;\n        }\n      case 'PLANT':\n        {\n          tile.hasCrop = true;\n          tile.cropState = 'growing';\n          tile.cropType = gameState.selectedCrop;\n          tile.plantedTime = Date.now();\n          // Update inventory\n          setGameState(prev => ({\n            ...prev,\n            inventory: {\n              ...prev.inventory,\n              [`${gameState.selectedCrop}_seeds`]: prev.inventory[`${gameState.selectedCrop}_seeds`] - 1\n            }\n          }));\n          break;\n        }\n      case 'GROW':\n        {\n          tile.cropState = 'ready';\n          break;\n        }\n      case 'HARVEST':\n        {\n          harvestedCrop = tile.cropType;\n          tile.hasCrop = false;\n          tile.cropState = null;\n          tile.cropType = null;\n          tile.isPlowed = false;\n          // Update inventory with harvested crop\n          setGameState(prev => ({\n            ...prev,\n            inventory: {\n              ...prev.inventory,\n              [harvestedCrop]: (prev.inventory[harvestedCrop] || 0) + 1\n            }\n          }));\n          break;\n        }\n      default:\n        break;\n    }\n    setGameState(prev => ({\n      ...prev,\n      land: newLand\n    }));\n  };\n  return /*#__PURE__*/_jsxDEV(GameContainer, {\n    children: [/*#__PURE__*/_jsxDEV(Header, {\n      children: [/*#__PURE__*/_jsxDEV(Title, {\n        children: \"Farming Game\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 802,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(GameControls, {\n        children: [/*#__PURE__*/_jsxDEV(SaveLoadButton, {\n          onClick: handleSaveClick,\n          children: \"Save Game\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 804,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(SaveLoadButton, {\n          onClick: () => setModalState({\n            isOpen: true,\n            mode: 'load'\n          }),\n          children: \"Load Game\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 807,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(MoneyDisplay, {\n          children: [\"$\", money]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 810,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(TechTreeButton, {\n          onClick: onOpenTechTree,\n          children: \"Tech Tree\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 811,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 803,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 801,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(GameGridContainer, {\n      children: [/*#__PURE__*/_jsxDEV(GameGrid, {\n        size: Math.sqrt(gameState.land.length),\n        children: gameState.land.map((tile, index) => {\n          const x = Math.floor(index / Math.sqrt(gameState.land.length));\n          const y = index % Math.sqrt(gameState.land.length);\n          const isDroneHere = gameState.dronePosition.x === x && gameState.dronePosition.y === y;\n          return /*#__PURE__*/_jsxDEV(LandTile, {\n            isPlowed: tile.isPlowed,\n            hasCrop: tile.hasCrop,\n            cropState: tile.cropState,\n            onClick: () => {\n              // Handle tile clicks based on current state\n              if (!tile.isPlowed && !tile.hasCrop) {\n                handleGameAction('PLOW', index);\n              } else if (tile.isPlowed && !tile.hasCrop && gameState.selectedCrop) {\n                handleGameAction('PLANT', index);\n              } else if (tile.hasCrop && tile.cropState === 'ready') {\n                handleGameAction('HARVEST', index);\n              }\n            },\n            children: [tile.hasCrop && /*#__PURE__*/_jsxDEV(CropIndicator, {\n              color: getCropColor(tile.cropType, tile.cropState)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 840,\n              columnNumber: 19\n            }, this), isDroneHere && /*#__PURE__*/_jsxDEV(StyledDroneSprite, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 844,\n              columnNumber: 33\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 823,\n            columnNumber: 15\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 816,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(StyledGameStats, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            children: \"Drone Position:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 851,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: [\"(\", gameState.dronePosition.x, \", \", gameState.dronePosition.y, \")\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 852,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 850,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            children: \"Status:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 855,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: gameState.land[gameState.dronePosition.y * Math.sqrt(gameState.land.length) + gameState.dronePosition.x].isPlowed ? 'Plowed' : 'Unplowed'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 856,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 854,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 849,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 815,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ThreeDViewContainer, {\n      children: /*#__PURE__*/_jsxDEV(Game3D, {\n        gameState: gameState,\n        lastAction: lastAction,\n        onActionComplete: handleActionComplete\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 862,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 861,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(StyledConsoleContainer, {\n      children: [/*#__PURE__*/_jsxDEV(ConsoleTabs, {\n        children: [consoles.map(console => /*#__PURE__*/_jsxDEV(ConsoleTab, {\n          active: activeConsole === console.id,\n          onClick: () => setActiveConsole(console.id),\n          children: [console.name, consoles.length > 1 && /*#__PURE__*/_jsxDEV(CloseButton, {\n            onClick: e => {\n              e.stopPropagation();\n              removeConsole(console.id);\n            },\n            children: \"\\xD7\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 879,\n            columnNumber: 17\n          }, this)]\n        }, console.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 872,\n          columnNumber: 13\n        }, this)), /*#__PURE__*/_jsxDEV(AddConsoleButton, {\n          onClick: addNewConsole,\n          children: \"+\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 886,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 870,\n        columnNumber: 9\n      }, this), consoles.map(console => /*#__PURE__*/_jsxDEV(ConsoleWrapper, {\n        active: activeConsole === console.id,\n        children: /*#__PURE__*/_jsxDEV(JavaScriptConsole, {\n          gameState: gameState,\n          setGameState: setGameState,\n          consoleId: console.id,\n          content: consoleContents[console.id] || '',\n          onContentChange: handleConsoleContentChange,\n          onBuyItem: handleBuyItem,\n          onSellItem: handleSellItem,\n          farm: farmRef.current,\n          setPrintFunction: printFn => {\n            if (farmRef.current) {\n              farmRef.current.print = printFn;\n            }\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 891,\n          columnNumber: 13\n        }, this)\n      }, console.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 890,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 869,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(SaveLoadModal, {\n      isOpen: modalState.isOpen,\n      mode: modalState.mode,\n      onClose: () => setModalState({\n        isOpen: false,\n        mode: null\n      }),\n      onSave: handleSave,\n      onLoad: handleLoad,\n      onDelete: handleDelete,\n      currentSaveName: modalState.lastSaveName\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 910,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 800,\n    columnNumber: 5\n  }, this);\n};\n_s(Game, \"6VUl1m88PNhbRitFgejHtUspMPo=\");\n_c21 = Game;\nexport default Game;\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7, _c8, _c9, _c10, _c11, _c12, _c13, _c14, _c15, _c16, _c17, _c18, _c19, _c20, _c21;\n$RefreshReg$(_c, \"GameContainer\");\n$RefreshReg$(_c2, \"Header\");\n$RefreshReg$(_c3, \"Title\");\n$RefreshReg$(_c4, \"GameControls\");\n$RefreshReg$(_c5, \"SaveLoadButton\");\n$RefreshReg$(_c6, \"MoneyDisplay\");\n$RefreshReg$(_c7, \"TechTreeButton\");\n$RefreshReg$(_c8, \"GameGridContainer\");\n$RefreshReg$(_c9, \"GameGrid\");\n$RefreshReg$(_c10, \"LandTile\");\n$RefreshReg$(_c11, \"CropIndicator\");\n$RefreshReg$(_c12, \"StyledDroneSprite\");\n$RefreshReg$(_c13, \"StyledGameStats\");\n$RefreshReg$(_c14, \"ThreeDViewContainer\");\n$RefreshReg$(_c15, \"StyledConsoleContainer\");\n$RefreshReg$(_c16, \"ConsoleTabs\");\n$RefreshReg$(_c17, \"ConsoleTab\");\n$RefreshReg$(_c18, \"AddConsoleButton\");\n$RefreshReg$(_c19, \"ConsoleWrapper\");\n$RefreshReg$(_c20, \"CloseButton\");\n$RefreshReg$(_c21, \"Game\");","map":{"version":3,"names":["React","useState","useEffect","useRef","styled","JavaScriptConsole","Game3D","SaveLoadModal","jsxDEV","_jsxDEV","GameContainer","div","_c","Header","_c2","Title","h1","_c3","GameControls","_c4","SaveLoadButton","button","_c5","MoneyDisplay","_c6","TechTreeButton","_c7","GameGridContainer","_c8","GameGrid","props","size","_c9","LandTile","isPlowed","hasCrop","cropState","_c10","CropIndicator","color","_c11","StyledDroneSprite","_c12","StyledGameStats","_c13","ThreeDViewContainer","_c14","StyledConsoleContainer","_c15","ConsoleTabs","_c16","ConsoleTab","active","_c17","AddConsoleButton","_c18","ConsoleWrapper","_c19","CloseButton","span","_c20","Game","inventory","setInventory","money","setMoney","onOpenTechTree","unlockedCrops","_s","activeConsole","setActiveConsole","consoles","setConsoles","id","name","consoleContents","setConsoleContents","modalState","setModalState","isOpen","mode","lastAction","setLastAction","gameState","setGameState","grid","Array","fill","map","wheat_seeds","corn_seeds","potato_seeds","wheat","corn","potato","dronePosition","x","y","droneInventory","land","cropType","drone","selectedCrop","farmRef","current","createFarmInstance","handleBuyItem","handleSellItem","Math","sqrt","length","onBuyItem","onSellItem","farm","maxSize","print","text","expand","newSize","newLand","_","index","plantedTime","prev","move","plow","plant","includes","Date","now","newInventory","harvest","scan","tile","status","position","buy","itemType","amount","prices","cost","sell","price","toString","JSON","stringify","updateInventory","items","prevState","updateMoney","totalCost","totalPrice","growthInterval","setInterval","hasChanges","forEach","growthTime","currentTime","elapsedTime","clearInterval","getCropColor","handleConsoleContentChange","consoleId","content","handleSave","saveName","gameData","states","list","currentSaveName","existingSaves","parse","localStorage","getItem","setItem","handleLoad","saves","lastSaveName","error","console","alert","handleSaveClick","handleDelete","addNewConsole","newConsole","removeConsole","newConsoles","filter","handleGameAction","type","tileIndex","handleActionComplete","action","harvestedCrop","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","floor","isDroneHere","onActionComplete","e","stopPropagation","onContentChange","setPrintFunction","printFn","onClose","onSave","onLoad","onDelete","_c21","$RefreshReg$"],"sources":["C:/Users/SPIDER/Downloads/Project/Demo GPT/Demo 1/src/components/Game.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport styled from 'styled-components';\r\nimport JavaScriptConsole from './JavaScriptConsole';\r\nimport Game3D from './Game3D';\r\nimport SaveLoadModal from './SaveLoadModal';\r\n\r\nconst GameContainer = styled.div`\r\n  display: grid;\r\n  grid-template-areas:\r\n    \"header header header\"\r\n    \"grid view console\";\r\n  grid-template-columns: minmax(300px, 25%) minmax(400px, 45%) minmax(300px, 30%);\r\n  grid-template-rows: 60px 1fr;\r\n  gap: 16px;\r\n  padding: 16px;\r\n  height: 100vh;\r\n  background-color: #1E1E1E;\r\n  box-sizing: border-box;\r\n`;\r\n\r\nconst Header = styled.div`\r\n  grid-area: header;\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  background: #2A2A2A;\r\n  padding: 0 20px;\r\n  border-radius: 12px;\r\n  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\r\n`;\r\n\r\nconst Title = styled.h1`\r\n  color: white;\r\n  margin: 0;\r\n  font-size: 24px;\r\n`;\r\n\r\nconst GameControls = styled.div`\r\n  display: flex;\r\n  gap: 10px;\r\n  margin-bottom: 10px;\r\n`;\r\n\r\nconst SaveLoadButton = styled.button`\r\n  background-color: #2ecc71;\r\n  color: white;\r\n  padding: 8px 16px;\r\n  border-radius: 4px;\r\n  border: none;\r\n  cursor: pointer;\r\n  font-weight: bold;\r\n\r\n  &:hover {\r\n    background-color: #27ae60;\r\n  }\r\n`;\r\n\r\nconst MoneyDisplay = styled.div`\r\n  background-color: #27ae60;\r\n  color: white;\r\n  padding: 8px 16px;\r\n  border-radius: 4px;\r\n  font-weight: bold;\r\n`;\r\n\r\nconst TechTreeButton = styled.button`\r\n  background-color: #8e44ad;\r\n  &:hover {\r\n    background-color: #9b59b6;\r\n  }\r\n`;\r\n\r\nconst GameGridContainer = styled.div`\r\n  grid-area: grid;\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 16px;\r\n  background: #2A2A2A;\r\n  border-radius: 12px;\r\n  padding: 20px;\r\n  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\r\n`;\r\n\r\nconst GameGrid = styled.div`\r\n  display: grid;\r\n  grid-template-columns: repeat(${props => props.size}, 1fr);\r\n  grid-template-rows: repeat(${props => props.size}, 1fr);\r\n  gap: 5px;\r\n  width: 300px;\r\n  height: 300px;\r\n  background-color: #8B4513;\r\n  padding: 10px;\r\n  border-radius: 5px;\r\n`;\r\n\r\nconst LandTile = styled.div`\r\n  width: 100%;\r\n  aspect-ratio: 1;\r\n  background-color: ${props => {\r\n    if (props.isPlowed) return '#8B4513';\r\n    if (props.hasCrop && props.cropState === 'growing') return '#90EE90';\r\n    if (props.hasCrop && props.cropState === 'ready') return '#228B22';\r\n    return '#90EE90';\r\n  }};\r\n  border: 1px solid #2c3e50;\r\n  cursor: pointer;\r\n  position: relative;\r\n  transition: all 0.3s ease;\r\n\r\n  &:hover {\r\n    transform: scale(1.05);\r\n  }\r\n`;\r\n\r\nconst CropIndicator = styled.div`\r\n  position: absolute;\r\n  top: 50%;\r\n  left: 50%;\r\n  transform: translate(-50%, -50%);\r\n  width: 80%;\r\n  height: 80%;\r\n  background-color: ${props => props.color};\r\n  border-radius: 50%;\r\n`;\r\n\r\nconst StyledDroneSprite = styled.div`\r\n  position: absolute;\r\n  top: 50%;\r\n  left: 50%;\r\n  width: 60%;\r\n  height: 60%;\r\n  transform: translate(-50%, -50%);\r\n  z-index: 2;\r\n  filter: drop-shadow(0 2px 4px rgba(0, 0, 0, 0.3));\r\n  \r\n  &::before {\r\n    content: 'ðŸ›¸';\r\n    position: absolute;\r\n    top: 50%;\r\n    left: 50%;\r\n    transform: translate(-50%, -50%);\r\n    font-size: 24px;\r\n  }\r\n`;\r\n\r\nconst StyledGameStats = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 12px;\r\n  padding: 16px;\r\n  background: #232323;\r\n  border-radius: 8px;\r\n  font-size: 14px;\r\n  color: #E0E0E0;\r\n\r\n  div {\r\n    display: flex;\r\n    justify-content: space-between;\r\n    padding: 8px;\r\n    background: rgba(255, 255, 255, 0.05);\r\n    border-radius: 4px;\r\n  }\r\n`;\r\n\r\nconst ThreeDViewContainer = styled.div`\r\n  grid-area: view;\r\n  background: #2A2A2A;\r\n  border-radius: 12px;\r\n  overflow: hidden;\r\n  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\r\n`;\r\n\r\nconst StyledConsoleContainer = styled.div`\r\n  grid-area: console;\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 16px;\r\n  background: #2A2A2A;\r\n  border-radius: 12px;\r\n  padding: 20px;\r\n  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\r\n`;\r\n\r\nconst ConsoleTabs = styled.div`\r\n  display: flex;\r\n  gap: 5px;\r\n  margin-bottom: 10px;\r\n`;\r\n\r\nconst ConsoleTab = styled.button`\r\n  background-color: ${props => props.active ? '#3498db' : '#2c3e50'};\r\n  color: white;\r\n  border: none;\r\n  padding: 5px 10px;\r\n  border-radius: 3px;\r\n  cursor: pointer;\r\n  \r\n  &:hover {\r\n    background-color: ${props => props.active ? '#2980b9' : '#34495e'};\r\n  }\r\n`;\r\n\r\nconst AddConsoleButton = styled.button`\r\n  background-color: #27ae60;\r\n  color: white;\r\n  border: none;\r\n  padding: 5px 10px;\r\n  border-radius: 3px;\r\n  cursor: pointer;\r\n  \r\n  &:hover {\r\n    background-color: #219653;\r\n  }\r\n`;\r\n\r\nconst ConsoleWrapper = styled.div`\r\n  display: ${props => props.active ? 'block' : 'none'};\r\n  height: calc(100% - 40px);\r\n  background: #2A2A2A;\r\n  border-radius: 8px;\r\n  overflow: hidden;\r\n`;\r\n\r\nconst CloseButton = styled.span`\r\n  margin-left: 8px;\r\n  padding: 0 4px;\r\n  color: #fff;\r\n  opacity: 0.7;\r\n  cursor: pointer;\r\n  \r\n  &:hover {\r\n    opacity: 1;\r\n  }\r\n`;\r\n\r\nexport const Game = ({ inventory, setInventory, money, setMoney, onOpenTechTree, unlockedCrops }) => {\r\n  const [activeConsole, setActiveConsole] = useState(0);\r\n  const [consoles, setConsoles] = useState([{ id: 0, name: 'Console 1' }]);\r\n  const [consoleContents, setConsoleContents] = useState({});\r\n  const [modalState, setModalState] = useState({ isOpen: false, mode: null });\r\n  const [lastAction, setLastAction] = useState(null);\r\n\r\n  const [gameState, setGameState] = useState({\r\n    grid: Array(1).fill().map(() => Array(1).fill(null)),\r\n    money: money,\r\n    inventory: {\r\n      wheat_seeds: 0,\r\n      corn_seeds: 0,\r\n      potato_seeds: 0,\r\n      wheat: 0,\r\n      corn: 0,\r\n      potato: 0,\r\n      ...inventory\r\n    },\r\n    dronePosition: { x: 0, y: 0 },\r\n    droneInventory: [],\r\n    land: Array(1).fill().map(() => ({\r\n      isPlowed: false,\r\n      hasCrop: false,\r\n      cropType: null,\r\n      cropState: null\r\n    })),\r\n    drone: {\r\n      x: 0,\r\n      y: 0\r\n    },\r\n    unlockedCrops: unlockedCrops,\r\n    selectedCrop: null\r\n  });\r\n\r\n  const farmRef = useRef(null);\r\n\r\n  // Initialize shared farm instance\r\n  useEffect(() => {\r\n    if (!farmRef.current) {\r\n      farmRef.current = createFarmInstance(gameState, setGameState, handleBuyItem, handleSellItem);\r\n    }\r\n\r\n    // Update farm properties without recreating the object\r\n    if (farmRef.current) {\r\n      // Only update the properties that can change\r\n      farmRef.current.money = gameState.money;\r\n      farmRef.current.land = gameState.land;\r\n      farmRef.current.size = Math.sqrt(gameState.land.length);\r\n      farmRef.current.drone = gameState.drone;\r\n      farmRef.current.inventory = gameState.inventory;\r\n      farmRef.current.unlockedCrops = gameState.unlockedCrops;\r\n    }\r\n  }, [gameState]);\r\n\r\n  // Function to create farm instance\r\n  const createFarmInstance = (gameState, setGameState, onBuyItem, onSellItem) => {\r\n    const farm = {\r\n      money: gameState.money,\r\n      land: gameState.land,\r\n      size: Math.sqrt(gameState.land.length),\r\n      maxSize: 5,\r\n      drone: gameState.drone,\r\n      inventory: gameState.inventory,\r\n      unlockedCrops: gameState.unlockedCrops,\r\n      \r\n      print: function(text) {\r\n        // Print function will be set by each console\r\n        return text; // Use the parameter to satisfy ESLint\r\n      },\r\n\r\n      expand: function() {\r\n        if (this.size >= this.maxSize) {\r\n          this.print(`Farm is already at maximum size (${this.maxSize}x${this.maxSize})`);\r\n          return false;\r\n        }\r\n\r\n        const newSize = this.size + 1;\r\n        const newLand = Array(newSize * newSize).fill().map((_, index) => {\r\n          if (index < this.land.length) {\r\n            return this.land[index];\r\n          }\r\n          return {\r\n            isPlowed: false,\r\n            hasCrop: false,\r\n            cropType: null,\r\n            cropState: null,\r\n            plantedTime: null\r\n          };\r\n        });\r\n\r\n        setGameState(prev => ({ ...prev, land: newLand }));\r\n        this.land = newLand;\r\n        this.size = newSize;\r\n        this.print(`Farm expanded to ${newSize}x${newSize}`);\r\n        return true;\r\n      },\r\n      \r\n      move: function(x, y) {\r\n        if (0 <= x && x < this.size && 0 <= y && y < this.size) {\r\n          setGameState(prev => ({\r\n            ...prev,\r\n            dronePosition: { x, y },\r\n            drone: { x, y }\r\n          }));\r\n          this.drone = { x, y };\r\n          this.print(`Moved to (${x}, ${y})`);\r\n          return true;\r\n        }\r\n        this.print(\"Invalid coordinates\");\r\n        return false;\r\n      },\r\n\r\n      plow: function() {\r\n        const x = this.drone.x;\r\n        const y = this.drone.y;\r\n        const index = y * this.size + x;\r\n        if (this.land[index].isPlowed) {\r\n          this.print(\"This tile is already plowed\");\r\n          return false;\r\n        }\r\n        const newLand = [...this.land];\r\n        newLand[index] = { ...newLand[index], isPlowed: true };\r\n        setGameState(prev => ({ ...prev, land: newLand }));\r\n        this.land = newLand;\r\n        this.print(`Successfully plowed tile at (${x}, ${y})`);\r\n        return true;\r\n      },\r\n\r\n      plant: function(cropType) {\r\n        const x = this.drone.x;\r\n        const y = this.drone.y;\r\n        const index = y * this.size + x;\r\n        \r\n        // Check if crop is unlocked\r\n        if (!this.unlockedCrops.includes(cropType)) {\r\n          this.print(`Cannot plant ${cropType} - You need to unlock it first in the Tech Tree!`);\r\n          return false;\r\n        }\r\n        \r\n        // Check if we have seeds\r\n        if (!this.inventory[`${cropType}_seeds`] || this.inventory[`${cropType}_seeds`] <= 0) {\r\n          this.print(`Cannot plant ${cropType} - No seeds available!`);\r\n          return false;\r\n        }\r\n\r\n        if (this.land[index].isPlowed && !this.land[index].hasCrop) {\r\n          const newLand = [...this.land];\r\n          newLand[index] = {\r\n            ...newLand[index],\r\n            hasCrop: true,\r\n            cropType: cropType,\r\n            cropState: 'growing',\r\n            plantedTime: Date.now()\r\n          };\r\n          \r\n          // Update inventory\r\n          const newInventory = {\r\n            ...this.inventory,\r\n            [`${cropType}_seeds`]: this.inventory[`${cropType}_seeds`] - 1\r\n          };\r\n          \r\n          setGameState(prev => ({\r\n            ...prev,\r\n            land: newLand,\r\n            inventory: newInventory\r\n          }));\r\n          \r\n          this.land = newLand;\r\n          this.inventory = newInventory;\r\n          this.print(`Successfully planted ${cropType} at (${x}, ${y})`);\r\n          return true;\r\n        }\r\n        \r\n        this.print(`Failed to plant ${cropType} - Make sure the tile is plowed and empty`);\r\n        return false;\r\n      },\r\n\r\n      harvest: function() {\r\n        const x = this.drone.x;\r\n        const y = this.drone.y;\r\n        const index = y * this.size + x;\r\n        \r\n        if (this.land[index].hasCrop && this.land[index].cropState === 'ready') {\r\n          const cropType = this.land[index].cropType;\r\n          const newLand = [...this.land];\r\n          newLand[index] = {\r\n            ...newLand[index],\r\n            hasCrop: false,\r\n            cropType: null,\r\n            cropState: null,\r\n            plantedTime: null\r\n          };\r\n\r\n          // Update inventory\r\n          const newInventory = {\r\n            ...this.inventory,\r\n            [cropType]: (this.inventory[cropType] || 0) + 1\r\n          };\r\n          \r\n          setGameState(prev => ({\r\n            ...prev,\r\n            land: newLand,\r\n            inventory: newInventory\r\n          }));\r\n          \r\n          this.land = newLand;\r\n          this.inventory = newInventory;\r\n          this.print(`Successfully harvested ${cropType} at (${x}, ${y})`);\r\n          return true;\r\n        }\r\n        this.print(`Failed to harvest - No ready crop at (${x}, ${y})`);\r\n        return false;\r\n      },\r\n\r\n      scan: function() {\r\n        const x = this.drone.x;\r\n        const y = this.drone.y;\r\n        const index = y * this.size + x;\r\n        const tile = this.land[index];\r\n        \r\n        let status = \"empty\";\r\n        if (tile.isPlowed) {\r\n          status = \"plowed\";\r\n        }\r\n        if (tile.hasCrop) {\r\n          status = `${tile.cropState} ${tile.cropType}`;\r\n        }\r\n        \r\n        this.print(`Scan results at (${x}, ${y}): ${status}`);\r\n        return status;\r\n      },\r\n\r\n      position: function() {\r\n        return { x: this.drone.x, y: this.drone.y };\r\n      },\r\n      \r\n      buy: function(itemType, amount = 1) {\r\n        const prices = {\r\n          wheat_seeds: 10,\r\n          corn_seeds: 20,\r\n          potato_seeds: 15\r\n        };\r\n\r\n        const cost = prices[itemType];\r\n        if (!cost) {\r\n          this.print(`Cannot buy ${itemType} - Item not available in shop!`);\r\n          return false;\r\n        }\r\n\r\n        if (onBuyItem(itemType, amount, cost)) {\r\n          this.print(`Bought ${amount} ${itemType} for $${cost * amount}`);\r\n          return true;\r\n        } else {\r\n          this.print(`Cannot buy ${itemType} - Not enough money!`);\r\n          return false;\r\n        }\r\n      },\r\n      \r\n      sell: function(itemType, amount = 1) {\r\n        const prices = {\r\n          wheat: 25,\r\n          corn: 40,\r\n          potato: 30\r\n        };\r\n\r\n        const price = prices[itemType];\r\n        if (!price) {\r\n          this.print(`Cannot sell ${itemType} - Item not recognized!`);\r\n          return false;\r\n        }\r\n\r\n        if (onSellItem(itemType, amount, price)) {\r\n          this.print(`Sold ${amount} ${itemType} for $${price * amount}`);\r\n          return true;\r\n        } else {\r\n          this.print(`Cannot sell ${itemType} - Not enough in inventory!`);\r\n          return false;\r\n        }\r\n      },\r\n      \r\n      toString: function() {\r\n        return `Farm(money=$${this.money}, size=${this.size}x${this.size}, inventory=${JSON.stringify(this.inventory)})`;\r\n      }\r\n    };\r\n\r\n    return farm;\r\n  };\r\n\r\n  // Update parent state when gameState changes\r\n  useEffect(() => {\r\n    setInventory(gameState.inventory);\r\n    setMoney(gameState.money);\r\n  }, [gameState.inventory, gameState.money, setInventory, setMoney]);\r\n\r\n  // Function to update inventory\r\n  const updateInventory = (items) => {\r\n    setGameState(prevState => ({\r\n      ...prevState,\r\n      inventory: {\r\n        ...prevState.inventory,\r\n        ...items\r\n      }\r\n    }));\r\n  };\r\n\r\n  // Function to update money\r\n  const updateMoney = (amount) => {\r\n    setGameState(prevState => ({\r\n      ...prevState,\r\n      money: prevState.money + amount\r\n    }));\r\n  };\r\n\r\n  // Add this function to handle buying items\r\n  const handleBuyItem = (itemType, amount, cost) => {\r\n    const totalCost = amount * cost;\r\n    if (gameState.money >= totalCost) {\r\n      updateMoney(-totalCost);\r\n      updateInventory({\r\n        [itemType]: (gameState.inventory[itemType] || 0) + amount\r\n      });\r\n      return true;\r\n    }\r\n    return false;\r\n  };\r\n\r\n  // Add this function to handle selling items\r\n  const handleSellItem = (itemType, amount, price) => {\r\n    if (gameState.inventory[itemType] >= amount) {\r\n      const totalPrice = amount * price;\r\n      updateMoney(totalPrice);\r\n      updateInventory({\r\n        [itemType]: gameState.inventory[itemType] - amount\r\n      });\r\n      return true;\r\n    }\r\n    return false;\r\n  };\r\n\r\n  // Add crop growth system\r\n  useEffect(() => {\r\n    const growthInterval = setInterval(() => {\r\n      setGameState(prevState => {\r\n        const newLand = [...prevState.land];\r\n        let hasChanges = false;\r\n\r\n        newLand.forEach((tile, index) => {\r\n          if (tile.hasCrop && tile.cropState === 'growing') {\r\n            const growthTime = {\r\n              wheat: 1000,   // 1 second for wheat\r\n              corn: 2000,    // 2 seconds for corn\r\n              potato: 3000   // 3 seconds for potato\r\n            };\r\n\r\n            const currentTime = Date.now();\r\n            const elapsedTime = currentTime - tile.plantedTime;\r\n\r\n            if (elapsedTime >= growthTime[tile.cropType]) {\r\n              newLand[index] = {\r\n                ...tile,\r\n                cropState: 'ready'\r\n              };\r\n              hasChanges = true;\r\n            }\r\n          }\r\n        });\r\n\r\n        return hasChanges ? { ...prevState, land: newLand } : prevState;\r\n      });\r\n    }, 1000); // Check every second\r\n\r\n    return () => clearInterval(growthInterval);\r\n  }, []);\r\n\r\n  // Add visual feedback for crop state\r\n  const getCropColor = (cropType, cropState) => {\r\n    if (cropState === 'growing') {\r\n      return {\r\n        wheat: '#F4D03F80',  // Semi-transparent yellow\r\n        corn: '#F39C1280',   // Semi-transparent orange\r\n        potato: '#93511680'  // Semi-transparent brown\r\n      }[cropType] || '#90EE90';\r\n    } else if (cropState === 'ready') {\r\n      return {\r\n        wheat: '#F4D03F',  // Bright yellow\r\n        corn: '#F39C12',   // Bright orange\r\n        potato: '#935116'  // Rich brown\r\n      }[cropType] || '#228B22';\r\n    }\r\n    return '#90EE90';\r\n  };\r\n\r\n  const handleConsoleContentChange = (consoleId, content) => {\r\n    setConsoleContents(prev => ({\r\n      ...prev,\r\n      [consoleId]: content\r\n    }));\r\n  };\r\n\r\n  const handleSave = (saveName) => {\r\n    const gameData = {\r\n      gameState: {\r\n        grid: gameState.grid,\r\n        money: gameState.money,\r\n        inventory: gameState.inventory,\r\n        dronePosition: gameState.dronePosition,\r\n        droneInventory: gameState.droneInventory,\r\n        land: gameState.land,\r\n        drone: gameState.drone,\r\n        unlockedCrops: gameState.unlockedCrops\r\n      },\r\n      consoles: {\r\n        states: consoleContents,\r\n        active: activeConsole,\r\n        list: consoles\r\n      },\r\n      currentSaveName: saveName  // Store the current save name\r\n    };\r\n\r\n    const existingSaves = JSON.parse(localStorage.getItem('farmGameSaves') || '{}');\r\n    existingSaves[saveName] = gameData;\r\n    \r\n    localStorage.setItem('farmGameSaves', JSON.stringify(existingSaves));\r\n    setModalState({ isOpen: false, mode: null });\r\n  };\r\n\r\n  const handleLoad = (saveName) => {\r\n    const saves = JSON.parse(localStorage.getItem('farmGameSaves') || '{}');\r\n    \r\n    try {\r\n      const gameData = saves[saveName];\r\n      \r\n      // Restore game state\r\n      setGameState(gameData.gameState);\r\n      setMoney(gameData.gameState.money);\r\n      \r\n      // Properly update inventory in parent state\r\n      if (gameData.gameState.inventory) {\r\n        setInventory(gameData.gameState.inventory);\r\n      }\r\n      \r\n      // Restore console states\r\n      if (gameData.consoles) {\r\n        setConsoles(gameData.consoles.list || [{ id: 0, name: 'Console 1' }]);\r\n        setActiveConsole(gameData.consoles.active || 0);\r\n        setConsoleContents(gameData.consoles.states || {});\r\n      }\r\n\r\n      // When loading a save, automatically set up to save back to the same file\r\n      setModalState({ \r\n        isOpen: false, \r\n        mode: null, \r\n        lastSaveName: saveName  // Store the last used save name\r\n      });\r\n    } catch (error) {\r\n      console.error('Error loading game:', error);\r\n      alert('Error loading game save');\r\n    }\r\n  };\r\n\r\n  // Modified save button click handler\r\n  const handleSaveClick = () => {\r\n    if (modalState.lastSaveName) {\r\n      // If we have a last save name, use it directly\r\n      handleSave(modalState.lastSaveName);\r\n    } else {\r\n      // Otherwise open the modal for a new save\r\n      setModalState({ isOpen: true, mode: 'save' });\r\n    }\r\n  };\r\n\r\n  const handleDelete = (saveName) => {\r\n    const saves = JSON.parse(localStorage.getItem('farmGameSaves') || '{}');\r\n    delete saves[saveName];\r\n    localStorage.setItem('farmGameSaves', JSON.stringify(saves));\r\n    // Force a re-render of the modal\r\n    setModalState({ ...modalState });\r\n  };\r\n\r\n  const addNewConsole = () => {\r\n    const newConsole = {\r\n      id: consoles.length,\r\n      name: `Console ${consoles.length + 1}`\r\n    };\r\n    setConsoles([...consoles, newConsole]);\r\n  };\r\n\r\n  const removeConsole = (id) => {\r\n    if (consoles.length > 1) {\r\n      const newConsoles = consoles.filter(console => console.id !== id);\r\n      setConsoles(newConsoles);\r\n      if (activeConsole === id) {\r\n        setActiveConsole(newConsoles[0].id);\r\n      }\r\n    }\r\n  };\r\n\r\n  // Add action handler function\r\n  const handleGameAction = (type, tileIndex) => {\r\n    setLastAction({ type, tileIndex });\r\n  };\r\n\r\n  // Add action completion handler\r\n  const handleActionComplete = (action) => {\r\n    // Reset last action\r\n    setLastAction(null);\r\n    \r\n    // Update game state based on action\r\n    const newLand = [...gameState.land];\r\n    const tile = newLand[action.tileIndex];\r\n    let harvestedCrop; // Move declaration outside case blocks\r\n    \r\n    switch (action.type) {\r\n      case 'PLOW': {\r\n        tile.isPlowed = true;\r\n        break;\r\n      }\r\n      case 'PLANT': {\r\n        tile.hasCrop = true;\r\n        tile.cropState = 'growing';\r\n        tile.cropType = gameState.selectedCrop;\r\n        tile.plantedTime = Date.now();\r\n        // Update inventory\r\n        setGameState(prev => ({\r\n          ...prev,\r\n          inventory: {\r\n            ...prev.inventory,\r\n            [`${gameState.selectedCrop}_seeds`]: prev.inventory[`${gameState.selectedCrop}_seeds`] - 1\r\n          }\r\n        }));\r\n        break;\r\n      }\r\n      case 'GROW': {\r\n        tile.cropState = 'ready';\r\n        break;\r\n      }\r\n      case 'HARVEST': {\r\n        harvestedCrop = tile.cropType;\r\n        tile.hasCrop = false;\r\n        tile.cropState = null;\r\n        tile.cropType = null;\r\n        tile.isPlowed = false;\r\n        // Update inventory with harvested crop\r\n        setGameState(prev => ({\r\n          ...prev,\r\n          inventory: {\r\n            ...prev.inventory,\r\n            [harvestedCrop]: (prev.inventory[harvestedCrop] || 0) + 1\r\n          }\r\n        }));\r\n        break;\r\n      }\r\n      default:\r\n        break;\r\n    }\r\n    \r\n    setGameState(prev => ({\r\n      ...prev,\r\n      land: newLand\r\n    }));\r\n  };\r\n\r\n  return (\r\n    <GameContainer>\r\n      <Header>\r\n        <Title>Farming Game</Title>\r\n        <GameControls>\r\n          <SaveLoadButton onClick={handleSaveClick}>\r\n            Save Game\r\n          </SaveLoadButton>\r\n          <SaveLoadButton onClick={() => setModalState({ isOpen: true, mode: 'load' })}>\r\n            Load Game\r\n          </SaveLoadButton>\r\n          <MoneyDisplay>${money}</MoneyDisplay>\r\n          <TechTreeButton onClick={onOpenTechTree}>Tech Tree</TechTreeButton>\r\n        </GameControls>\r\n      </Header>\r\n      \r\n      <GameGridContainer>\r\n        <GameGrid size={Math.sqrt(gameState.land.length)}>\r\n          {gameState.land.map((tile, index) => {\r\n            const x = Math.floor(index / Math.sqrt(gameState.land.length));\r\n            const y = index % Math.sqrt(gameState.land.length);\r\n            const isDroneHere = gameState.dronePosition.x === x && gameState.dronePosition.y === y;\r\n            \r\n            return (\r\n              <LandTile \r\n                key={index}\r\n                isPlowed={tile.isPlowed}\r\n                hasCrop={tile.hasCrop}\r\n                cropState={tile.cropState}\r\n                onClick={() => {\r\n                  // Handle tile clicks based on current state\r\n                  if (!tile.isPlowed && !tile.hasCrop) {\r\n                    handleGameAction('PLOW', index);\r\n                  } else if (tile.isPlowed && !tile.hasCrop && gameState.selectedCrop) {\r\n                    handleGameAction('PLANT', index);\r\n                  } else if (tile.hasCrop && tile.cropState === 'ready') {\r\n                    handleGameAction('HARVEST', index);\r\n                  }\r\n                }}\r\n              >\r\n                {tile.hasCrop && (\r\n                  <CropIndicator \r\n                    color={getCropColor(tile.cropType, tile.cropState)}\r\n                  />\r\n                )}\r\n                {isDroneHere && <StyledDroneSprite />}\r\n              </LandTile>\r\n            );\r\n          })}\r\n        </GameGrid>\r\n        <StyledGameStats>\r\n          <div>\r\n            <span>Drone Position:</span>\r\n            <span>({gameState.dronePosition.x}, {gameState.dronePosition.y})</span>\r\n          </div>\r\n          <div>\r\n            <span>Status:</span>\r\n            <span>{gameState.land[gameState.dronePosition.y * Math.sqrt(gameState.land.length) + gameState.dronePosition.x].isPlowed ? 'Plowed' : 'Unplowed'}</span>\r\n          </div>\r\n        </StyledGameStats>\r\n      </GameGridContainer>\r\n      \r\n      <ThreeDViewContainer>\r\n        <Game3D \r\n          gameState={gameState}\r\n          lastAction={lastAction}\r\n          onActionComplete={handleActionComplete}\r\n        />\r\n      </ThreeDViewContainer>\r\n      \r\n      <StyledConsoleContainer>\r\n        <ConsoleTabs>\r\n          {consoles.map(console => (\r\n            <ConsoleTab\r\n              key={console.id}\r\n              active={activeConsole === console.id}\r\n              onClick={() => setActiveConsole(console.id)}\r\n            >\r\n              {console.name}\r\n              {consoles.length > 1 && (\r\n                <CloseButton onClick={(e) => {\r\n                  e.stopPropagation();\r\n                  removeConsole(console.id);\r\n                }}>Ã—</CloseButton>\r\n              )}\r\n            </ConsoleTab>\r\n          ))}\r\n          <AddConsoleButton onClick={addNewConsole}>+</AddConsoleButton>\r\n        </ConsoleTabs>\r\n        \r\n        {consoles.map(console => (\r\n          <ConsoleWrapper key={console.id} active={activeConsole === console.id}>\r\n            <JavaScriptConsole \r\n              gameState={gameState}\r\n              setGameState={setGameState}\r\n              consoleId={console.id}\r\n              content={consoleContents[console.id] || ''}\r\n              onContentChange={handleConsoleContentChange}\r\n              onBuyItem={handleBuyItem}\r\n              onSellItem={handleSellItem}\r\n              farm={farmRef.current}\r\n              setPrintFunction={(printFn) => {\r\n                if (farmRef.current) {\r\n                  farmRef.current.print = printFn;\r\n                }\r\n              }}\r\n            />\r\n          </ConsoleWrapper>\r\n        ))}\r\n      </StyledConsoleContainer>\r\n      \r\n      <SaveLoadModal\r\n        isOpen={modalState.isOpen}\r\n        mode={modalState.mode}\r\n        onClose={() => setModalState({ isOpen: false, mode: null })}\r\n        onSave={handleSave}\r\n        onLoad={handleLoad}\r\n        onDelete={handleDelete}\r\n        currentSaveName={modalState.lastSaveName}\r\n      />\r\n    </GameContainer>\r\n  );\r\n};\r\n\r\nexport default Game; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}