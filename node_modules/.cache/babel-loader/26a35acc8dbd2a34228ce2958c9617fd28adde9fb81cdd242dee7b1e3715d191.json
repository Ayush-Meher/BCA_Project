{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\SPIDER\\\\Downloads\\\\Project\\\\Demo GPT\\\\Demo 1\\\\src\\\\components\\\\Game.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport styled from 'styled-components';\nimport { useNavigate } from 'react-router-dom';\nimport JavaScriptConsole from './JavaScriptConsole';\nimport TechTree from './TechTree';\nimport Game3D from './Game3D';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GameLayout = styled.div`\n  display: flex;\n  flex-direction: column;\n  height: 100vh;\n  background-color: #1a1a1a;\n  color: white;\n`;\nconst MainArea = styled.div`\n  display: flex;\n  flex-direction: column;\n  flex-grow: 1;\n  padding: 20px;\n  gap: 20px;\n`;\nconst GameHeader = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding: 10px;\n  background-color: #2c3e50;\n  border-radius: 5px;\n`;\nconst GameInfo = styled.div`\n  display: flex;\n  gap: 20px;\n`;\nconst InfoItem = styled.div`\n  display: flex;\n  align-items: center;\n  gap: 5px;\n`;\nconst GameContent = styled.div`\n  display: flex;\n  gap: 20px;\n  width: 100%;\n  max-width: 1200px;\n  height: calc(100vh - 100px);\n`;\nconst GameScene = styled.div`\n  flex-grow: 1;\n  background-color: #2c3e50;\n  border-radius: 5px;\n  overflow: hidden;\n  height: 500px;\n`;\nconst ConsoleArea = styled.div`\n  width: 400px;\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n`;\nconst MoneyDisplay = styled.div`\n  font-size: 1.5em;\n  font-weight: bold;\n  color: #f1c40f;\n  text-align: center;\n  padding: 10px;\n  background-color: #34495e;\n  border-radius: 5px;\n`;\n_c = MoneyDisplay;\nconst GameGrid = styled.div`\n  display: grid;\n  grid-template-columns: repeat(${props => props.size}, 1fr);\n  grid-template-rows: repeat(${props => props.size}, 1fr);\n  gap: 5px;\n  width: 300px;\n  height: 300px;\n  background-color: #8B4513;\n  padding: 10px;\n  border-radius: 5px;\n`;\n_c2 = GameGrid;\nconst LandTile = styled.div`\n  width: 100%;\n  aspect-ratio: 1;\n  background-color: ${props => {\n  if (props.isPlowed) return '#8B4513';\n  if (props.hasCrop && props.cropState === 'growing') return '#90EE90';\n  if (props.hasCrop && props.cropState === 'ready') return '#228B22';\n  return '#90EE90';\n}};\n  border: 1px solid #2c3e50;\n  cursor: pointer;\n  position: relative;\n  transition: all 0.3s ease;\n\n  &:hover {\n    transform: scale(1.05);\n  }\n`;\n_c3 = LandTile;\nconst CropIndicator = styled.div`\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  width: 80%;\n  height: 80%;\n  background-color: ${props => props.color};\n  border-radius: 50%;\n`;\n_c4 = CropIndicator;\nconst StyledGameStats = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 12px;\n  padding: 16px;\n  background: #232323;\n  border-radius: 8px;\n  font-size: 14px;\n  color: #E0E0E0;\n\n  div {\n    display: flex;\n    justify-content: space-between;\n    padding: 8px;\n    background: rgba(255, 255, 255, 0.05);\n    border-radius: 4px;\n  }\n`;\n_c5 = StyledGameStats;\nconst ToolBar = styled.div`\n  display: flex;\n  margin-bottom: 20px;\n  flex-wrap: wrap;\n`;\nconst ToolButton = styled.button`\n  background-color: ${props => props.selected ? '#2980b9' : '#3498db'};\n  border: ${props => props.selected ? '2px solid #fff' : 'none'};\n  padding: ${props => props.selected ? '6px 14px' : '8px 16px'};\n`;\nconst CropSelector = styled.div`\n  margin-top: 10px;\n  display: flex;\n  flex-wrap: wrap;\n`;\nconst CropButton = styled.button`\n  background-color: ${props => props.selected ? '#27ae60' : '#2ecc71'};\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  \n  &:disabled {\n    background-color: #95a5a6;\n    cursor: not-allowed;\n  }\n`;\nconst CropIcon = styled.span`\n  display: inline-block;\n  width: 12px;\n  height: 12px;\n  border-radius: 50%;\n  background-color: ${props => props.color};\n  margin-right: 5px;\n`;\nconst StyledDroneSprite = styled.div`\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  width: 60%;\n  height: 60%;\n  transform: translate(-50%, -50%);\n  z-index: 2;\n  filter: drop-shadow(0 2px 4px rgba(0, 0, 0, 0.3));\n  \n  &::before {\n    content: 'ðŸ›¸';\n    position: absolute;\n    top: 50%;\n    left: 50%;\n    transform: translate(-50%, -50%);\n    font-size: 24px;\n  }\n`;\n_c6 = StyledDroneSprite;\nconst ConsoleContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  height: 100%;\n`;\nconst ConsoleTabs = styled.div`\n  display: flex;\n  gap: 5px;\n  margin-bottom: 10px;\n`;\n_c7 = ConsoleTabs;\nconst ConsoleTab = styled.button`\n  background-color: ${props => props.active ? '#3498db' : '#2c3e50'};\n  color: white;\n  border: none;\n  padding: 5px 10px;\n  border-radius: 3px;\n  cursor: pointer;\n  \n  &:hover {\n    background-color: ${props => props.active ? '#2980b9' : '#34495e'};\n  }\n`;\n_c8 = ConsoleTab;\nconst AddConsoleButton = styled.button`\n  background-color: #27ae60;\n  color: white;\n  border: none;\n  padding: 5px 10px;\n  border-radius: 3px;\n  cursor: pointer;\n  \n  &:hover {\n    background-color: #219653;\n  }\n`;\n_c9 = AddConsoleButton;\nconst ConsoleWrapper = styled.div`\n  display: ${props => props.active ? 'block' : 'none'};\n  height: calc(100% - 40px);\n  background: #2A2A2A;\n  border-radius: 8px;\n  overflow: hidden;\n`;\n_c10 = ConsoleWrapper;\nconst GameContainer = styled.div`\n  display: grid;\n  grid-template-areas:\n    \"header header header\"\n    \"grid view console\";\n  grid-template-columns: minmax(300px, 25%) minmax(400px, 45%) minmax(300px, 30%);\n  grid-template-rows: 60px 1fr;\n  gap: 16px;\n  padding: 16px;\n  height: 100vh;\n  background-color: #1E1E1E;\n  box-sizing: border-box;\n`;\n_c11 = GameContainer;\nconst GameGridContainer = styled.div`\n  grid-area: grid;\n  display: flex;\n  flex-direction: column;\n  gap: 16px;\n  background: #2A2A2A;\n  border-radius: 12px;\n  padding: 20px;\n  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\n`;\n_c12 = GameGridContainer;\nconst GameTitle = styled.h1`\n  color: #2c3e50;\n  margin: 0;\n`;\nconst GameCanvas = styled.div`\n  flex: 1;\n  height: 600px;\n  background-color: white;\n  border-radius: 5px;\n  box-shadow: 0 2px 4px rgba(0,0,0,0.1);\n  position: relative;\n`;\nconst GameControls = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  width: 300px;\n`;\n_c13 = GameControls;\nconst Button = styled.button`\n  padding: 10px 15px;\n  background-color: #3498db;\n  color: white;\n  border: none;\n  border-radius: 5px;\n  cursor: pointer;\n  font-size: 16px;\n  transition: background-color 0.2s;\n\n  &:hover {\n    background-color: #2980b9;\n  }\n`;\nconst ThreeDViewContainer = styled.div`\n  grid-area: view;\n  background: #2A2A2A;\n  border-radius: 12px;\n  overflow: hidden;\n  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\n`;\n_c14 = ThreeDViewContainer;\nconst StyledConsoleContainer = styled.div`\n  grid-area: console;\n  display: flex;\n  flex-direction: column;\n  gap: 16px;\n  background: #2A2A2A;\n  border-radius: 12px;\n  padding: 20px;\n  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\n`;\n_c15 = StyledConsoleContainer;\nconst TechTreeButton = styled.button`\n  padding: 8px 16px;\n  background: linear-gradient(180deg, #3498DB 0%, #2980B9 100%);\n  border: none;\n  border-radius: 6px;\n  color: white;\n  font-weight: 500;\n  cursor: pointer;\n  transition: all 0.2s ease;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n\n  &:hover {\n    transform: translateY(-1px);\n    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.2);\n  }\n`;\n_c16 = TechTreeButton;\nconst CloseButton = styled.span`\n  margin-left: 8px;\n  padding: 0 4px;\n  color: #fff;\n  opacity: 0.7;\n  cursor: pointer;\n  \n  &:hover {\n    opacity: 1;\n  }\n`;\n_c17 = CloseButton;\nconst Header = styled.div`\n  grid-area: header;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  background: #2A2A2A;\n  padding: 0 20px;\n  border-radius: 12px;\n  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\n`;\n_c18 = Header;\nconst Title = styled.h1`\n  color: white;\n  margin: 0;\n  font-size: 24px;\n`;\n_c19 = Title;\nconst SaveButton = styled.button`\n  padding: 8px 16px;\n  background: linear-gradient(180deg, #27ae60 0%, #219653 100%);\n  border: none;\n  border-radius: 6px;\n  color: white;\n  font-weight: 500;\n  cursor: pointer;\n  transition: all 0.2s ease;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n\n  &:hover {\n    transform: translateY(-1px);\n    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.2);\n  }\n\n  &:active {\n    transform: translateY(0);\n    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n  }\n`;\n_c20 = SaveButton;\nexport const Game = ({\n  inventory,\n  setInventory,\n  money,\n  setMoney,\n  onOpenTechTree,\n  unlockedCrops\n}) => {\n  _s();\n  const navigate = useNavigate();\n  const [activeConsole, setActiveConsole] = useState(0);\n  const [consoles, setConsoles] = useState([{\n    id: 0,\n    name: 'Console 1'\n  }]);\n  const [consoleStates, setConsoleStates] = useState({});\n  const addNewConsole = () => {\n    const newConsole = {\n      id: consoles.length,\n      name: `Console ${consoles.length + 1}`\n    };\n    setConsoles([...consoles, newConsole]);\n  };\n  const removeConsole = id => {\n    if (consoles.length > 1) {\n      const newConsoles = consoles.filter(console => console.id !== id);\n      setConsoles(newConsoles);\n      if (activeConsole === id) {\n        setActiveConsole(newConsoles[0].id);\n      }\n    }\n  };\n  const [gameState, setGameState] = useState({\n    grid: Array(1).fill().map(() => Array(1).fill(null)),\n    money: money,\n    inventory: {\n      wheat_seeds: 5,\n      corn_seeds: 0,\n      potato_seeds: 0,\n      wheat: 0,\n      corn: 0,\n      potato: 0\n    },\n    dronePosition: {\n      x: 0,\n      y: 0\n    },\n    droneInventory: [],\n    land: Array(1).fill().map(() => ({\n      isPlowed: false,\n      hasCrop: false,\n      cropType: null,\n      cropState: null\n    })),\n    drone: {\n      x: 0,\n      y: 0\n    },\n    unlockedCrops: ['wheat']\n  });\n\n  // Add crop growth system\n  useEffect(() => {\n    const growthInterval = setInterval(() => {\n      setGameState(prevState => {\n        const newLand = [...prevState.land];\n        let hasChanges = false;\n        newLand.forEach((tile, index) => {\n          if (tile.hasCrop && tile.cropState === 'growing') {\n            const growthTime = {\n              wheat: 1000,\n              // 1 second for wheat\n              corn: 2000,\n              // 2 seconds for corn\n              potato: 3000 // 3 seconds for potato\n            };\n            const currentTime = Date.now();\n            const elapsedTime = currentTime - tile.plantedTime;\n            if (elapsedTime >= growthTime[tile.cropType]) {\n              newLand[index] = {\n                ...tile,\n                cropState: 'ready'\n              };\n              hasChanges = true;\n            }\n          }\n        });\n        return hasChanges ? {\n          ...prevState,\n          land: newLand\n        } : prevState;\n      });\n    }, 1000); // Check every second\n\n    return () => clearInterval(growthInterval);\n  }, []);\n\n  // Add visual feedback for crop state\n  const getCropColor = (cropType, cropState) => {\n    if (cropState === 'growing') {\n      return {\n        wheat: '#F4D03F80',\n        // Semi-transparent yellow\n        corn: '#F39C1280',\n        // Semi-transparent orange\n        potato: '#93511680' // Semi-transparent brown\n      }[cropType] || '#90EE90';\n    } else if (cropState === 'ready') {\n      return {\n        wheat: '#F4D03F',\n        // Bright yellow\n        corn: '#F39C12',\n        // Bright orange\n        potato: '#935116' // Rich brown\n      }[cropType] || '#228B22';\n    }\n    return '#90EE90';\n  };\n  const saveGame = () => {\n    const gameData = {\n      gameState: {\n        grid: gameState.grid,\n        money: gameState.money,\n        inventory: gameState.inventory,\n        dronePosition: gameState.dronePosition,\n        droneInventory: gameState.droneInventory,\n        land: gameState.land,\n        drone: gameState.drone,\n        unlockedCrops: gameState.unlockedCrops\n      },\n      consoles: {\n        states: consoleStates,\n        active: activeConsole,\n        list: consoles\n      }\n    };\n    localStorage.setItem('farmGame', JSON.stringify(gameData));\n    alert('Game saved successfully!');\n  };\n  const loadGame = () => {\n    const savedData = localStorage.getItem('farmGame');\n    if (savedData) {\n      try {\n        const gameData = JSON.parse(savedData);\n\n        // Restore game state\n        setGameState(gameData.gameState);\n\n        // Restore console states\n        if (gameData.consoles) {\n          // Restore console list\n          setConsoles(gameData.consoles.list || [{\n            id: 0,\n            name: 'Console 1'\n          }]);\n\n          // Restore active console\n          setActiveConsole(gameData.consoles.active || 0);\n\n          // Restore individual console states\n          Object.assign(consoleStates, gameData.consoles.states || {});\n        }\n        return true;\n      } catch (error) {\n        console.error('Error loading game:', error);\n        alert('Error loading game save');\n        return false;\n      }\n    }\n    return false;\n  };\n\n  // Load game on initial mount\n  useEffect(() => {\n    loadGame();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(GameContainer, {\n    children: [/*#__PURE__*/_jsxDEV(Header, {\n      children: [/*#__PURE__*/_jsxDEV(Title, {\n        children: \"Farming Game\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 557,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(GameControls, {\n        children: [/*#__PURE__*/_jsxDEV(SaveButton, {\n          onClick: saveGame,\n          children: \"Save Game\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 559,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(MoneyDisplay, {\n          children: [\"$\", gameState.money]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 560,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(TechTreeButton, {\n          onClick: onOpenTechTree,\n          children: \"Tech Tree\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 561,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 558,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 556,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(GameGridContainer, {\n      children: [/*#__PURE__*/_jsxDEV(GameGrid, {\n        size: Math.sqrt(gameState.land.length),\n        children: gameState.land.map((tile, index) => {\n          const x = Math.floor(index / Math.sqrt(gameState.land.length));\n          const y = index % Math.sqrt(gameState.land.length);\n          const isDroneHere = gameState.dronePosition.x === x && gameState.dronePosition.y === y;\n          return /*#__PURE__*/_jsxDEV(LandTile, {\n            isPlowed: tile.isPlowed,\n            hasCrop: tile.hasCrop,\n            cropState: tile.cropState,\n            children: [tile.hasCrop && /*#__PURE__*/_jsxDEV(CropIndicator, {\n              color: getCropColor(tile.cropType, tile.cropState)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 580,\n              columnNumber: 19\n            }, this), isDroneHere && /*#__PURE__*/_jsxDEV(StyledDroneSprite, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 584,\n              columnNumber: 33\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 573,\n            columnNumber: 15\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 566,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(StyledGameStats, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            children: \"Drone Position:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 591,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: [\"(\", gameState.dronePosition.x, \", \", gameState.dronePosition.y, \")\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 592,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 590,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            children: \"Status:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 595,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: gameState.land[gameState.dronePosition.y * Math.sqrt(gameState.land.length) + gameState.dronePosition.x].isPlowed ? 'Plowed' : 'Unplowed'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 596,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 594,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 589,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 565,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ThreeDViewContainer, {\n      children: /*#__PURE__*/_jsxDEV(Game3D, {\n        gameState: gameState,\n        setGameState: setGameState\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 602,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 601,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(StyledConsoleContainer, {\n      children: [/*#__PURE__*/_jsxDEV(ConsoleTabs, {\n        children: [consoles.map(console => /*#__PURE__*/_jsxDEV(ConsoleTab, {\n          active: activeConsole === console.id,\n          onClick: () => setActiveConsole(console.id),\n          children: [console.name, consoles.length > 1 && /*#__PURE__*/_jsxDEV(CloseButton, {\n            onClick: e => {\n              e.stopPropagation();\n              removeConsole(console.id);\n            },\n            children: \"\\xD7\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 615,\n            columnNumber: 17\n          }, this)]\n        }, console.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 608,\n          columnNumber: 13\n        }, this)), /*#__PURE__*/_jsxDEV(AddConsoleButton, {\n          onClick: addNewConsole,\n          children: \"+\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 622,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 606,\n        columnNumber: 9\n      }, this), consoles.map(console => /*#__PURE__*/_jsxDEV(ConsoleWrapper, {\n        active: activeConsole === console.id,\n        children: /*#__PURE__*/_jsxDEV(JavaScriptConsole, {\n          gameState: gameState,\n          setGameState: setGameState,\n          consoleId: console.id\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 627,\n          columnNumber: 13\n        }, this)\n      }, console.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 626,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 605,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 555,\n    columnNumber: 5\n  }, this);\n};\n_s(Game, \"LlzH65/4iPxuk1Mo+izGM5m5a4c=\", false, function () {\n  return [useNavigate];\n});\n_c21 = Game;\nexport default Game;\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7, _c8, _c9, _c10, _c11, _c12, _c13, _c14, _c15, _c16, _c17, _c18, _c19, _c20, _c21;\n$RefreshReg$(_c, \"MoneyDisplay\");\n$RefreshReg$(_c2, \"GameGrid\");\n$RefreshReg$(_c3, \"LandTile\");\n$RefreshReg$(_c4, \"CropIndicator\");\n$RefreshReg$(_c5, \"StyledGameStats\");\n$RefreshReg$(_c6, \"StyledDroneSprite\");\n$RefreshReg$(_c7, \"ConsoleTabs\");\n$RefreshReg$(_c8, \"ConsoleTab\");\n$RefreshReg$(_c9, \"AddConsoleButton\");\n$RefreshReg$(_c10, \"ConsoleWrapper\");\n$RefreshReg$(_c11, \"GameContainer\");\n$RefreshReg$(_c12, \"GameGridContainer\");\n$RefreshReg$(_c13, \"GameControls\");\n$RefreshReg$(_c14, \"ThreeDViewContainer\");\n$RefreshReg$(_c15, \"StyledConsoleContainer\");\n$RefreshReg$(_c16, \"TechTreeButton\");\n$RefreshReg$(_c17, \"CloseButton\");\n$RefreshReg$(_c18, \"Header\");\n$RefreshReg$(_c19, \"Title\");\n$RefreshReg$(_c20, \"SaveButton\");\n$RefreshReg$(_c21, \"Game\");","map":{"version":3,"names":["React","useState","useEffect","styled","useNavigate","JavaScriptConsole","TechTree","Game3D","jsxDEV","_jsxDEV","GameLayout","div","MainArea","GameHeader","GameInfo","InfoItem","GameContent","GameScene","ConsoleArea","MoneyDisplay","_c","GameGrid","props","size","_c2","LandTile","isPlowed","hasCrop","cropState","_c3","CropIndicator","color","_c4","StyledGameStats","_c5","ToolBar","ToolButton","button","selected","CropSelector","CropButton","CropIcon","span","StyledDroneSprite","_c6","ConsoleContainer","ConsoleTabs","_c7","ConsoleTab","active","_c8","AddConsoleButton","_c9","ConsoleWrapper","_c10","GameContainer","_c11","GameGridContainer","_c12","GameTitle","h1","GameCanvas","GameControls","_c13","Button","ThreeDViewContainer","_c14","StyledConsoleContainer","_c15","TechTreeButton","_c16","CloseButton","_c17","Header","_c18","Title","_c19","SaveButton","_c20","Game","inventory","setInventory","money","setMoney","onOpenTechTree","unlockedCrops","_s","navigate","activeConsole","setActiveConsole","consoles","setConsoles","id","name","consoleStates","setConsoleStates","addNewConsole","newConsole","length","removeConsole","newConsoles","filter","console","gameState","setGameState","grid","Array","fill","map","wheat_seeds","corn_seeds","potato_seeds","wheat","corn","potato","dronePosition","x","y","droneInventory","land","cropType","drone","growthInterval","setInterval","prevState","newLand","hasChanges","forEach","tile","index","growthTime","currentTime","Date","now","elapsedTime","plantedTime","clearInterval","getCropColor","saveGame","gameData","states","list","localStorage","setItem","JSON","stringify","alert","loadGame","savedData","getItem","parse","Object","assign","error","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","Math","sqrt","floor","isDroneHere","e","stopPropagation","consoleId","_c21","$RefreshReg$"],"sources":["C:/Users/SPIDER/Downloads/Project/Demo GPT/Demo 1/src/components/Game.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport styled from 'styled-components';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport JavaScriptConsole from './JavaScriptConsole';\r\nimport TechTree from './TechTree';\r\nimport Game3D from './Game3D';\r\n\r\nconst GameLayout = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  height: 100vh;\r\n  background-color: #1a1a1a;\r\n  color: white;\r\n`;\r\n\r\nconst MainArea = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  flex-grow: 1;\r\n  padding: 20px;\r\n  gap: 20px;\r\n`;\r\n\r\nconst GameHeader = styled.div`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  padding: 10px;\r\n  background-color: #2c3e50;\r\n  border-radius: 5px;\r\n`;\r\n\r\nconst GameInfo = styled.div`\r\n  display: flex;\r\n  gap: 20px;\r\n`;\r\n\r\nconst InfoItem = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 5px;\r\n`;\r\n\r\nconst GameContent = styled.div`\r\n  display: flex;\r\n  gap: 20px;\r\n  width: 100%;\r\n  max-width: 1200px;\r\n  height: calc(100vh - 100px);\r\n`;\r\n\r\nconst GameScene = styled.div`\r\n  flex-grow: 1;\r\n  background-color: #2c3e50;\r\n  border-radius: 5px;\r\n  overflow: hidden;\r\n  height: 500px;\r\n`;\r\n\r\nconst ConsoleArea = styled.div`\r\n  width: 400px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 10px;\r\n`;\r\n\r\nconst MoneyDisplay = styled.div`\r\n  font-size: 1.5em;\r\n  font-weight: bold;\r\n  color: #f1c40f;\r\n  text-align: center;\r\n  padding: 10px;\r\n  background-color: #34495e;\r\n  border-radius: 5px;\r\n`;\r\n\r\nconst GameGrid = styled.div`\r\n  display: grid;\r\n  grid-template-columns: repeat(${props => props.size}, 1fr);\r\n  grid-template-rows: repeat(${props => props.size}, 1fr);\r\n  gap: 5px;\r\n  width: 300px;\r\n  height: 300px;\r\n  background-color: #8B4513;\r\n  padding: 10px;\r\n  border-radius: 5px;\r\n`;\r\n\r\nconst LandTile = styled.div`\r\n  width: 100%;\r\n  aspect-ratio: 1;\r\n  background-color: ${props => {\r\n    if (props.isPlowed) return '#8B4513';\r\n    if (props.hasCrop && props.cropState === 'growing') return '#90EE90';\r\n    if (props.hasCrop && props.cropState === 'ready') return '#228B22';\r\n    return '#90EE90';\r\n  }};\r\n  border: 1px solid #2c3e50;\r\n  cursor: pointer;\r\n  position: relative;\r\n  transition: all 0.3s ease;\r\n\r\n  &:hover {\r\n    transform: scale(1.05);\r\n  }\r\n`;\r\n\r\nconst CropIndicator = styled.div`\r\n  position: absolute;\r\n  top: 50%;\r\n  left: 50%;\r\n  transform: translate(-50%, -50%);\r\n  width: 80%;\r\n  height: 80%;\r\n  background-color: ${props => props.color};\r\n  border-radius: 50%;\r\n`;\r\n\r\nconst StyledGameStats = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 12px;\r\n  padding: 16px;\r\n  background: #232323;\r\n  border-radius: 8px;\r\n  font-size: 14px;\r\n  color: #E0E0E0;\r\n\r\n  div {\r\n    display: flex;\r\n    justify-content: space-between;\r\n    padding: 8px;\r\n    background: rgba(255, 255, 255, 0.05);\r\n    border-radius: 4px;\r\n  }\r\n`;\r\n\r\nconst ToolBar = styled.div`\r\n  display: flex;\r\n  margin-bottom: 20px;\r\n  flex-wrap: wrap;\r\n`;\r\n\r\nconst ToolButton = styled.button`\r\n  background-color: ${props => props.selected ? '#2980b9' : '#3498db'};\r\n  border: ${props => props.selected ? '2px solid #fff' : 'none'};\r\n  padding: ${props => props.selected ? '6px 14px' : '8px 16px'};\r\n`;\r\n\r\nconst CropSelector = styled.div`\r\n  margin-top: 10px;\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n`;\r\n\r\nconst CropButton = styled.button`\r\n  background-color: ${props => props.selected ? '#27ae60' : '#2ecc71'};\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n  \r\n  &:disabled {\r\n    background-color: #95a5a6;\r\n    cursor: not-allowed;\r\n  }\r\n`;\r\n\r\nconst CropIcon = styled.span`\r\n  display: inline-block;\r\n  width: 12px;\r\n  height: 12px;\r\n  border-radius: 50%;\r\n  background-color: ${props => props.color};\r\n  margin-right: 5px;\r\n`;\r\n\r\nconst StyledDroneSprite = styled.div`\r\n  position: absolute;\r\n  top: 50%;\r\n  left: 50%;\r\n  width: 60%;\r\n  height: 60%;\r\n  transform: translate(-50%, -50%);\r\n  z-index: 2;\r\n  filter: drop-shadow(0 2px 4px rgba(0, 0, 0, 0.3));\r\n  \r\n  &::before {\r\n    content: 'ðŸ›¸';\r\n    position: absolute;\r\n    top: 50%;\r\n    left: 50%;\r\n    transform: translate(-50%, -50%);\r\n    font-size: 24px;\r\n  }\r\n`;\r\n\r\nconst ConsoleContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 10px;\r\n  height: 100%;\r\n`;\r\n\r\nconst ConsoleTabs = styled.div`\r\n  display: flex;\r\n  gap: 5px;\r\n  margin-bottom: 10px;\r\n`;\r\n\r\nconst ConsoleTab = styled.button`\r\n  background-color: ${props => props.active ? '#3498db' : '#2c3e50'};\r\n  color: white;\r\n  border: none;\r\n  padding: 5px 10px;\r\n  border-radius: 3px;\r\n  cursor: pointer;\r\n  \r\n  &:hover {\r\n    background-color: ${props => props.active ? '#2980b9' : '#34495e'};\r\n  }\r\n`;\r\n\r\nconst AddConsoleButton = styled.button`\r\n  background-color: #27ae60;\r\n  color: white;\r\n  border: none;\r\n  padding: 5px 10px;\r\n  border-radius: 3px;\r\n  cursor: pointer;\r\n  \r\n  &:hover {\r\n    background-color: #219653;\r\n  }\r\n`;\r\n\r\nconst ConsoleWrapper = styled.div`\r\n  display: ${props => props.active ? 'block' : 'none'};\r\n  height: calc(100% - 40px);\r\n  background: #2A2A2A;\r\n  border-radius: 8px;\r\n  overflow: hidden;\r\n`;\r\n\r\nconst GameContainer = styled.div`\r\n  display: grid;\r\n  grid-template-areas:\r\n    \"header header header\"\r\n    \"grid view console\";\r\n  grid-template-columns: minmax(300px, 25%) minmax(400px, 45%) minmax(300px, 30%);\r\n  grid-template-rows: 60px 1fr;\r\n  gap: 16px;\r\n  padding: 16px;\r\n  height: 100vh;\r\n  background-color: #1E1E1E;\r\n  box-sizing: border-box;\r\n`;\r\n\r\nconst GameGridContainer = styled.div`\r\n  grid-area: grid;\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 16px;\r\n  background: #2A2A2A;\r\n  border-radius: 12px;\r\n  padding: 20px;\r\n  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\r\n`;\r\n\r\nconst GameTitle = styled.h1`\r\n  color: #2c3e50;\r\n  margin: 0;\r\n`;\r\n\r\nconst GameCanvas = styled.div`\r\n  flex: 1;\r\n  height: 600px;\r\n  background-color: white;\r\n  border-radius: 5px;\r\n  box-shadow: 0 2px 4px rgba(0,0,0,0.1);\r\n  position: relative;\r\n`;\r\n\r\nconst GameControls = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 10px;\r\n  width: 300px;\r\n`;\r\n\r\nconst Button = styled.button`\r\n  padding: 10px 15px;\r\n  background-color: #3498db;\r\n  color: white;\r\n  border: none;\r\n  border-radius: 5px;\r\n  cursor: pointer;\r\n  font-size: 16px;\r\n  transition: background-color 0.2s;\r\n\r\n  &:hover {\r\n    background-color: #2980b9;\r\n  }\r\n`;\r\n\r\nconst ThreeDViewContainer = styled.div`\r\n  grid-area: view;\r\n  background: #2A2A2A;\r\n  border-radius: 12px;\r\n  overflow: hidden;\r\n  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\r\n`;\r\n\r\nconst StyledConsoleContainer = styled.div`\r\n  grid-area: console;\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 16px;\r\n  background: #2A2A2A;\r\n  border-radius: 12px;\r\n  padding: 20px;\r\n  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\r\n`;\r\n\r\nconst TechTreeButton = styled.button`\r\n  padding: 8px 16px;\r\n  background: linear-gradient(180deg, #3498DB 0%, #2980B9 100%);\r\n  border: none;\r\n  border-radius: 6px;\r\n  color: white;\r\n  font-weight: 500;\r\n  cursor: pointer;\r\n  transition: all 0.2s ease;\r\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\r\n\r\n  &:hover {\r\n    transform: translateY(-1px);\r\n    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.2);\r\n  }\r\n`;\r\n\r\nconst CloseButton = styled.span`\r\n  margin-left: 8px;\r\n  padding: 0 4px;\r\n  color: #fff;\r\n  opacity: 0.7;\r\n  cursor: pointer;\r\n  \r\n  &:hover {\r\n    opacity: 1;\r\n  }\r\n`;\r\n\r\nconst Header = styled.div`\r\n  grid-area: header;\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  background: #2A2A2A;\r\n  padding: 0 20px;\r\n  border-radius: 12px;\r\n  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\r\n`;\r\n\r\nconst Title = styled.h1`\r\n  color: white;\r\n  margin: 0;\r\n  font-size: 24px;\r\n`;\r\n\r\nconst SaveButton = styled.button`\r\n  padding: 8px 16px;\r\n  background: linear-gradient(180deg, #27ae60 0%, #219653 100%);\r\n  border: none;\r\n  border-radius: 6px;\r\n  color: white;\r\n  font-weight: 500;\r\n  cursor: pointer;\r\n  transition: all 0.2s ease;\r\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\r\n\r\n  &:hover {\r\n    transform: translateY(-1px);\r\n    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.2);\r\n  }\r\n\r\n  &:active {\r\n    transform: translateY(0);\r\n    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\r\n  }\r\n`;\r\n\r\nexport const Game = ({ inventory, setInventory, money, setMoney, onOpenTechTree, unlockedCrops }) => {\r\n  const navigate = useNavigate();\r\n  const [activeConsole, setActiveConsole] = useState(0);\r\n  const [consoles, setConsoles] = useState([{ id: 0, name: 'Console 1' }]);\r\n  const [consoleStates, setConsoleStates] = useState({});\r\n\r\n  const addNewConsole = () => {\r\n    const newConsole = {\r\n      id: consoles.length,\r\n      name: `Console ${consoles.length + 1}`\r\n    };\r\n    setConsoles([...consoles, newConsole]);\r\n  };\r\n\r\n  const removeConsole = (id) => {\r\n    if (consoles.length > 1) {\r\n      const newConsoles = consoles.filter(console => console.id !== id);\r\n      setConsoles(newConsoles);\r\n      if (activeConsole === id) {\r\n        setActiveConsole(newConsoles[0].id);\r\n      }\r\n    }\r\n  };\r\n\r\n  const [gameState, setGameState] = useState({\r\n    grid: Array(1).fill().map(() => Array(1).fill(null)),\r\n    money: money,\r\n    inventory: {\r\n      wheat_seeds: 5,\r\n      corn_seeds: 0,\r\n      potato_seeds: 0,\r\n      wheat: 0,\r\n      corn: 0,\r\n      potato: 0\r\n    },\r\n    dronePosition: { x: 0, y: 0 },\r\n    droneInventory: [],\r\n    land: Array(1).fill().map(() => ({\r\n      isPlowed: false,\r\n      hasCrop: false,\r\n      cropType: null,\r\n      cropState: null\r\n    })),\r\n    drone: {\r\n      x: 0,\r\n      y: 0\r\n    },\r\n    unlockedCrops: ['wheat']\r\n  });\r\n\r\n  // Add crop growth system\r\n  useEffect(() => {\r\n    const growthInterval = setInterval(() => {\r\n      setGameState(prevState => {\r\n        const newLand = [...prevState.land];\r\n        let hasChanges = false;\r\n\r\n        newLand.forEach((tile, index) => {\r\n          if (tile.hasCrop && tile.cropState === 'growing') {\r\n            const growthTime = {\r\n              wheat: 1000,   // 1 second for wheat\r\n              corn: 2000,    // 2 seconds for corn\r\n              potato: 3000   // 3 seconds for potato\r\n            };\r\n\r\n            const currentTime = Date.now();\r\n            const elapsedTime = currentTime - tile.plantedTime;\r\n\r\n            if (elapsedTime >= growthTime[tile.cropType]) {\r\n              newLand[index] = {\r\n                ...tile,\r\n                cropState: 'ready'\r\n              };\r\n              hasChanges = true;\r\n            }\r\n          }\r\n        });\r\n\r\n        return hasChanges ? { ...prevState, land: newLand } : prevState;\r\n      });\r\n    }, 1000); // Check every second\r\n\r\n    return () => clearInterval(growthInterval);\r\n  }, []);\r\n\r\n  // Add visual feedback for crop state\r\n  const getCropColor = (cropType, cropState) => {\r\n    if (cropState === 'growing') {\r\n      return {\r\n        wheat: '#F4D03F80',  // Semi-transparent yellow\r\n        corn: '#F39C1280',   // Semi-transparent orange\r\n        potato: '#93511680'  // Semi-transparent brown\r\n      }[cropType] || '#90EE90';\r\n    } else if (cropState === 'ready') {\r\n      return {\r\n        wheat: '#F4D03F',  // Bright yellow\r\n        corn: '#F39C12',   // Bright orange\r\n        potato: '#935116'  // Rich brown\r\n      }[cropType] || '#228B22';\r\n    }\r\n    return '#90EE90';\r\n  };\r\n\r\n  const saveGame = () => {\r\n    const gameData = {\r\n      gameState: {\r\n        grid: gameState.grid,\r\n        money: gameState.money,\r\n        inventory: gameState.inventory,\r\n        dronePosition: gameState.dronePosition,\r\n        droneInventory: gameState.droneInventory,\r\n        land: gameState.land,\r\n        drone: gameState.drone,\r\n        unlockedCrops: gameState.unlockedCrops\r\n      },\r\n      consoles: {\r\n        states: consoleStates,\r\n        active: activeConsole,\r\n        list: consoles\r\n      }\r\n    };\r\n\r\n    localStorage.setItem('farmGame', JSON.stringify(gameData));\r\n    alert('Game saved successfully!');\r\n  };\r\n\r\n  const loadGame = () => {\r\n    const savedData = localStorage.getItem('farmGame');\r\n    if (savedData) {\r\n      try {\r\n        const gameData = JSON.parse(savedData);\r\n        \r\n        // Restore game state\r\n        setGameState(gameData.gameState);\r\n        \r\n        // Restore console states\r\n        if (gameData.consoles) {\r\n          // Restore console list\r\n          setConsoles(gameData.consoles.list || [{ id: 0, name: 'Console 1' }]);\r\n          \r\n          // Restore active console\r\n          setActiveConsole(gameData.consoles.active || 0);\r\n          \r\n          // Restore individual console states\r\n          Object.assign(consoleStates, gameData.consoles.states || {});\r\n        }\r\n\r\n        return true;\r\n      } catch (error) {\r\n        console.error('Error loading game:', error);\r\n        alert('Error loading game save');\r\n        return false;\r\n      }\r\n    }\r\n    return false;\r\n  };\r\n\r\n  // Load game on initial mount\r\n  useEffect(() => {\r\n    loadGame();\r\n  }, []);\r\n\r\n  return (\r\n    <GameContainer>\r\n      <Header>\r\n        <Title>Farming Game</Title>\r\n        <GameControls>\r\n          <SaveButton onClick={saveGame}>Save Game</SaveButton>\r\n          <MoneyDisplay>${gameState.money}</MoneyDisplay>\r\n          <TechTreeButton onClick={onOpenTechTree}>Tech Tree</TechTreeButton>\r\n        </GameControls>\r\n      </Header>\r\n      \r\n      <GameGridContainer>\r\n        <GameGrid size={Math.sqrt(gameState.land.length)}>\r\n          {gameState.land.map((tile, index) => {\r\n            const x = Math.floor(index / Math.sqrt(gameState.land.length));\r\n            const y = index % Math.sqrt(gameState.land.length);\r\n            const isDroneHere = gameState.dronePosition.x === x && gameState.dronePosition.y === y;\r\n            \r\n            return (\r\n              <LandTile \r\n                key={index}\r\n                isPlowed={tile.isPlowed}\r\n                hasCrop={tile.hasCrop}\r\n                cropState={tile.cropState}\r\n              >\r\n                {tile.hasCrop && (\r\n                  <CropIndicator \r\n                    color={getCropColor(tile.cropType, tile.cropState)}\r\n                  />\r\n                )}\r\n                {isDroneHere && <StyledDroneSprite />}\r\n              </LandTile>\r\n            );\r\n          })}\r\n        </GameGrid>\r\n        <StyledGameStats>\r\n          <div>\r\n            <span>Drone Position:</span>\r\n            <span>({gameState.dronePosition.x}, {gameState.dronePosition.y})</span>\r\n          </div>\r\n          <div>\r\n            <span>Status:</span>\r\n            <span>{gameState.land[gameState.dronePosition.y * Math.sqrt(gameState.land.length) + gameState.dronePosition.x].isPlowed ? 'Plowed' : 'Unplowed'}</span>\r\n          </div>\r\n        </StyledGameStats>\r\n      </GameGridContainer>\r\n      \r\n      <ThreeDViewContainer>\r\n        <Game3D gameState={gameState} setGameState={setGameState} />\r\n      </ThreeDViewContainer>\r\n      \r\n      <StyledConsoleContainer>\r\n        <ConsoleTabs>\r\n          {consoles.map(console => (\r\n            <ConsoleTab\r\n              key={console.id}\r\n              active={activeConsole === console.id}\r\n              onClick={() => setActiveConsole(console.id)}\r\n            >\r\n              {console.name}\r\n              {consoles.length > 1 && (\r\n                <CloseButton onClick={(e) => {\r\n                  e.stopPropagation();\r\n                  removeConsole(console.id);\r\n                }}>Ã—</CloseButton>\r\n              )}\r\n            </ConsoleTab>\r\n          ))}\r\n          <AddConsoleButton onClick={addNewConsole}>+</AddConsoleButton>\r\n        </ConsoleTabs>\r\n        \r\n        {consoles.map(console => (\r\n          <ConsoleWrapper key={console.id} active={activeConsole === console.id}>\r\n            <JavaScriptConsole \r\n              gameState={gameState} \r\n              setGameState={setGameState}\r\n              consoleId={console.id}\r\n            />\r\n          </ConsoleWrapper>\r\n        ))}\r\n      </StyledConsoleContainer>\r\n    </GameContainer>\r\n  );\r\n};\r\n\r\nexport default Game; "],"mappings":"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A;AACA;AACA;AACA;AACA;AACA,CAAC;AAED,MAAMmD,YAAY,GAAG3D,MAAM,CAACQ,GAAG;AAC/B;AACA;AACA;AACA;AACA,CAAC;AAACoD,IAAA,GALID,YAAY;AAOlB,MAAME,MAAM,GAAG7D,MAAM,CAACkC,MAAM;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAED,MAAM4B,mBAAmB,GAAG9D,MAAM,CAACQ,GAAG;AACtC;AACA;AACA;AACA;AACA;AACA,CAAC;AAACuD,IAAA,GANID,mBAAmB;AAQzB,MAAME,sBAAsB,GAAGhE,MAAM,CAACQ,GAAG;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAACyD,IAAA,GATID,sBAAsB;AAW5B,MAAME,cAAc,GAAGlE,MAAM,CAACkC,MAAM;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAACiC,IAAA,GAfID,cAAc;AAiBpB,MAAME,WAAW,GAAGpE,MAAM,CAACuC,IAAI;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAAC8B,IAAA,GAVID,WAAW;AAYjB,MAAME,MAAM,GAAGtE,MAAM,CAACQ,GAAG;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAAC+D,IAAA,GATID,MAAM;AAWZ,MAAME,KAAK,GAAGxE,MAAM,CAACyD,EAAE;AACvB;AACA;AACA;AACA,CAAC;AAACgB,IAAA,GAJID,KAAK;AAMX,MAAME,UAAU,GAAG1E,MAAM,CAACkC,MAAM;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAACyC,IAAA,GApBID,UAAU;AAsBhB,OAAO,MAAME,IAAI,GAAGA,CAAC;EAAEC,SAAS;EAAEC,YAAY;EAAEC,KAAK;EAAEC,QAAQ;EAAEC,cAAc;EAAEC;AAAc,CA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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}