{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\SPIDER\\\\Downloads\\\\Project\\\\Demo GPT\\\\Demo 1\\\\src\\\\components\\\\Farm3D.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from 'react';\nimport styled from 'styled-components';\nimport * as THREE from 'three';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ThreeDContainer = styled.div`\n  width: 500px;\n  height: 500px;\n  background-color: #f0f0f0;\n  border-radius: 5px;\n  overflow: hidden;\n`;\n_c = ThreeDContainer;\nconst Farm3D = ({\n  farmState\n}) => {\n  _s();\n  const containerRef = useRef();\n  const sceneRef = useRef();\n  const cameraRef = useRef();\n  const rendererRef = useRef();\n  const droneRef = useRef();\n  useEffect(() => {\n    // Initialize Three.js scene\n    const scene = new THREE.Scene();\n    scene.background = new THREE.Color(0x87CEEB); // Sky blue background\n    sceneRef.current = scene;\n\n    // Add ambient light\n    const ambientLight = new THREE.AmbientLight(0xffffff, 0.5);\n    scene.add(ambientLight);\n\n    // Add directional light (sun)\n    const directionalLight = new THREE.DirectionalLight(0xffffff, 0.8);\n    directionalLight.position.set(5, 5, 5);\n    scene.add(directionalLight);\n\n    // Create camera\n    const camera = new THREE.PerspectiveCamera(75, 500 / 500, 0.1, 1000);\n    camera.position.set(5, 5, 5);\n    camera.lookAt(0, 0, 0);\n    cameraRef.current = camera;\n\n    // Create renderer\n    const renderer = new THREE.WebGLRenderer({\n      antialias: true\n    });\n    renderer.setSize(500, 500);\n    containerRef.current.appendChild(renderer.domElement);\n    rendererRef.current = renderer;\n\n    // Create ground\n    const groundGeometry = new THREE.PlaneGeometry(10, 10);\n    const groundMaterial = new THREE.MeshStandardMaterial({\n      color: 0x7CFC00,\n      roughness: 0.8,\n      metalness: 0.2\n    });\n    const ground = new THREE.Mesh(groundGeometry, groundMaterial);\n    ground.rotation.x = -Math.PI / 2;\n    scene.add(ground);\n\n    // Create grid\n    const gridHelper = new THREE.GridHelper(10, 10);\n    scene.add(gridHelper);\n\n    // Create drone\n    const droneGeometry = new THREE.BoxGeometry(0.5, 0.2, 0.5);\n    const droneMaterial = new THREE.MeshStandardMaterial({\n      color: 0xff0000\n    });\n    const drone = new THREE.Mesh(droneGeometry, droneMaterial);\n    drone.position.y = 0.5;\n    scene.add(drone);\n    droneRef.current = drone;\n\n    // Animation loop\n    const animate = () => {\n      requestAnimationFrame(animate);\n      renderer.render(scene, camera);\n    };\n    animate();\n    return () => {\n      // Cleanup\n      containerRef.current.removeChild(renderer.domElement);\n      scene.traverse(object => {\n        if (object.geometry) object.geometry.dispose();\n        if (object.material) {\n          if (Array.isArray(object.material)) {\n            object.material.forEach(material => material.dispose());\n          } else {\n            object.material.dispose();\n          }\n        }\n      });\n    };\n  }, []);\n\n  // Update drone position when farmState changes\n  useEffect(() => {\n    if (droneRef.current) {\n      const {\n        x,\n        y\n      } = farmState.dronePosition;\n      droneRef.current.position.x = x - 4.5;\n      droneRef.current.position.z = y - 4.5;\n    }\n  }, [farmState.dronePosition]);\n  return /*#__PURE__*/_jsxDEV(ThreeDContainer, {\n    ref: containerRef\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 107,\n    columnNumber: 10\n  }, this);\n};\n_s(Farm3D, \"SHNGYgD06vseh/JXyM20T+59u1U=\");\n_c2 = Farm3D;\nexport default Farm3D;\nvar _c, _c2;\n$RefreshReg$(_c, \"ThreeDContainer\");\n$RefreshReg$(_c2, \"Farm3D\");","map":{"version":3,"names":["React","useEffect","useRef","styled","THREE","jsxDEV","_jsxDEV","ThreeDContainer","div","_c","Farm3D","farmState","_s","containerRef","sceneRef","cameraRef","rendererRef","droneRef","scene","Scene","background","Color","current","ambientLight","AmbientLight","add","directionalLight","DirectionalLight","position","set","camera","PerspectiveCamera","lookAt","renderer","WebGLRenderer","antialias","setSize","appendChild","domElement","groundGeometry","PlaneGeometry","groundMaterial","MeshStandardMaterial","color","roughness","metalness","ground","Mesh","rotation","x","Math","PI","gridHelper","GridHelper","droneGeometry","BoxGeometry","droneMaterial","drone","y","animate","requestAnimationFrame","render","removeChild","traverse","object","geometry","dispose","material","Array","isArray","forEach","dronePosition","z","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c2","$RefreshReg$"],"sources":["C:/Users/SPIDER/Downloads/Project/Demo GPT/Demo 1/src/components/Farm3D.js"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\r\nimport styled from 'styled-components';\r\nimport * as THREE from 'three';\r\n\r\nconst ThreeDContainer = styled.div`\r\n  width: 500px;\r\n  height: 500px;\r\n  background-color: #f0f0f0;\r\n  border-radius: 5px;\r\n  overflow: hidden;\r\n`;\r\n\r\nconst Farm3D = ({ farmState }) => {\r\n  const containerRef = useRef();\r\n  const sceneRef = useRef();\r\n  const cameraRef = useRef();\r\n  const rendererRef = useRef();\r\n  const droneRef = useRef();\r\n\r\n  useEffect(() => {\r\n    // Initialize Three.js scene\r\n    const scene = new THREE.Scene();\r\n    scene.background = new THREE.Color(0x87CEEB); // Sky blue background\r\n    sceneRef.current = scene;\r\n\r\n    // Add ambient light\r\n    const ambientLight = new THREE.AmbientLight(0xffffff, 0.5);\r\n    scene.add(ambientLight);\r\n\r\n    // Add directional light (sun)\r\n    const directionalLight = new THREE.DirectionalLight(0xffffff, 0.8);\r\n    directionalLight.position.set(5, 5, 5);\r\n    scene.add(directionalLight);\r\n\r\n    // Create camera\r\n    const camera = new THREE.PerspectiveCamera(\r\n      75,\r\n      500 / 500,\r\n      0.1,\r\n      1000\r\n    );\r\n    camera.position.set(5, 5, 5);\r\n    camera.lookAt(0, 0, 0);\r\n    cameraRef.current = camera;\r\n\r\n    // Create renderer\r\n    const renderer = new THREE.WebGLRenderer({ antialias: true });\r\n    renderer.setSize(500, 500);\r\n    containerRef.current.appendChild(renderer.domElement);\r\n    rendererRef.current = renderer;\r\n\r\n    // Create ground\r\n    const groundGeometry = new THREE.PlaneGeometry(10, 10);\r\n    const groundMaterial = new THREE.MeshStandardMaterial({ \r\n      color: 0x7CFC00,\r\n      roughness: 0.8,\r\n      metalness: 0.2\r\n    });\r\n    const ground = new THREE.Mesh(groundGeometry, groundMaterial);\r\n    ground.rotation.x = -Math.PI / 2;\r\n    scene.add(ground);\r\n\r\n    // Create grid\r\n    const gridHelper = new THREE.GridHelper(10, 10);\r\n    scene.add(gridHelper);\r\n\r\n    // Create drone\r\n    const droneGeometry = new THREE.BoxGeometry(0.5, 0.2, 0.5);\r\n    const droneMaterial = new THREE.MeshStandardMaterial({ color: 0xff0000 });\r\n    const drone = new THREE.Mesh(droneGeometry, droneMaterial);\r\n    drone.position.y = 0.5;\r\n    scene.add(drone);\r\n    droneRef.current = drone;\r\n\r\n    // Animation loop\r\n    const animate = () => {\r\n      requestAnimationFrame(animate);\r\n      renderer.render(scene, camera);\r\n    };\r\n    animate();\r\n\r\n    return () => {\r\n      // Cleanup\r\n      containerRef.current.removeChild(renderer.domElement);\r\n      scene.traverse((object) => {\r\n        if (object.geometry) object.geometry.dispose();\r\n        if (object.material) {\r\n          if (Array.isArray(object.material)) {\r\n            object.material.forEach(material => material.dispose());\r\n          } else {\r\n            object.material.dispose();\r\n          }\r\n        }\r\n      });\r\n    };\r\n  }, []);\r\n\r\n  // Update drone position when farmState changes\r\n  useEffect(() => {\r\n    if (droneRef.current) {\r\n      const { x, y } = farmState.dronePosition;\r\n      droneRef.current.position.x = x - 4.5;\r\n      droneRef.current.position.z = y - 4.5;\r\n    }\r\n  }, [farmState.dronePosition]);\r\n\r\n  return <ThreeDContainer ref={containerRef} />;\r\n};\r\n\r\nexport default Farm3D; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}