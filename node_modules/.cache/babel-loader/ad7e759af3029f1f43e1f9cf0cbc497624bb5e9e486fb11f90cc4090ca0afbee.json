{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\SPIDER\\\\Downloads\\\\Project\\\\Demo GPT\\\\Demo 1\\\\src\\\\components\\\\Game.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport styled from 'styled-components';\nimport Instructions from './Instructions';\nimport PythonConsole from './PythonConsole';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GameContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 20px;\n`;\nconst MoneyDisplay = styled.div`\n  font-size: 1.5em;\n  font-weight: bold;\n  color: #f1c40f;\n  text-align: center;\n  padding: 10px;\n  background-color: #34495e;\n  border-radius: 5px;\n`;\n_c = MoneyDisplay;\nconst GameGrid = styled.div`\n  display: grid;\n  grid-template-columns: repeat(${props => props.size}, 1fr);\n  gap: 10px;\n  width: 90%;\n  max-width: 700px;\n  margin: 0 auto;\n`;\n_c2 = GameGrid;\nconst LandTile = styled.div`\n  width: 100%;\n  aspect-ratio: 1;\n  background-color: ${props => {\n  if (props.isPlowed) return '#8B4513';\n  if (props.hasCrop && props.cropState === 'growing') return '#90EE90';\n  if (props.hasCrop && props.cropState === 'ready') return '#228B22';\n  return '#90EE90';\n}};\n  border: 1px solid #2c3e50;\n  cursor: pointer;\n  position: relative;\n  transition: all 0.3s ease;\n\n  &:hover {\n    transform: scale(1.05);\n  }\n`;\n_c3 = LandTile;\nconst CropIndicator = styled.div`\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  width: 80%;\n  height: 80%;\n  background-color: ${props => props.color};\n  border-radius: 50%;\n`;\n_c4 = CropIndicator;\nconst GameStats = styled.div`\n  position: fixed;\n  top: 20px;\n  right: 320px;\n  background-color: rgba(52, 73, 94, 0.9);\n  padding: 10px;\n  border-radius: 5px;\n`;\n_c5 = GameStats;\nconst ToolBar = styled.div`\n  display: flex;\n  margin-bottom: 20px;\n  flex-wrap: wrap;\n`;\n_c6 = ToolBar;\nconst ToolButton = styled.button`\n  background-color: ${props => props.selected ? '#2980b9' : '#3498db'};\n  border: ${props => props.selected ? '2px solid #fff' : 'none'};\n  padding: ${props => props.selected ? '6px 14px' : '8px 16px'};\n`;\n_c7 = ToolButton;\nconst CropSelector = styled.div`\n  margin-top: 10px;\n  display: flex;\n  flex-wrap: wrap;\n`;\n_c8 = CropSelector;\nconst CropButton = styled.button`\n  background-color: ${props => props.selected ? '#27ae60' : '#2ecc71'};\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  \n  &:disabled {\n    background-color: #95a5a6;\n    cursor: not-allowed;\n  }\n`;\n_c9 = CropButton;\nconst CropIcon = styled.span`\n  display: inline-block;\n  width: 12px;\n  height: 12px;\n  border-radius: 50%;\n  background-color: ${props => props.color};\n  margin-right: 5px;\n`;\n_c10 = CropIcon;\nconst GameLayout = styled.div`\n  display: grid;\n  grid-template-columns: 1fr 300px;\n  gap: 20px;\n  padding: 20px;\n`;\n_c11 = GameLayout;\nconst MainArea = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 20px;\n`;\n_c12 = MainArea;\nfunction Game({\n  inventory,\n  setInventory,\n  money,\n  setMoney\n}) {\n  _s();\n  const [gridSize, setGridSize] = useState(5);\n  const [land, setLand] = useState(Array(gridSize * gridSize).fill(null).map(() => ({\n    isPlowed: false,\n    hasCrop: false,\n    cropType: null,\n    cropState: null,\n    plantedTime: null\n  })));\n  const [selectedTool, setSelectedTool] = useState('plow');\n  const [selectedCrop, setSelectedCrop] = useState('wheat');\n  const [showInstructions, setShowInstructions] = useState(false);\n\n  // Crop growth timer\n  useEffect(() => {\n    const growthInterval = setInterval(() => {\n      let updated = false;\n      const newLand = [...land];\n      newLand.forEach((tile, index) => {\n        if (tile.hasCrop && tile.cropState === 'growing' && tile.plantedTime) {\n          const now = Date.now();\n          const growthTime = 10000; // 10 seconds for growth\n\n          if (now - tile.plantedTime > growthTime) {\n            newLand[index] = {\n              ...tile,\n              cropState: 'ready'\n            };\n            updated = true;\n          }\n        }\n      });\n      if (updated) {\n        setLand(newLand);\n      }\n    }, 1000);\n    return () => clearInterval(growthInterval);\n  }, [land]);\n  const cropColors = {\n    wheat: '#f1c40f',\n    corn: '#f39c12',\n    potato: '#d35400'\n  };\n  const handleTileClick = index => {\n    const newLand = [...land];\n    const tile = newLand[index];\n    switch (selectedTool) {\n      case 'plow':\n        if (!tile.isPlowed && !tile.hasCrop) {\n          newLand[index] = {\n            ...tile,\n            isPlowed: true\n          };\n        }\n        break;\n      case 'plant':\n        if (tile.isPlowed && !tile.hasCrop) {\n          const seedType = `${selectedCrop}_seeds`;\n          if (inventory[seedType] > 0) {\n            newLand[index] = {\n              ...tile,\n              hasCrop: true,\n              cropType: selectedCrop,\n              cropState: 'growing',\n              plantedTime: Date.now()\n            };\n            setInventory({\n              ...inventory,\n              [seedType]: inventory[seedType] - 1\n            });\n          } else {\n            alert(`You don't have any ${selectedCrop} seeds!`);\n          }\n        }\n        break;\n      case 'harvest':\n        if (tile.hasCrop && tile.cropState === 'ready') {\n          newLand[index] = {\n            ...tile,\n            hasCrop: false,\n            cropType: null,\n            cropState: null,\n            plantedTime: null,\n            isPlowed: false\n          };\n          setInventory({\n            ...inventory,\n            [tile.cropType]: (inventory[tile.cropType] || 0) + 1\n          });\n        }\n        break;\n      default:\n        break;\n    }\n    setLand(newLand);\n  };\n  const toggleInstructions = () => {\n    setShowInstructions(!showInstructions);\n  };\n  const sellAllCrops = () => {\n    let profit = 0;\n    const prices = {\n      wheat: 20,\n      corn: 40,\n      potato: 30\n    };\n    const newInventory = {\n      ...inventory\n    };\n    Object.keys(prices).forEach(crop => {\n      if (newInventory[crop] > 0) {\n        profit += prices[crop] * newInventory[crop];\n        newInventory[crop] = 0;\n      }\n    });\n    setMoney(prev => prev + profit);\n    setInventory(newInventory);\n    if (profit > 0) {\n      alert(`Sold all crops for $${profit}!`);\n    } else {\n      alert('No crops to sell!');\n    }\n  };\n  const buySeedsWithType = (seedType, price) => {\n    if (money >= price) {\n      setMoney(prev => prev - price);\n      setInventory({\n        ...inventory,\n        [seedType]: (inventory[seedType] || 0) + 1\n      });\n    } else {\n      alert('Not enough money!');\n    }\n  };\n  const cropKeyToName = {\n    wheat_seeds: 'Wheat Seeds',\n    corn_seeds: 'Corn Seeds',\n    potato_seeds: 'Potato Seeds'\n  };\n  const gameState = {\n    money,\n    inventory,\n    land\n  };\n  const setGameState = newState => {\n    if (typeof newState === 'function') {\n      const updatedState = newState({\n        money,\n        inventory,\n        land\n      });\n      setMoney(updatedState.money);\n      setInventory(updatedState.inventory);\n      setLand(updatedState.land);\n    } else {\n      setMoney(newState.money);\n      setInventory(newState.inventory);\n      setLand(newState.land);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(GameLayout, {\n    children: [/*#__PURE__*/_jsxDEV(MainArea, {\n      children: [/*#__PURE__*/_jsxDEV(MoneyDisplay, {\n        children: [\"Money: $\", money]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 301,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(GameStats, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: [\"Land Size: \", gridSize, \"x\", gridSize]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 306,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: sellAllCrops,\n          children: \"Sell All Crops\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 307,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 305,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Instructions, {\n        isOpen: showInstructions,\n        onClose: toggleInstructions\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 310,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"The Farmer Was Replaced\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 312,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ToolBar, {\n        children: [/*#__PURE__*/_jsxDEV(ToolButton, {\n          selected: selectedTool === 'plow',\n          onClick: () => setSelectedTool('plow'),\n          children: \"Plow\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 315,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(ToolButton, {\n          selected: selectedTool === 'plant',\n          onClick: () => setSelectedTool('plant'),\n          children: \"Plant\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 321,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(ToolButton, {\n          selected: selectedTool === 'harvest',\n          onClick: () => setSelectedTool('harvest'),\n          children: \"Harvest\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 327,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 314,\n        columnNumber: 9\n      }, this), selectedTool === 'plant' && /*#__PURE__*/_jsxDEV(CropSelector, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: \"Select crop to plant:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 337,\n          columnNumber: 13\n        }, this), Object.keys(cropColors).map(crop => {\n          const seedType = `${crop}_seeds`;\n          return /*#__PURE__*/_jsxDEV(CropButton, {\n            selected: selectedCrop === crop,\n            onClick: () => setSelectedCrop(crop),\n            disabled: !inventory[seedType] || inventory[seedType] <= 0,\n            children: [/*#__PURE__*/_jsxDEV(CropIcon, {\n              color: cropColors[crop]\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 347,\n              columnNumber: 19\n            }, this), crop.charAt(0).toUpperCase() + crop.slice(1), \" (\", inventory[seedType] || 0, \")\"]\n          }, crop, true, {\n            fileName: _jsxFileName,\n            lineNumber: 341,\n            columnNumber: 17\n          }, this);\n        })]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 336,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(GameGrid, {\n        size: gridSize,\n        children: land.map((tile, index) => /*#__PURE__*/_jsxDEV(LandTile, {\n          isPlowed: tile.isPlowed,\n          hasCrop: tile.hasCrop,\n          cropState: tile.cropState,\n          onClick: () => handleTileClick(index),\n          children: tile.hasCrop && /*#__PURE__*/_jsxDEV(CropIndicator, {\n            color: cropColors[tile.cropType]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 365,\n            columnNumber: 17\n          }, this)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 357,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 355,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          marginTop: '20px',\n          marginBottom: '20px'\n        },\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: toggleInstructions,\n          children: \"Game Instructions\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 374,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 373,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 300,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(PythonConsole, {\n      gameState: gameState,\n      setGameState: setGameState\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 378,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 299,\n    columnNumber: 5\n  }, this);\n}\n_s(Game, \"7ZajxGTAGE+Nt97/S1//0Vg9yO8=\");\n_c13 = Game;\nexport default Game;\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7, _c8, _c9, _c10, _c11, _c12, _c13;\n$RefreshReg$(_c, \"MoneyDisplay\");\n$RefreshReg$(_c2, \"GameGrid\");\n$RefreshReg$(_c3, \"LandTile\");\n$RefreshReg$(_c4, \"CropIndicator\");\n$RefreshReg$(_c5, \"GameStats\");\n$RefreshReg$(_c6, \"ToolBar\");\n$RefreshReg$(_c7, \"ToolButton\");\n$RefreshReg$(_c8, \"CropSelector\");\n$RefreshReg$(_c9, \"CropButton\");\n$RefreshReg$(_c10, \"CropIcon\");\n$RefreshReg$(_c11, \"GameLayout\");\n$RefreshReg$(_c12, \"MainArea\");\n$RefreshReg$(_c13, \"Game\");","map":{"version":3,"names":["React","useState","useEffect","styled","Instructions","PythonConsole","jsxDEV","_jsxDEV","GameContainer","div","MoneyDisplay","_c","GameGrid","props","size","_c2","LandTile","isPlowed","hasCrop","cropState","_c3","CropIndicator","color","_c4","GameStats","_c5","ToolBar","_c6","ToolButton","button","selected","_c7","CropSelector","_c8","CropButton","_c9","CropIcon","span","_c10","GameLayout","_c11","MainArea","_c12","Game","inventory","setInventory","money","setMoney","_s","gridSize","setGridSize","land","setLand","Array","fill","map","cropType","plantedTime","selectedTool","setSelectedTool","selectedCrop","setSelectedCrop","showInstructions","setShowInstructions","growthInterval","setInterval","updated","newLand","forEach","tile","index","now","Date","growthTime","clearInterval","cropColors","wheat","corn","potato","handleTileClick","seedType","alert","toggleInstructions","sellAllCrops","profit","prices","newInventory","Object","keys","crop","prev","buySeedsWithType","price","cropKeyToName","wheat_seeds","corn_seeds","potato_seeds","gameState","setGameState","newState","updatedState","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","isOpen","onClose","disabled","charAt","toUpperCase","slice","style","marginTop","marginBottom","_c13","$RefreshReg$"],"sources":["C:/Users/SPIDER/Downloads/Project/Demo GPT/Demo 1/src/components/Game.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport styled from 'styled-components';\r\nimport Instructions from './Instructions';\r\nimport PythonConsole from './PythonConsole';\r\n\r\nconst GameContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 20px;\r\n`;\r\n\r\nconst MoneyDisplay = styled.div`\r\n  font-size: 1.5em;\r\n  font-weight: bold;\r\n  color: #f1c40f;\r\n  text-align: center;\r\n  padding: 10px;\r\n  background-color: #34495e;\r\n  border-radius: 5px;\r\n`;\r\n\r\nconst GameGrid = styled.div`\r\n  display: grid;\r\n  grid-template-columns: repeat(${props => props.size}, 1fr);\r\n  gap: 10px;\r\n  width: 90%;\r\n  max-width: 700px;\r\n  margin: 0 auto;\r\n`;\r\n\r\nconst LandTile = styled.div`\r\n  width: 100%;\r\n  aspect-ratio: 1;\r\n  background-color: ${props => {\r\n    if (props.isPlowed) return '#8B4513';\r\n    if (props.hasCrop && props.cropState === 'growing') return '#90EE90';\r\n    if (props.hasCrop && props.cropState === 'ready') return '#228B22';\r\n    return '#90EE90';\r\n  }};\r\n  border: 1px solid #2c3e50;\r\n  cursor: pointer;\r\n  position: relative;\r\n  transition: all 0.3s ease;\r\n\r\n  &:hover {\r\n    transform: scale(1.05);\r\n  }\r\n`;\r\n\r\nconst CropIndicator = styled.div`\r\n  position: absolute;\r\n  top: 50%;\r\n  left: 50%;\r\n  transform: translate(-50%, -50%);\r\n  width: 80%;\r\n  height: 80%;\r\n  background-color: ${props => props.color};\r\n  border-radius: 50%;\r\n`;\r\n\r\nconst GameStats = styled.div`\r\n  position: fixed;\r\n  top: 20px;\r\n  right: 320px;\r\n  background-color: rgba(52, 73, 94, 0.9);\r\n  padding: 10px;\r\n  border-radius: 5px;\r\n`;\r\n\r\nconst ToolBar = styled.div`\r\n  display: flex;\r\n  margin-bottom: 20px;\r\n  flex-wrap: wrap;\r\n`;\r\n\r\nconst ToolButton = styled.button`\r\n  background-color: ${props => props.selected ? '#2980b9' : '#3498db'};\r\n  border: ${props => props.selected ? '2px solid #fff' : 'none'};\r\n  padding: ${props => props.selected ? '6px 14px' : '8px 16px'};\r\n`;\r\n\r\nconst CropSelector = styled.div`\r\n  margin-top: 10px;\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n`;\r\n\r\nconst CropButton = styled.button`\r\n  background-color: ${props => props.selected ? '#27ae60' : '#2ecc71'};\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n  \r\n  &:disabled {\r\n    background-color: #95a5a6;\r\n    cursor: not-allowed;\r\n  }\r\n`;\r\n\r\nconst CropIcon = styled.span`\r\n  display: inline-block;\r\n  width: 12px;\r\n  height: 12px;\r\n  border-radius: 50%;\r\n  background-color: ${props => props.color};\r\n  margin-right: 5px;\r\n`;\r\n\r\nconst GameLayout = styled.div`\r\n  display: grid;\r\n  grid-template-columns: 1fr 300px;\r\n  gap: 20px;\r\n  padding: 20px;\r\n`;\r\n\r\nconst MainArea = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 20px;\r\n`;\r\n\r\nfunction Game({ inventory, setInventory, money, setMoney }) {\r\n  const [gridSize, setGridSize] = useState(5);\r\n  const [land, setLand] = useState(Array(gridSize * gridSize).fill(null).map(() => ({ \r\n    isPlowed: false, \r\n    hasCrop: false, \r\n    cropType: null,\r\n    cropState: null,\r\n    plantedTime: null\r\n  })));\r\n  \r\n  const [selectedTool, setSelectedTool] = useState('plow');\r\n  const [selectedCrop, setSelectedCrop] = useState('wheat');\r\n  const [showInstructions, setShowInstructions] = useState(false);\r\n\r\n  // Crop growth timer\r\n  useEffect(() => {\r\n    const growthInterval = setInterval(() => {\r\n      let updated = false;\r\n      const newLand = [...land];\r\n      \r\n      newLand.forEach((tile, index) => {\r\n        if (tile.hasCrop && tile.cropState === 'growing' && tile.plantedTime) {\r\n          const now = Date.now();\r\n          const growthTime = 10000; // 10 seconds for growth\r\n          \r\n          if (now - tile.plantedTime > growthTime) {\r\n            newLand[index] = {\r\n              ...tile,\r\n              cropState: 'ready'\r\n            };\r\n            updated = true;\r\n          }\r\n        }\r\n      });\r\n      \r\n      if (updated) {\r\n        setLand(newLand);\r\n      }\r\n    }, 1000);\r\n    \r\n    return () => clearInterval(growthInterval);\r\n  }, [land]);\r\n\r\n  const cropColors = {\r\n    wheat: '#f1c40f',\r\n    corn: '#f39c12',\r\n    potato: '#d35400'\r\n  };\r\n\r\n  const handleTileClick = (index) => {\r\n    const newLand = [...land];\r\n    const tile = newLand[index];\r\n\r\n    switch (selectedTool) {\r\n      case 'plow':\r\n        if (!tile.isPlowed && !tile.hasCrop) {\r\n          newLand[index] = { ...tile, isPlowed: true };\r\n        }\r\n        break;\r\n        \r\n      case 'plant':\r\n        if (tile.isPlowed && !tile.hasCrop) {\r\n          const seedType = `${selectedCrop}_seeds`;\r\n          \r\n          if (inventory[seedType] > 0) {\r\n            newLand[index] = { \r\n              ...tile, \r\n              hasCrop: true, \r\n              cropType: selectedCrop,\r\n              cropState: 'growing',\r\n              plantedTime: Date.now()\r\n            };\r\n            \r\n            setInventory({\r\n              ...inventory,\r\n              [seedType]: inventory[seedType] - 1\r\n            });\r\n          } else {\r\n            alert(`You don't have any ${selectedCrop} seeds!`);\r\n          }\r\n        }\r\n        break;\r\n        \r\n      case 'harvest':\r\n        if (tile.hasCrop && tile.cropState === 'ready') {\r\n          newLand[index] = { \r\n            ...tile, \r\n            hasCrop: false, \r\n            cropType: null,\r\n            cropState: null,\r\n            plantedTime: null,\r\n            isPlowed: false\r\n          };\r\n          \r\n          setInventory({\r\n            ...inventory,\r\n            [tile.cropType]: (inventory[tile.cropType] || 0) + 1\r\n          });\r\n        }\r\n        break;\r\n        \r\n      default:\r\n        break;\r\n    }\r\n\r\n    setLand(newLand);\r\n  };\r\n\r\n  const toggleInstructions = () => {\r\n    setShowInstructions(!showInstructions);\r\n  };\r\n\r\n  const sellAllCrops = () => {\r\n    let profit = 0;\r\n    const prices = {\r\n      wheat: 20,\r\n      corn: 40,\r\n      potato: 30\r\n    };\r\n    \r\n    const newInventory = {...inventory};\r\n    \r\n    Object.keys(prices).forEach(crop => {\r\n      if (newInventory[crop] > 0) {\r\n        profit += prices[crop] * newInventory[crop];\r\n        newInventory[crop] = 0;\r\n      }\r\n    });\r\n    \r\n    setMoney(prev => prev + profit);\r\n    setInventory(newInventory);\r\n    \r\n    if (profit > 0) {\r\n      alert(`Sold all crops for $${profit}!`);\r\n    } else {\r\n      alert('No crops to sell!');\r\n    }\r\n  };\r\n\r\n  const buySeedsWithType = (seedType, price) => {\r\n    if (money >= price) {\r\n      setMoney(prev => prev - price);\r\n      setInventory({\r\n        ...inventory,\r\n        [seedType]: (inventory[seedType] || 0) + 1\r\n      });\r\n    } else {\r\n      alert('Not enough money!');\r\n    }\r\n  };\r\n\r\n  const cropKeyToName = {\r\n    wheat_seeds: 'Wheat Seeds',\r\n    corn_seeds: 'Corn Seeds',\r\n    potato_seeds: 'Potato Seeds'\r\n  };\r\n\r\n  const gameState = {\r\n    money,\r\n    inventory,\r\n    land\r\n  };\r\n\r\n  const setGameState = (newState) => {\r\n    if (typeof newState === 'function') {\r\n      const updatedState = newState({ money, inventory, land });\r\n      setMoney(updatedState.money);\r\n      setInventory(updatedState.inventory);\r\n      setLand(updatedState.land);\r\n    } else {\r\n      setMoney(newState.money);\r\n      setInventory(newState.inventory);\r\n      setLand(newState.land);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <GameLayout>\r\n      <MainArea>\r\n        <MoneyDisplay>\r\n          Money: ${money}\r\n        </MoneyDisplay>\r\n        \r\n        <GameStats>\r\n          <div>Land Size: {gridSize}x{gridSize}</div>\r\n          <button onClick={sellAllCrops}>Sell All Crops</button>\r\n        </GameStats>\r\n        \r\n        <Instructions isOpen={showInstructions} onClose={toggleInstructions} />\r\n        \r\n        <h2>The Farmer Was Replaced</h2>\r\n        \r\n        <ToolBar>\r\n          <ToolButton \r\n            selected={selectedTool === 'plow'} \r\n            onClick={() => setSelectedTool('plow')}\r\n          >\r\n            Plow\r\n          </ToolButton>\r\n          <ToolButton \r\n            selected={selectedTool === 'plant'} \r\n            onClick={() => setSelectedTool('plant')}\r\n          >\r\n            Plant\r\n          </ToolButton>\r\n          <ToolButton \r\n            selected={selectedTool === 'harvest'} \r\n            onClick={() => setSelectedTool('harvest')}\r\n          >\r\n            Harvest\r\n          </ToolButton>\r\n        </ToolBar>\r\n        \r\n        {selectedTool === 'plant' && (\r\n          <CropSelector>\r\n            <div>Select crop to plant:</div>\r\n            {Object.keys(cropColors).map(crop => {\r\n              const seedType = `${crop}_seeds`;\r\n              return (\r\n                <CropButton\r\n                  key={crop}\r\n                  selected={selectedCrop === crop}\r\n                  onClick={() => setSelectedCrop(crop)}\r\n                  disabled={!inventory[seedType] || inventory[seedType] <= 0}\r\n                >\r\n                  <CropIcon color={cropColors[crop]} />\r\n                  {crop.charAt(0).toUpperCase() + crop.slice(1)} ({inventory[seedType] || 0})\r\n                </CropButton>\r\n              );\r\n            })}\r\n          </CropSelector>\r\n        )}\r\n        \r\n        <GameGrid size={gridSize}>\r\n          {land.map((tile, index) => (\r\n            <LandTile\r\n              key={index}\r\n              isPlowed={tile.isPlowed}\r\n              hasCrop={tile.hasCrop}\r\n              cropState={tile.cropState}\r\n              onClick={() => handleTileClick(index)}\r\n            >\r\n              {tile.hasCrop && (\r\n                <CropIndicator \r\n                  color={cropColors[tile.cropType]} \r\n                />\r\n              )}\r\n            </LandTile>\r\n          ))}\r\n        </GameGrid>\r\n        \r\n        <div style={{ marginTop: '20px', marginBottom: '20px' }}>\r\n          <button onClick={toggleInstructions}>Game Instructions</button>\r\n        </div>\r\n      </MainArea>\r\n\r\n      <PythonConsole gameState={gameState} setGameState={setGameState} />\r\n    </GameLayout>\r\n  );\r\n}\r\n\r\nexport default Game; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}