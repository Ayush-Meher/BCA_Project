{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\SPIDER\\\\Downloads\\\\Project\\\\Demo GPT\\\\Demo 1\\\\src\\\\components\\\\Game3D.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect, useState, useLayoutEffect } from 'react';\nimport * as THREE from 'three';\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Game3D = ({\n  gameState,\n  setGameState\n}) => {\n  _s();\n  const [isInitialized, setIsInitialized] = useState(false);\n  const [isMounted, setIsMounted] = useState(false);\n  const canvasRef = useRef(null);\n  const sceneRef = useRef(null);\n  const cameraRef = useRef(null);\n  const rendererRef = useRef(null);\n  const modelsRef = useRef({});\n  const droneRef = useRef(null);\n  const animationFrameRef = useRef(null);\n\n  // Ensure component is mounted before initialization\n  useLayoutEffect(() => {\n    setIsMounted(true);\n    return () => setIsMounted(false);\n  }, []);\n\n  // Initialize Three.js scene\n  const initializeScene = () => {\n    try {\n      if (!canvasRef.current || !isMounted) {\n        console.warn('Canvas element not found or component not mounted');\n        return false;\n      }\n\n      // Create scene\n      const scene = new THREE.Scene();\n      scene.background = new THREE.Color(0x87CEEB);\n\n      // Create camera\n      const camera = new THREE.PerspectiveCamera(75, 1, 0.1, 1000);\n      camera.position.set(5, 5, 5);\n      camera.lookAt(0, 0, 0);\n\n      // Create renderer\n      const renderer = new THREE.WebGLRenderer({\n        canvas: canvasRef.current,\n        antialias: true,\n        alpha: true\n      });\n      renderer.setSize(600, 600, false);\n\n      // Add lights\n      const ambientLight = new THREE.AmbientLight(0xffffff, 0.5);\n      scene.add(ambientLight);\n      const directionalLight = new THREE.DirectionalLight(0xffffff, 0.8);\n      directionalLight.position.set(10, 10, 5);\n      scene.add(directionalLight);\n\n      // Create ground plane\n      const groundGeometry = new THREE.PlaneGeometry(5, 5);\n      const groundMaterial = new THREE.MeshStandardMaterial({\n        color: 0x8B4513,\n        roughness: 0.8,\n        metalness: 0.2\n      });\n      const ground = new THREE.Mesh(groundGeometry, groundMaterial);\n      ground.rotation.x = -Math.PI / 2;\n      scene.add(ground);\n\n      // Store references\n      sceneRef.current = scene;\n      cameraRef.current = camera;\n      rendererRef.current = renderer;\n      modelsRef.current = {};\n      return true;\n    } catch (error) {\n      console.error('Error initializing scene:', error);\n      return false;\n    }\n  };\n\n  // Load 3D models\n  const loadModels = async () => {\n    try {\n      if (!isMounted) return false;\n      const loader = new GLTFLoader();\n      const models = {};\n\n      // Load drone model\n      await new Promise((resolve, reject) => {\n        loader.load('/models/drone.glb', gltf => {\n          if (!isMounted) return;\n          const drone = gltf.scene;\n          drone.scale.set(0.5, 0.5, 0.5);\n          drone.position.set(0, 0.5, 0);\n          sceneRef.current.add(drone);\n          droneRef.current = drone;\n          models.drone = drone;\n          resolve();\n        }, undefined, reject);\n      });\n\n      // Load crop models\n      await Promise.all(['wheat', 'corn', 'potato'].map(crop => new Promise((resolve, reject) => {\n        loader.load(`/models/${crop}.glb`, gltf => {\n          if (!isMounted) return;\n          const model = gltf.scene;\n          model.scale.set(0.3, 0.3, 0.3);\n          model.visible = false;\n          sceneRef.current.add(model);\n          models[crop] = model;\n          resolve();\n        }, undefined, reject);\n      })));\n      modelsRef.current = models;\n      return true;\n    } catch (error) {\n      console.error('Error loading models:', error);\n      return false;\n    }\n  };\n\n  // Animation loop\n  const startAnimation = () => {\n    if (!isMounted) return;\n    const animate = () => {\n      if (!isMounted) return;\n      animationFrameRef.current = requestAnimationFrame(animate);\n      if (droneRef.current) {\n        droneRef.current.rotation.y += 0.01;\n        droneRef.current.position.y = Math.sin(Date.now() * 0.001) * 0.1 + 0.5;\n      }\n      rendererRef.current.render(sceneRef.current, cameraRef.current);\n    };\n    animate();\n  };\n\n  // Initialize everything\n  useEffect(() => {\n    if (!isMounted) return;\n    const initialize = async () => {\n      if (isInitialized) return;\n      const sceneInitialized = initializeScene();\n      if (!sceneInitialized) return;\n      const modelsLoaded = await loadModels();\n      if (!modelsLoaded) return;\n      startAnimation();\n      setIsInitialized(true);\n    };\n    initialize();\n    return () => {\n      if (animationFrameRef.current) {\n        cancelAnimationFrame(animationFrameRef.current);\n      }\n      if (rendererRef.current) {\n        rendererRef.current.dispose();\n      }\n    };\n  }, [isInitialized, isMounted]);\n\n  // Update game state\n  useEffect(() => {\n    if (!isInitialized || !isMounted) return;\n    if (droneRef.current) {\n      droneRef.current.position.set(gameState.dronePosition.x - 2, 0.5, gameState.dronePosition.y - 2);\n    }\n    gameState.grid.forEach((row, x) => {\n      row.forEach((cell, y) => {\n        if (cell && modelsRef.current[cell.type]) {\n          const model = modelsRef.current[cell.type];\n          model.position.set(x - 2, 0, y - 2);\n          model.visible = true;\n        }\n      });\n    });\n  }, [gameState, isInitialized, isMounted]);\n  if (!isMounted) return null;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      width: '100%',\n      height: '100%',\n      position: 'relative'\n    },\n    children: /*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: canvasRef,\n      style: {\n        width: '100%',\n        height: '100%',\n        display: 'block'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 209,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 208,\n    columnNumber: 5\n  }, this);\n};\n_s(Game3D, \"bX6Nz4fTx1Bi93rK3GvPLV4tEJY=\");\n_c = Game3D;\nexport default Game3D;\nvar _c;\n$RefreshReg$(_c, \"Game3D\");","map":{"version":3,"names":["React","useRef","useEffect","useState","useLayoutEffect","THREE","GLTFLoader","jsxDEV","_jsxDEV","Game3D","gameState","setGameState","_s","isInitialized","setIsInitialized","isMounted","setIsMounted","canvasRef","sceneRef","cameraRef","rendererRef","modelsRef","droneRef","animationFrameRef","initializeScene","current","console","warn","scene","Scene","background","Color","camera","PerspectiveCamera","position","set","lookAt","renderer","WebGLRenderer","canvas","antialias","alpha","setSize","ambientLight","AmbientLight","add","directionalLight","DirectionalLight","groundGeometry","PlaneGeometry","groundMaterial","MeshStandardMaterial","color","roughness","metalness","ground","Mesh","rotation","x","Math","PI","error","loadModels","loader","models","Promise","resolve","reject","load","gltf","drone","scale","undefined","all","map","crop","model","visible","startAnimation","animate","requestAnimationFrame","y","sin","Date","now","render","initialize","sceneInitialized","modelsLoaded","cancelAnimationFrame","dispose","dronePosition","grid","forEach","row","cell","type","style","width","height","children","ref","display","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/SPIDER/Downloads/Project/Demo GPT/Demo 1/src/components/Game3D.js"],"sourcesContent":["import React, { useRef, useEffect, useState, useLayoutEffect } from 'react';\r\nimport * as THREE from 'three';\r\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader';\r\n\r\nconst Game3D = ({ gameState, setGameState }) => {\r\n  const [isInitialized, setIsInitialized] = useState(false);\r\n  const [isMounted, setIsMounted] = useState(false);\r\n  const canvasRef = useRef(null);\r\n  const sceneRef = useRef(null);\r\n  const cameraRef = useRef(null);\r\n  const rendererRef = useRef(null);\r\n  const modelsRef = useRef({});\r\n  const droneRef = useRef(null);\r\n  const animationFrameRef = useRef(null);\r\n\r\n  // Ensure component is mounted before initialization\r\n  useLayoutEffect(() => {\r\n    setIsMounted(true);\r\n    return () => setIsMounted(false);\r\n  }, []);\r\n\r\n  // Initialize Three.js scene\r\n  const initializeScene = () => {\r\n    try {\r\n      if (!canvasRef.current || !isMounted) {\r\n        console.warn('Canvas element not found or component not mounted');\r\n        return false;\r\n      }\r\n\r\n      // Create scene\r\n      const scene = new THREE.Scene();\r\n      scene.background = new THREE.Color(0x87CEEB);\r\n      \r\n      // Create camera\r\n      const camera = new THREE.PerspectiveCamera(75, 1, 0.1, 1000);\r\n      camera.position.set(5, 5, 5);\r\n      camera.lookAt(0, 0, 0);\r\n      \r\n      // Create renderer\r\n      const renderer = new THREE.WebGLRenderer({ \r\n        canvas: canvasRef.current,\r\n        antialias: true,\r\n        alpha: true\r\n      });\r\n      renderer.setSize(600, 600, false);\r\n\r\n      // Add lights\r\n      const ambientLight = new THREE.AmbientLight(0xffffff, 0.5);\r\n      scene.add(ambientLight);\r\n      \r\n      const directionalLight = new THREE.DirectionalLight(0xffffff, 0.8);\r\n      directionalLight.position.set(10, 10, 5);\r\n      scene.add(directionalLight);\r\n\r\n      // Create ground plane\r\n      const groundGeometry = new THREE.PlaneGeometry(5, 5);\r\n      const groundMaterial = new THREE.MeshStandardMaterial({ \r\n        color: 0x8B4513,\r\n        roughness: 0.8,\r\n        metalness: 0.2\r\n      });\r\n      const ground = new THREE.Mesh(groundGeometry, groundMaterial);\r\n      ground.rotation.x = -Math.PI / 2;\r\n      scene.add(ground);\r\n\r\n      // Store references\r\n      sceneRef.current = scene;\r\n      cameraRef.current = camera;\r\n      rendererRef.current = renderer;\r\n      modelsRef.current = {};\r\n\r\n      return true;\r\n    } catch (error) {\r\n      console.error('Error initializing scene:', error);\r\n      return false;\r\n    }\r\n  };\r\n\r\n  // Load 3D models\r\n  const loadModels = async () => {\r\n    try {\r\n      if (!isMounted) return false;\r\n\r\n      const loader = new GLTFLoader();\r\n      const models = {};\r\n\r\n      // Load drone model\r\n      await new Promise((resolve, reject) => {\r\n        loader.load(\r\n          '/models/drone.glb',\r\n          (gltf) => {\r\n            if (!isMounted) return;\r\n            const drone = gltf.scene;\r\n            drone.scale.set(0.5, 0.5, 0.5);\r\n            drone.position.set(0, 0.5, 0);\r\n            sceneRef.current.add(drone);\r\n            droneRef.current = drone;\r\n            models.drone = drone;\r\n            resolve();\r\n          },\r\n          undefined,\r\n          reject\r\n        );\r\n      });\r\n\r\n      // Load crop models\r\n      await Promise.all(['wheat', 'corn', 'potato'].map(crop => \r\n        new Promise((resolve, reject) => {\r\n          loader.load(\r\n            `/models/${crop}.glb`,\r\n            (gltf) => {\r\n              if (!isMounted) return;\r\n              const model = gltf.scene;\r\n              model.scale.set(0.3, 0.3, 0.3);\r\n              model.visible = false;\r\n              sceneRef.current.add(model);\r\n              models[crop] = model;\r\n              resolve();\r\n            },\r\n            undefined,\r\n            reject\r\n          );\r\n        })\r\n      ));\r\n\r\n      modelsRef.current = models;\r\n      return true;\r\n    } catch (error) {\r\n      console.error('Error loading models:', error);\r\n      return false;\r\n    }\r\n  };\r\n\r\n  // Animation loop\r\n  const startAnimation = () => {\r\n    if (!isMounted) return;\r\n\r\n    const animate = () => {\r\n      if (!isMounted) return;\r\n      \r\n      animationFrameRef.current = requestAnimationFrame(animate);\r\n      \r\n      if (droneRef.current) {\r\n        droneRef.current.rotation.y += 0.01;\r\n        droneRef.current.position.y = Math.sin(Date.now() * 0.001) * 0.1 + 0.5;\r\n      }\r\n\r\n      rendererRef.current.render(sceneRef.current, cameraRef.current);\r\n    };\r\n    animate();\r\n  };\r\n\r\n  // Initialize everything\r\n  useEffect(() => {\r\n    if (!isMounted) return;\r\n\r\n    const initialize = async () => {\r\n      if (isInitialized) return;\r\n\r\n      const sceneInitialized = initializeScene();\r\n      if (!sceneInitialized) return;\r\n\r\n      const modelsLoaded = await loadModels();\r\n      if (!modelsLoaded) return;\r\n\r\n      startAnimation();\r\n      setIsInitialized(true);\r\n    };\r\n\r\n    initialize();\r\n\r\n    return () => {\r\n      if (animationFrameRef.current) {\r\n        cancelAnimationFrame(animationFrameRef.current);\r\n      }\r\n      if (rendererRef.current) {\r\n        rendererRef.current.dispose();\r\n      }\r\n    };\r\n  }, [isInitialized, isMounted]);\r\n\r\n  // Update game state\r\n  useEffect(() => {\r\n    if (!isInitialized || !isMounted) return;\r\n\r\n    if (droneRef.current) {\r\n      droneRef.current.position.set(\r\n        gameState.dronePosition.x - 2,\r\n        0.5,\r\n        gameState.dronePosition.y - 2\r\n      );\r\n    }\r\n\r\n    gameState.grid.forEach((row, x) => {\r\n      row.forEach((cell, y) => {\r\n        if (cell && modelsRef.current[cell.type]) {\r\n          const model = modelsRef.current[cell.type];\r\n          model.position.set(x - 2, 0, y - 2);\r\n          model.visible = true;\r\n        }\r\n      });\r\n    });\r\n  }, [gameState, isInitialized, isMounted]);\r\n\r\n  if (!isMounted) return null;\r\n\r\n  return (\r\n    <div style={{ width: '100%', height: '100%', position: 'relative' }}>\r\n      <canvas \r\n        ref={canvasRef} \r\n        style={{ \r\n          width: '100%', \r\n          height: '100%',\r\n          display: 'block'\r\n        }} \r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Game3D; "],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,MAAM,EAAEC,SAAS,EAAEC,QAAQ,EAAEC,eAAe,QAAQ,OAAO;AAC3E,OAAO,KAAKC,KAAK,MAAM,OAAO;AAC9B,SAASC,UAAU,QAAQ,uCAAuC;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnE,MAAMC,MAAM,GAAGA,CAAC;EAAEC,SAAS;EAAEC;AAAa,CAAC,KAAK;EAAAC,EAAA;EAC9C,MAAM,CAACC,aAAa,EAAEC,gBAAgB,CAAC,GAAGX,QAAQ,CAAC,KAAK,CAAC;EACzD,MAAM,CAACY,SAAS,EAAEC,YAAY,CAAC,GAAGb,QAAQ,CAAC,KAAK,CAAC;EACjD,MAAMc,SAAS,GAAGhB,MAAM,CAAC,IAAI,CAAC;EAC9B,MAAMiB,QAAQ,GAAGjB,MAAM,CAAC,IAAI,CAAC;EAC7B,MAAMkB,SAAS,GAAGlB,MAAM,CAAC,IAAI,CAAC;EAC9B,MAAMmB,WAAW,GAAGnB,MAAM,CAAC,IAAI,CAAC;EAChC,MAAMoB,SAAS,GAAGpB,MAAM,CAAC,CAAC,CAAC,CAAC;EAC5B,MAAMqB,QAAQ,GAAGrB,MAAM,CAAC,IAAI,CAAC;EAC7B,MAAMsB,iBAAiB,GAAGtB,MAAM,CAAC,IAAI,CAAC;;EAEtC;EACAG,eAAe,CAAC,MAAM;IACpBY,YAAY,CAAC,IAAI,CAAC;IAClB,OAAO,MAAMA,YAAY,CAAC,KAAK,CAAC;EAClC,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAMQ,eAAe,GAAGA,CAAA,KAAM;IAC5B,IAAI;MACF,IAAI,CAACP,SAAS,CAACQ,OAAO,IAAI,CAACV,SAAS,EAAE;QACpCW,OAAO,CAACC,IAAI,CAAC,mDAAmD,CAAC;QACjE,OAAO,KAAK;MACd;;MAEA;MACA,MAAMC,KAAK,GAAG,IAAIvB,KAAK,CAACwB,KAAK,CAAC,CAAC;MAC/BD,KAAK,CAACE,UAAU,GAAG,IAAIzB,KAAK,CAAC0B,KAAK,CAAC,QAAQ,CAAC;;MAE5C;MACA,MAAMC,MAAM,GAAG,IAAI3B,KAAK,CAAC4B,iBAAiB,CAAC,EAAE,EAAE,CAAC,EAAE,GAAG,EAAE,IAAI,CAAC;MAC5DD,MAAM,CAACE,QAAQ,CAACC,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;MAC5BH,MAAM,CAACI,MAAM,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;;MAEtB;MACA,MAAMC,QAAQ,GAAG,IAAIhC,KAAK,CAACiC,aAAa,CAAC;QACvCC,MAAM,EAAEtB,SAAS,CAACQ,OAAO;QACzBe,SAAS,EAAE,IAAI;QACfC,KAAK,EAAE;MACT,CAAC,CAAC;MACFJ,QAAQ,CAACK,OAAO,CAAC,GAAG,EAAE,GAAG,EAAE,KAAK,CAAC;;MAEjC;MACA,MAAMC,YAAY,GAAG,IAAItC,KAAK,CAACuC,YAAY,CAAC,QAAQ,EAAE,GAAG,CAAC;MAC1DhB,KAAK,CAACiB,GAAG,CAACF,YAAY,CAAC;MAEvB,MAAMG,gBAAgB,GAAG,IAAIzC,KAAK,CAAC0C,gBAAgB,CAAC,QAAQ,EAAE,GAAG,CAAC;MAClED,gBAAgB,CAACZ,QAAQ,CAACC,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC;MACxCP,KAAK,CAACiB,GAAG,CAACC,gBAAgB,CAAC;;MAE3B;MACA,MAAME,cAAc,GAAG,IAAI3C,KAAK,CAAC4C,aAAa,CAAC,CAAC,EAAE,CAAC,CAAC;MACpD,MAAMC,cAAc,GAAG,IAAI7C,KAAK,CAAC8C,oBAAoB,CAAC;QACpDC,KAAK,EAAE,QAAQ;QACfC,SAAS,EAAE,GAAG;QACdC,SAAS,EAAE;MACb,CAAC,CAAC;MACF,MAAMC,MAAM,GAAG,IAAIlD,KAAK,CAACmD,IAAI,CAACR,cAAc,EAAEE,cAAc,CAAC;MAC7DK,MAAM,CAACE,QAAQ,CAACC,CAAC,GAAG,CAACC,IAAI,CAACC,EAAE,GAAG,CAAC;MAChChC,KAAK,CAACiB,GAAG,CAACU,MAAM,CAAC;;MAEjB;MACArC,QAAQ,CAACO,OAAO,GAAGG,KAAK;MACxBT,SAAS,CAACM,OAAO,GAAGO,MAAM;MAC1BZ,WAAW,CAACK,OAAO,GAAGY,QAAQ;MAC9BhB,SAAS,CAACI,OAAO,GAAG,CAAC,CAAC;MAEtB,OAAO,IAAI;IACb,CAAC,CAAC,OAAOoC,KAAK,EAAE;MACdnC,OAAO,CAACmC,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;MACjD,OAAO,KAAK;IACd;EACF,CAAC;;EAED;EACA,MAAMC,UAAU,GAAG,MAAAA,CAAA,KAAY;IAC7B,IAAI;MACF,IAAI,CAAC/C,SAAS,EAAE,OAAO,KAAK;MAE5B,MAAMgD,MAAM,GAAG,IAAIzD,UAAU,CAAC,CAAC;MAC/B,MAAM0D,MAAM,GAAG,CAAC,CAAC;;MAEjB;MACA,MAAM,IAAIC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;QACrCJ,MAAM,CAACK,IAAI,CACT,mBAAmB,EAClBC,IAAI,IAAK;UACR,IAAI,CAACtD,SAAS,EAAE;UAChB,MAAMuD,KAAK,GAAGD,IAAI,CAACzC,KAAK;UACxB0C,KAAK,CAACC,KAAK,CAACpC,GAAG,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC;UAC9BmC,KAAK,CAACpC,QAAQ,CAACC,GAAG,CAAC,CAAC,EAAE,GAAG,EAAE,CAAC,CAAC;UAC7BjB,QAAQ,CAACO,OAAO,CAACoB,GAAG,CAACyB,KAAK,CAAC;UAC3BhD,QAAQ,CAACG,OAAO,GAAG6C,KAAK;UACxBN,MAAM,CAACM,KAAK,GAAGA,KAAK;UACpBJ,OAAO,CAAC,CAAC;QACX,CAAC,EACDM,SAAS,EACTL,MACF,CAAC;MACH,CAAC,CAAC;;MAEF;MACA,MAAMF,OAAO,CAACQ,GAAG,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,QAAQ,CAAC,CAACC,GAAG,CAACC,IAAI,IACpD,IAAIV,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;QAC/BJ,MAAM,CAACK,IAAI,CACT,WAAWO,IAAI,MAAM,EACpBN,IAAI,IAAK;UACR,IAAI,CAACtD,SAAS,EAAE;UAChB,MAAM6D,KAAK,GAAGP,IAAI,CAACzC,KAAK;UACxBgD,KAAK,CAACL,KAAK,CAACpC,GAAG,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC;UAC9ByC,KAAK,CAACC,OAAO,GAAG,KAAK;UACrB3D,QAAQ,CAACO,OAAO,CAACoB,GAAG,CAAC+B,KAAK,CAAC;UAC3BZ,MAAM,CAACW,IAAI,CAAC,GAAGC,KAAK;UACpBV,OAAO,CAAC,CAAC;QACX,CAAC,EACDM,SAAS,EACTL,MACF,CAAC;MACH,CAAC,CACH,CAAC,CAAC;MAEF9C,SAAS,CAACI,OAAO,GAAGuC,MAAM;MAC1B,OAAO,IAAI;IACb,CAAC,CAAC,OAAOH,KAAK,EAAE;MACdnC,OAAO,CAACmC,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;MAC7C,OAAO,KAAK;IACd;EACF,CAAC;;EAED;EACA,MAAMiB,cAAc,GAAGA,CAAA,KAAM;IAC3B,IAAI,CAAC/D,SAAS,EAAE;IAEhB,MAAMgE,OAAO,GAAGA,CAAA,KAAM;MACpB,IAAI,CAAChE,SAAS,EAAE;MAEhBQ,iBAAiB,CAACE,OAAO,GAAGuD,qBAAqB,CAACD,OAAO,CAAC;MAE1D,IAAIzD,QAAQ,CAACG,OAAO,EAAE;QACpBH,QAAQ,CAACG,OAAO,CAACgC,QAAQ,CAACwB,CAAC,IAAI,IAAI;QACnC3D,QAAQ,CAACG,OAAO,CAACS,QAAQ,CAAC+C,CAAC,GAAGtB,IAAI,CAACuB,GAAG,CAACC,IAAI,CAACC,GAAG,CAAC,CAAC,GAAG,KAAK,CAAC,GAAG,GAAG,GAAG,GAAG;MACxE;MAEAhE,WAAW,CAACK,OAAO,CAAC4D,MAAM,CAACnE,QAAQ,CAACO,OAAO,EAAEN,SAAS,CAACM,OAAO,CAAC;IACjE,CAAC;IACDsD,OAAO,CAAC,CAAC;EACX,CAAC;;EAED;EACA7E,SAAS,CAAC,MAAM;IACd,IAAI,CAACa,SAAS,EAAE;IAEhB,MAAMuE,UAAU,GAAG,MAAAA,CAAA,KAAY;MAC7B,IAAIzE,aAAa,EAAE;MAEnB,MAAM0E,gBAAgB,GAAG/D,eAAe,CAAC,CAAC;MAC1C,IAAI,CAAC+D,gBAAgB,EAAE;MAEvB,MAAMC,YAAY,GAAG,MAAM1B,UAAU,CAAC,CAAC;MACvC,IAAI,CAAC0B,YAAY,EAAE;MAEnBV,cAAc,CAAC,CAAC;MAChBhE,gBAAgB,CAAC,IAAI,CAAC;IACxB,CAAC;IAEDwE,UAAU,CAAC,CAAC;IAEZ,OAAO,MAAM;MACX,IAAI/D,iBAAiB,CAACE,OAAO,EAAE;QAC7BgE,oBAAoB,CAAClE,iBAAiB,CAACE,OAAO,CAAC;MACjD;MACA,IAAIL,WAAW,CAACK,OAAO,EAAE;QACvBL,WAAW,CAACK,OAAO,CAACiE,OAAO,CAAC,CAAC;MAC/B;IACF,CAAC;EACH,CAAC,EAAE,CAAC7E,aAAa,EAAEE,SAAS,CAAC,CAAC;;EAE9B;EACAb,SAAS,CAAC,MAAM;IACd,IAAI,CAACW,aAAa,IAAI,CAACE,SAAS,EAAE;IAElC,IAAIO,QAAQ,CAACG,OAAO,EAAE;MACpBH,QAAQ,CAACG,OAAO,CAACS,QAAQ,CAACC,GAAG,CAC3BzB,SAAS,CAACiF,aAAa,CAACjC,CAAC,GAAG,CAAC,EAC7B,GAAG,EACHhD,SAAS,CAACiF,aAAa,CAACV,CAAC,GAAG,CAC9B,CAAC;IACH;IAEAvE,SAAS,CAACkF,IAAI,CAACC,OAAO,CAAC,CAACC,GAAG,EAAEpC,CAAC,KAAK;MACjCoC,GAAG,CAACD,OAAO,CAAC,CAACE,IAAI,EAAEd,CAAC,KAAK;QACvB,IAAIc,IAAI,IAAI1E,SAAS,CAACI,OAAO,CAACsE,IAAI,CAACC,IAAI,CAAC,EAAE;UACxC,MAAMpB,KAAK,GAAGvD,SAAS,CAACI,OAAO,CAACsE,IAAI,CAACC,IAAI,CAAC;UAC1CpB,KAAK,CAAC1C,QAAQ,CAACC,GAAG,CAACuB,CAAC,GAAG,CAAC,EAAE,CAAC,EAAEuB,CAAC,GAAG,CAAC,CAAC;UACnCL,KAAK,CAACC,OAAO,GAAG,IAAI;QACtB;MACF,CAAC,CAAC;IACJ,CAAC,CAAC;EACJ,CAAC,EAAE,CAACnE,SAAS,EAAEG,aAAa,EAAEE,SAAS,CAAC,CAAC;EAEzC,IAAI,CAACA,SAAS,EAAE,OAAO,IAAI;EAE3B,oBACEP,OAAA;IAAKyF,KAAK,EAAE;MAAEC,KAAK,EAAE,MAAM;MAAEC,MAAM,EAAE,MAAM;MAAEjE,QAAQ,EAAE;IAAW,CAAE;IAAAkE,QAAA,eAClE5F,OAAA;MACE6F,GAAG,EAAEpF,SAAU;MACfgF,KAAK,EAAE;QACLC,KAAK,EAAE,MAAM;QACbC,MAAM,EAAE,MAAM;QACdG,OAAO,EAAE;MACX;IAAE;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV,CAAC;AAAC9F,EAAA,CAtNIH,MAAM;AAAAkG,EAAA,GAANlG,MAAM;AAwNZ,eAAeA,MAAM;AAAC,IAAAkG,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}