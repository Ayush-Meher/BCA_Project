{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\SPIDER\\\\Downloads\\\\Project\\\\Demo GPT\\\\Demo 1\\\\src\\\\components\\\\Game.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport styled from 'styled-components';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GameGrid = styled.div`\n  display: grid;\n  grid-template-columns: repeat(${props => props.size}, 1fr);\n  gap: 5px;\n  max-width: 800px;\n  margin: 0 auto;\n`;\n_c = GameGrid;\nconst LandTile = styled.div`\n  width: 100%;\n  aspect-ratio: 1;\n  background-color: ${props => {\n  if (props.isPlowed) return '#8B4513';\n  if (props.hasCrop) return '#228B22';\n  return '#90EE90';\n}};\n  border: 1px solid #2c3e50;\n  cursor: pointer;\n  position: relative;\n  transition: all 0.3s ease;\n\n  &:hover {\n    transform: scale(1.05);\n  }\n`;\n_c2 = LandTile;\nconst CropIndicator = styled.div`\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  width: 80%;\n  height: 80%;\n  background-color: ${props => props.color};\n  border-radius: 50%;\n`;\n_c3 = CropIndicator;\nconst GameStats = styled.div`\n  position: fixed;\n  top: 20px;\n  right: 320px;\n  background-color: rgba(52, 73, 94, 0.9);\n  padding: 10px;\n  border-radius: 5px;\n`;\n_c4 = GameStats;\nfunction Game() {\n  _s();\n  const [gridSize, setGridSize] = useState(5);\n  const [land, setLand] = useState(Array(gridSize * gridSize).fill({\n    isPlowed: false,\n    hasCrop: false,\n    cropType: null\n  }));\n  const [money, setMoney] = useState(100);\n  const [selectedTool, setSelectedTool] = useState('plow');\n  const handleTileClick = index => {\n    const newLand = [...land];\n    const tile = newLand[index];\n    switch (selectedTool) {\n      case 'plow':\n        newLand[index] = {\n          ...tile,\n          isPlowed: !tile.isPlowed\n        };\n        break;\n      case 'plant':\n        if (tile.isPlowed && !tile.hasCrop) {\n          newLand[index] = {\n            ...tile,\n            hasCrop: true,\n            cropType: 'wheat'\n          };\n        }\n        break;\n      case 'harvest':\n        if (tile.hasCrop) {\n          newLand[index] = {\n            ...tile,\n            hasCrop: false,\n            cropType: null\n          };\n          setMoney(prev => prev + 10);\n        }\n        break;\n      default:\n        break;\n    }\n    setLand(newLand);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(GameStats, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"Money: $\", money]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"Land Size: \", gridSize, \"x\", gridSize]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginBottom: '20px'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setSelectedTool('plow'),\n        children: \"Plow\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setSelectedTool('plant'),\n        children: \"Plant\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setSelectedTool('harvest'),\n        children: \"Harvest\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(GameGrid, {\n      size: gridSize,\n      children: land.map((tile, index) => /*#__PURE__*/_jsxDEV(LandTile, {\n        isPlowed: tile.isPlowed,\n        hasCrop: tile.hasCrop,\n        onClick: () => handleTileClick(index),\n        children: tile.hasCrop && /*#__PURE__*/_jsxDEV(CropIndicator, {\n          color: \"#228B22\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 30\n        }, this)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 5\n  }, this);\n}\n_s(Game, \"WCdljg7E64X8Z/GlIIgN6sEfKnM=\");\n_c5 = Game;\nexport default Game;\nvar _c, _c2, _c3, _c4, _c5;\n$RefreshReg$(_c, \"GameGrid\");\n$RefreshReg$(_c2, \"LandTile\");\n$RefreshReg$(_c3, \"CropIndicator\");\n$RefreshReg$(_c4, \"GameStats\");\n$RefreshReg$(_c5, \"Game\");","map":{"version":3,"names":["React","useState","useEffect","styled","jsxDEV","_jsxDEV","GameGrid","div","props","size","_c","LandTile","isPlowed","hasCrop","_c2","CropIndicator","color","_c3","GameStats","_c4","Game","_s","gridSize","setGridSize","land","setLand","Array","fill","cropType","money","setMoney","selectedTool","setSelectedTool","handleTileClick","index","newLand","tile","prev","children","fileName","_jsxFileName","lineNumber","columnNumber","style","marginBottom","onClick","map","_c5","$RefreshReg$"],"sources":["C:/Users/SPIDER/Downloads/Project/Demo GPT/Demo 1/src/components/Game.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst GameGrid = styled.div`\r\n  display: grid;\r\n  grid-template-columns: repeat(${props => props.size}, 1fr);\r\n  gap: 5px;\r\n  max-width: 800px;\r\n  margin: 0 auto;\r\n`;\r\n\r\nconst LandTile = styled.div`\r\n  width: 100%;\r\n  aspect-ratio: 1;\r\n  background-color: ${props => {\r\n    if (props.isPlowed) return '#8B4513';\r\n    if (props.hasCrop) return '#228B22';\r\n    return '#90EE90';\r\n  }};\r\n  border: 1px solid #2c3e50;\r\n  cursor: pointer;\r\n  position: relative;\r\n  transition: all 0.3s ease;\r\n\r\n  &:hover {\r\n    transform: scale(1.05);\r\n  }\r\n`;\r\n\r\nconst CropIndicator = styled.div`\r\n  position: absolute;\r\n  top: 50%;\r\n  left: 50%;\r\n  transform: translate(-50%, -50%);\r\n  width: 80%;\r\n  height: 80%;\r\n  background-color: ${props => props.color};\r\n  border-radius: 50%;\r\n`;\r\n\r\nconst GameStats = styled.div`\r\n  position: fixed;\r\n  top: 20px;\r\n  right: 320px;\r\n  background-color: rgba(52, 73, 94, 0.9);\r\n  padding: 10px;\r\n  border-radius: 5px;\r\n`;\r\n\r\nfunction Game() {\r\n  const [gridSize, setGridSize] = useState(5);\r\n  const [land, setLand] = useState(Array(gridSize * gridSize).fill({ isPlowed: false, hasCrop: false, cropType: null }));\r\n  const [money, setMoney] = useState(100);\r\n  const [selectedTool, setSelectedTool] = useState('plow');\r\n\r\n  const handleTileClick = (index) => {\r\n    const newLand = [...land];\r\n    const tile = newLand[index];\r\n\r\n    switch (selectedTool) {\r\n      case 'plow':\r\n        newLand[index] = { ...tile, isPlowed: !tile.isPlowed };\r\n        break;\r\n      case 'plant':\r\n        if (tile.isPlowed && !tile.hasCrop) {\r\n          newLand[index] = { ...tile, hasCrop: true, cropType: 'wheat' };\r\n        }\r\n        break;\r\n      case 'harvest':\r\n        if (tile.hasCrop) {\r\n          newLand[index] = { ...tile, hasCrop: false, cropType: null };\r\n          setMoney(prev => prev + 10);\r\n        }\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n\r\n    setLand(newLand);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <GameStats>\r\n        <div>Money: ${money}</div>\r\n        <div>Land Size: {gridSize}x{gridSize}</div>\r\n      </GameStats>\r\n      \r\n      <div style={{ marginBottom: '20px' }}>\r\n        <button onClick={() => setSelectedTool('plow')}>Plow</button>\r\n        <button onClick={() => setSelectedTool('plant')}>Plant</button>\r\n        <button onClick={() => setSelectedTool('harvest')}>Harvest</button>\r\n      </div>\r\n\r\n      <GameGrid size={gridSize}>\r\n        {land.map((tile, index) => (\r\n          <LandTile\r\n            key={index}\r\n            isPlowed={tile.isPlowed}\r\n            hasCrop={tile.hasCrop}\r\n            onClick={() => handleTileClick(index)}\r\n          >\r\n            {tile.hasCrop && <CropIndicator color=\"#228B22\" />}\r\n          </LandTile>\r\n        ))}\r\n      </GameGrid>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Game; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}