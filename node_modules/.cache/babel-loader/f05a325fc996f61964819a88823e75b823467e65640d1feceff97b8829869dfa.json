{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\SPIDER\\\\Downloads\\\\Project\\\\Demo GPT\\\\Demo 1\\\\src\\\\components\\\\Game3D.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect, useState, useLayoutEffect, useCallback } from 'react';\nimport * as THREE from 'three';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Game3D = ({\n  gameState,\n  setGameState\n}) => {\n  _s();\n  const [isInitialized, setIsInitialized] = useState(false);\n  const [isMounted, setIsMounted] = useState(false);\n  const canvasRef = useRef(null);\n  const sceneRef = useRef(null);\n  const cameraRef = useRef(null);\n  const rendererRef = useRef(null);\n  const droneRef = useRef(null);\n  const modelsRef = useRef({});\n  const animationFrameRef = useRef(null);\n\n  // Ensure component is mounted before initialization\n  useLayoutEffect(() => {\n    setIsMounted(true);\n    return () => setIsMounted(false);\n  }, []);\n\n  // Initialize Three.js scene\n  const initializeScene = useCallback(() => {\n    try {\n      if (!canvasRef.current || !isMounted) {\n        console.warn('Canvas element not found or component not mounted');\n        return false;\n      }\n\n      // Create scene\n      const scene = new THREE.Scene();\n      scene.background = new THREE.Color(0x87CEEB);\n\n      // Create camera with better angle\n      const camera = new THREE.PerspectiveCamera(75, 1, 0.1, 1000);\n      camera.position.set(3, 4, 3);\n      camera.lookAt(0, 0, 0);\n\n      // Create renderer with proper size\n      const renderer = new THREE.WebGLRenderer({\n        canvas: canvasRef.current,\n        antialias: true,\n        alpha: true\n      });\n      renderer.setSize(600, 600, false);\n      renderer.setPixelRatio(window.devicePixelRatio);\n\n      // Add lights\n      const ambientLight = new THREE.AmbientLight(0xffffff, 0.5);\n      scene.add(ambientLight);\n      const directionalLight = new THREE.DirectionalLight(0xffffff, 0.8);\n      directionalLight.position.set(10, 10, 5);\n      scene.add(directionalLight);\n\n      // Create ground plane\n      const groundGeometry = new THREE.PlaneGeometry(5, 5);\n      const groundMaterial = new THREE.MeshStandardMaterial({\n        color: 0x8B4513,\n        roughness: 0.8,\n        metalness: 0.2\n      });\n      const ground = new THREE.Mesh(groundGeometry, groundMaterial);\n      ground.rotation.x = -Math.PI / 2;\n      scene.add(ground);\n\n      // Create grid helper\n      const gridHelper = new THREE.GridHelper(5, 5);\n      scene.add(gridHelper);\n\n      // Create drone using basic geometry\n      const droneGeometry = new THREE.BoxGeometry(0.4, 0.2, 0.4);\n      const droneMaterial = new THREE.MeshStandardMaterial({\n        color: 0x3498db\n      });\n      const drone = new THREE.Mesh(droneGeometry, droneMaterial);\n      drone.position.set(0, 0.5, 0);\n      scene.add(drone);\n      droneRef.current = drone;\n\n      // Create crop geometries\n      const cropGeometries = {\n        wheat: new THREE.CylinderGeometry(0.1, 0.1, 0.5, 8),\n        corn: new THREE.CylinderGeometry(0.1, 0.1, 0.8, 8),\n        potato: new THREE.SphereGeometry(0.2, 8, 8)\n      };\n      const cropMaterials = {\n        wheat: new THREE.MeshStandardMaterial({\n          color: 0xF4D03F\n        }),\n        corn: new THREE.MeshStandardMaterial({\n          color: 0xF39C12\n        }),\n        potato: new THREE.MeshStandardMaterial({\n          color: 0x935116\n        })\n      };\n\n      // Create crop instances (5x5 grid)\n      const crops = {};\n      ['wheat', 'corn', 'potato'].forEach(cropType => {\n        crops[cropType] = Array(25).fill().map(() => {\n          const crop = new THREE.Mesh(cropGeometries[cropType], cropMaterials[cropType]);\n          crop.visible = false;\n          scene.add(crop);\n          return crop;\n        });\n      });\n\n      // Store references\n      sceneRef.current = scene;\n      cameraRef.current = camera;\n      rendererRef.current = renderer;\n      modelsRef.current = crops;\n      return true;\n    } catch (error) {\n      console.error('Error initializing scene:', error);\n      return false;\n    }\n  }, [isMounted]);\n\n  // Animation loop\n  const startAnimation = useCallback(() => {\n    if (!isMounted) return;\n    const animate = () => {\n      if (!isMounted || !sceneRef.current || !cameraRef.current || !rendererRef.current) return;\n      animationFrameRef.current = requestAnimationFrame(animate);\n      if (droneRef.current) {\n        // Hover animation\n        droneRef.current.position.y = 0.5 + Math.sin(Date.now() * 0.002) * 0.1;\n        // Rotation animation\n        droneRef.current.rotation.y += 0.02;\n      }\n\n      // Animate crops\n      Object.entries(modelsRef.current).forEach(([cropType, cropInstances]) => {\n        cropInstances.forEach((crop, index) => {\n          if (crop.visible) {\n            const tile = gameState.land[index];\n            if (tile.cropState === 'growing') {\n              // Growing animation\n              const growthScale = 0.3 + Math.sin(Date.now() * 0.001 + index) * 0.1;\n              crop.scale.set(0.5, growthScale, 0.5);\n            } else if (tile.cropState === 'ready') {\n              // Ready-to-harvest animation\n              crop.rotation.y += 0.01;\n            }\n          }\n        });\n      });\n      rendererRef.current.render(sceneRef.current, cameraRef.current);\n    };\n    animate();\n  }, [isMounted, gameState.land]);\n\n  // Initialize everything\n  useEffect(() => {\n    if (!isMounted) return;\n    const initialize = async () => {\n      if (isInitialized) return;\n      const sceneInitialized = initializeScene();\n      if (!sceneInitialized) return;\n      startAnimation();\n      setIsInitialized(true);\n    };\n    initialize();\n    return () => {\n      if (animationFrameRef.current) {\n        cancelAnimationFrame(animationFrameRef.current);\n      }\n      if (rendererRef.current) {\n        rendererRef.current.dispose();\n      }\n    };\n  }, [isInitialized, isMounted, initializeScene, startAnimation]);\n\n  // Update game state\n  useEffect(() => {\n    if (!isInitialized || !isMounted || !droneRef.current) return;\n\n    // Update drone position\n    const droneX = gameState.dronePosition.x - 2;\n    const droneZ = gameState.dronePosition.y - 2;\n\n    // Use smooth transition for drone movement\n    const updateDronePosition = () => {\n      if (!droneRef.current) return;\n      const currentX = droneRef.current.position.x;\n      const currentZ = droneRef.current.position.z;\n      const deltaX = (droneX - currentX) * 0.1;\n      const deltaZ = (droneZ - currentZ) * 0.1;\n      droneRef.current.position.x += deltaX;\n      droneRef.current.position.z += deltaZ;\n      if (Math.abs(deltaX) > 0.01 || Math.abs(deltaZ) > 0.01) {\n        requestAnimationFrame(updateDronePosition);\n      }\n    };\n    updateDronePosition();\n\n    // Update all crops\n    Object.entries(modelsRef.current).forEach(([cropType, cropInstances]) => {\n      cropInstances.forEach((crop, index) => {\n        const tile = gameState.land[index];\n        const x = Math.floor(index / 5);\n        const y = index % 5;\n        if (tile.hasCrop && tile.cropType === cropType) {\n          crop.visible = true;\n          crop.position.set(x - 2, 0.25, y - 2);\n          if (tile.cropState === 'ready') {\n            crop.scale.set(1, 1, 1);\n          } else {\n            crop.scale.set(0.5, 0.5, 0.5);\n          }\n        } else {\n          crop.visible = false;\n        }\n      });\n    });\n  }, [gameState, isInitialized, isMounted]);\n  if (!isMounted) return null;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      width: '100%',\n      height: '100%',\n      position: 'relative'\n    },\n    children: /*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: canvasRef,\n      style: {\n        width: '100%',\n        height: '100%',\n        display: 'block'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 234,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 233,\n    columnNumber: 5\n  }, this);\n};\n_s(Game3D, \"BMwKMjLOqp5W7LJOZDUlyIfXebs=\");\n_c = Game3D;\nexport default Game3D;\nvar _c;\n$RefreshReg$(_c, \"Game3D\");","map":{"version":3,"names":["React","useRef","useEffect","useState","useLayoutEffect","useCallback","THREE","jsxDEV","_jsxDEV","Game3D","gameState","setGameState","_s","isInitialized","setIsInitialized","isMounted","setIsMounted","canvasRef","sceneRef","cameraRef","rendererRef","droneRef","modelsRef","animationFrameRef","initializeScene","current","console","warn","scene","Scene","background","Color","camera","PerspectiveCamera","position","set","lookAt","renderer","WebGLRenderer","canvas","antialias","alpha","setSize","setPixelRatio","window","devicePixelRatio","ambientLight","AmbientLight","add","directionalLight","DirectionalLight","groundGeometry","PlaneGeometry","groundMaterial","MeshStandardMaterial","color","roughness","metalness","ground","Mesh","rotation","x","Math","PI","gridHelper","GridHelper","droneGeometry","BoxGeometry","droneMaterial","drone","cropGeometries","wheat","CylinderGeometry","corn","potato","SphereGeometry","cropMaterials","crops","forEach","cropType","Array","fill","map","crop","visible","error","startAnimation","animate","requestAnimationFrame","y","sin","Date","now","Object","entries","cropInstances","index","tile","land","cropState","growthScale","scale","render","initialize","sceneInitialized","cancelAnimationFrame","dispose","droneX","dronePosition","droneZ","updateDronePosition","currentX","currentZ","z","deltaX","deltaZ","abs","floor","hasCrop","style","width","height","children","ref","display","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/SPIDER/Downloads/Project/Demo GPT/Demo 1/src/components/Game3D.js"],"sourcesContent":["import React, { useRef, useEffect, useState, useLayoutEffect, useCallback } from 'react';\r\nimport * as THREE from 'three';\r\n\r\nconst Game3D = ({ gameState, setGameState }) => {\r\n  const [isInitialized, setIsInitialized] = useState(false);\r\n  const [isMounted, setIsMounted] = useState(false);\r\n  const canvasRef = useRef(null);\r\n  const sceneRef = useRef(null);\r\n  const cameraRef = useRef(null);\r\n  const rendererRef = useRef(null);\r\n  const droneRef = useRef(null);\r\n  const modelsRef = useRef({});\r\n  const animationFrameRef = useRef(null);\r\n\r\n  // Ensure component is mounted before initialization\r\n  useLayoutEffect(() => {\r\n    setIsMounted(true);\r\n    return () => setIsMounted(false);\r\n  }, []);\r\n\r\n  // Initialize Three.js scene\r\n  const initializeScene = useCallback(() => {\r\n    try {\r\n      if (!canvasRef.current || !isMounted) {\r\n        console.warn('Canvas element not found or component not mounted');\r\n        return false;\r\n      }\r\n\r\n      // Create scene\r\n      const scene = new THREE.Scene();\r\n      scene.background = new THREE.Color(0x87CEEB);\r\n      \r\n      // Create camera with better angle\r\n      const camera = new THREE.PerspectiveCamera(75, 1, 0.1, 1000);\r\n      camera.position.set(3, 4, 3);\r\n      camera.lookAt(0, 0, 0);\r\n      \r\n      // Create renderer with proper size\r\n      const renderer = new THREE.WebGLRenderer({ \r\n        canvas: canvasRef.current,\r\n        antialias: true,\r\n        alpha: true\r\n      });\r\n      renderer.setSize(600, 600, false);\r\n      renderer.setPixelRatio(window.devicePixelRatio);\r\n\r\n      // Add lights\r\n      const ambientLight = new THREE.AmbientLight(0xffffff, 0.5);\r\n      scene.add(ambientLight);\r\n      \r\n      const directionalLight = new THREE.DirectionalLight(0xffffff, 0.8);\r\n      directionalLight.position.set(10, 10, 5);\r\n      scene.add(directionalLight);\r\n\r\n      // Create ground plane\r\n      const groundGeometry = new THREE.PlaneGeometry(5, 5);\r\n      const groundMaterial = new THREE.MeshStandardMaterial({ \r\n        color: 0x8B4513,\r\n        roughness: 0.8,\r\n        metalness: 0.2\r\n      });\r\n      const ground = new THREE.Mesh(groundGeometry, groundMaterial);\r\n      ground.rotation.x = -Math.PI / 2;\r\n      scene.add(ground);\r\n\r\n      // Create grid helper\r\n      const gridHelper = new THREE.GridHelper(5, 5);\r\n      scene.add(gridHelper);\r\n\r\n      // Create drone using basic geometry\r\n      const droneGeometry = new THREE.BoxGeometry(0.4, 0.2, 0.4);\r\n      const droneMaterial = new THREE.MeshStandardMaterial({ color: 0x3498db });\r\n      const drone = new THREE.Mesh(droneGeometry, droneMaterial);\r\n      drone.position.set(0, 0.5, 0);\r\n      scene.add(drone);\r\n      droneRef.current = drone;\r\n\r\n      // Create crop geometries\r\n      const cropGeometries = {\r\n        wheat: new THREE.CylinderGeometry(0.1, 0.1, 0.5, 8),\r\n        corn: new THREE.CylinderGeometry(0.1, 0.1, 0.8, 8),\r\n        potato: new THREE.SphereGeometry(0.2, 8, 8)\r\n      };\r\n\r\n      const cropMaterials = {\r\n        wheat: new THREE.MeshStandardMaterial({ color: 0xF4D03F }),\r\n        corn: new THREE.MeshStandardMaterial({ color: 0xF39C12 }),\r\n        potato: new THREE.MeshStandardMaterial({ color: 0x935116 })\r\n      };\r\n\r\n      // Create crop instances (5x5 grid)\r\n      const crops = {};\r\n      ['wheat', 'corn', 'potato'].forEach(cropType => {\r\n        crops[cropType] = Array(25).fill().map(() => {\r\n          const crop = new THREE.Mesh(cropGeometries[cropType], cropMaterials[cropType]);\r\n          crop.visible = false;\r\n          scene.add(crop);\r\n          return crop;\r\n        });\r\n      });\r\n\r\n      // Store references\r\n      sceneRef.current = scene;\r\n      cameraRef.current = camera;\r\n      rendererRef.current = renderer;\r\n      modelsRef.current = crops;\r\n\r\n      return true;\r\n    } catch (error) {\r\n      console.error('Error initializing scene:', error);\r\n      return false;\r\n    }\r\n  }, [isMounted]);\r\n\r\n  // Animation loop\r\n  const startAnimation = useCallback(() => {\r\n    if (!isMounted) return;\r\n\r\n    const animate = () => {\r\n      if (!isMounted || !sceneRef.current || !cameraRef.current || !rendererRef.current) return;\r\n      \r\n      animationFrameRef.current = requestAnimationFrame(animate);\r\n      \r\n      if (droneRef.current) {\r\n        // Hover animation\r\n        droneRef.current.position.y = 0.5 + Math.sin(Date.now() * 0.002) * 0.1;\r\n        // Rotation animation\r\n        droneRef.current.rotation.y += 0.02;\r\n      }\r\n\r\n      // Animate crops\r\n      Object.entries(modelsRef.current).forEach(([cropType, cropInstances]) => {\r\n        cropInstances.forEach((crop, index) => {\r\n          if (crop.visible) {\r\n            const tile = gameState.land[index];\r\n            \r\n            if (tile.cropState === 'growing') {\r\n              // Growing animation\r\n              const growthScale = 0.3 + Math.sin(Date.now() * 0.001 + index) * 0.1;\r\n              crop.scale.set(0.5, growthScale, 0.5);\r\n            } else if (tile.cropState === 'ready') {\r\n              // Ready-to-harvest animation\r\n              crop.rotation.y += 0.01;\r\n            }\r\n          }\r\n        });\r\n      });\r\n\r\n      rendererRef.current.render(sceneRef.current, cameraRef.current);\r\n    };\r\n    animate();\r\n  }, [isMounted, gameState.land]);\r\n\r\n  // Initialize everything\r\n  useEffect(() => {\r\n    if (!isMounted) return;\r\n\r\n    const initialize = async () => {\r\n      if (isInitialized) return;\r\n\r\n      const sceneInitialized = initializeScene();\r\n      if (!sceneInitialized) return;\r\n\r\n      startAnimation();\r\n      setIsInitialized(true);\r\n    };\r\n\r\n    initialize();\r\n\r\n    return () => {\r\n      if (animationFrameRef.current) {\r\n        cancelAnimationFrame(animationFrameRef.current);\r\n      }\r\n      if (rendererRef.current) {\r\n        rendererRef.current.dispose();\r\n      }\r\n    };\r\n  }, [isInitialized, isMounted, initializeScene, startAnimation]);\r\n\r\n  // Update game state\r\n  useEffect(() => {\r\n    if (!isInitialized || !isMounted || !droneRef.current) return;\r\n\r\n    // Update drone position\r\n    const droneX = gameState.dronePosition.x - 2;\r\n    const droneZ = gameState.dronePosition.y - 2;\r\n    \r\n    // Use smooth transition for drone movement\r\n    const updateDronePosition = () => {\r\n      if (!droneRef.current) return;\r\n      \r\n      const currentX = droneRef.current.position.x;\r\n      const currentZ = droneRef.current.position.z;\r\n      const deltaX = (droneX - currentX) * 0.1;\r\n      const deltaZ = (droneZ - currentZ) * 0.1;\r\n      \r\n      droneRef.current.position.x += deltaX;\r\n      droneRef.current.position.z += deltaZ;\r\n      \r\n      if (Math.abs(deltaX) > 0.01 || Math.abs(deltaZ) > 0.01) {\r\n        requestAnimationFrame(updateDronePosition);\r\n      }\r\n    };\r\n    \r\n    updateDronePosition();\r\n\r\n    // Update all crops\r\n    Object.entries(modelsRef.current).forEach(([cropType, cropInstances]) => {\r\n      cropInstances.forEach((crop, index) => {\r\n        const tile = gameState.land[index];\r\n        const x = Math.floor(index / 5);\r\n        const y = index % 5;\r\n\r\n        if (tile.hasCrop && tile.cropType === cropType) {\r\n          crop.visible = true;\r\n          crop.position.set(x - 2, 0.25, y - 2);\r\n          \r\n          if (tile.cropState === 'ready') {\r\n            crop.scale.set(1, 1, 1);\r\n          } else {\r\n            crop.scale.set(0.5, 0.5, 0.5);\r\n          }\r\n        } else {\r\n          crop.visible = false;\r\n        }\r\n      });\r\n    });\r\n  }, [gameState, isInitialized, isMounted]);\r\n\r\n  if (!isMounted) return null;\r\n\r\n  return (\r\n    <div style={{ width: '100%', height: '100%', position: 'relative' }}>\r\n      <canvas \r\n        ref={canvasRef} \r\n        style={{ \r\n          width: '100%', \r\n          height: '100%',\r\n          display: 'block'\r\n        }} \r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Game3D; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}