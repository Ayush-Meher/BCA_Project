{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\SPIDER\\\\Downloads\\\\Project\\\\Demo GPT\\\\Demo 1\\\\src\\\\components\\\\Game3D.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect, useState, useLayoutEffect, useCallback } from 'react';\nimport * as THREE from 'three';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Game3D = ({\n  gameState,\n  setGameState\n}) => {\n  _s();\n  const [isInitialized, setIsInitialized] = useState(false);\n  const [isMounted, setIsMounted] = useState(false);\n  const canvasRef = useRef(null);\n  const sceneRef = useRef(null);\n  const cameraRef = useRef(null);\n  const rendererRef = useRef(null);\n  const droneRef = useRef(null);\n  const modelsRef = useRef({});\n  const animationFrameRef = useRef(null);\n\n  // Convert game coordinates to 3D coordinates\n  const gameToScene = useCallback((x, y) => {\n    return {\n      x: x - 2,\n      z: y - 2\n    };\n  }, []);\n\n  // Ensure component is mounted before initialization\n  useLayoutEffect(() => {\n    setIsMounted(true);\n    return () => setIsMounted(false);\n  }, []);\n\n  // Initialize Three.js scene\n  const initializeScene = useCallback(() => {\n    try {\n      if (!canvasRef.current || !isMounted) {\n        console.warn('Canvas element not found or component not mounted');\n        return false;\n      }\n\n      // Create scene\n      const scene = new THREE.Scene();\n      scene.background = new THREE.Color(0x87CEEB);\n\n      // Create camera with better angle\n      const camera = new THREE.PerspectiveCamera(75, 1, 0.1, 1000);\n      camera.position.set(3, 4, 3);\n      camera.lookAt(0, 0, 0);\n\n      // Create renderer with proper size\n      const renderer = new THREE.WebGLRenderer({\n        canvas: canvasRef.current,\n        antialias: true,\n        alpha: true\n      });\n      renderer.setSize(600, 600, false);\n      renderer.setPixelRatio(window.devicePixelRatio);\n\n      // Add lights\n      const ambientLight = new THREE.AmbientLight(0xffffff, 0.5);\n      scene.add(ambientLight);\n      const directionalLight = new THREE.DirectionalLight(0xffffff, 0.8);\n      directionalLight.position.set(10, 10, 5);\n      scene.add(directionalLight);\n\n      // Create ground plane\n      const groundGeometry = new THREE.PlaneGeometry(5, 5);\n      const groundMaterial = new THREE.MeshStandardMaterial({\n        color: 0x8B4513,\n        roughness: 0.8,\n        metalness: 0.2\n      });\n      const ground = new THREE.Mesh(groundGeometry, groundMaterial);\n      ground.rotation.x = -Math.PI / 2;\n      scene.add(ground);\n\n      // Create grid helper\n      const gridHelper = new THREE.GridHelper(5, 5);\n      scene.add(gridHelper);\n\n      // Create drone using basic geometry\n      const droneGeometry = new THREE.BoxGeometry(0.4, 0.2, 0.4);\n      const droneMaterial = new THREE.MeshStandardMaterial({\n        color: 0x3498db\n      });\n      const drone = new THREE.Mesh(droneGeometry, droneMaterial);\n\n      // Set initial drone position from game state\n      const initialPos = gameToScene(gameState.dronePosition.x, gameState.dronePosition.y);\n      drone.position.set(initialPos.x, 0.5, initialPos.z);\n      scene.add(drone);\n      droneRef.current = drone;\n\n      // Create crop geometries\n      const cropGeometries = {\n        wheat: new THREE.CylinderGeometry(0.1, 0.1, 0.5, 8),\n        corn: new THREE.CylinderGeometry(0.1, 0.1, 0.8, 8),\n        potato: new THREE.SphereGeometry(0.2, 8, 8)\n      };\n      const cropMaterials = {\n        wheat: new THREE.MeshStandardMaterial({\n          color: 0xF4D03F\n        }),\n        corn: new THREE.MeshStandardMaterial({\n          color: 0xF39C12\n        }),\n        potato: new THREE.MeshStandardMaterial({\n          color: 0x935116\n        })\n      };\n\n      // Create crop instances (5x5 grid)\n      const crops = {};\n      ['wheat', 'corn', 'potato'].forEach(cropType => {\n        crops[cropType] = Array(25).fill().map(() => {\n          const crop = new THREE.Mesh(cropGeometries[cropType], cropMaterials[cropType]);\n          crop.visible = false;\n          scene.add(crop);\n          return crop;\n        });\n      });\n\n      // Store references\n      sceneRef.current = scene;\n      cameraRef.current = camera;\n      rendererRef.current = renderer;\n      modelsRef.current = crops;\n      return true;\n    } catch (error) {\n      console.error('Error initializing scene:', error);\n      return false;\n    }\n  }, [isMounted, gameState.dronePosition, gameToScene]);\n\n  // Initialize and run animation\n  useEffect(() => {\n    if (!isMounted) return;\n    console.log('Initializing Game3D');\n\n    // Initialize scene if not already done\n    if (!isInitialized) {\n      const sceneInitialized = initializeScene();\n      if (!sceneInitialized) {\n        console.error('Failed to initialize scene');\n        return;\n      }\n      setIsInitialized(true);\n    }\n    console.log('Starting animation loop');\n\n    // Animation function\n    function animate() {\n      if (!droneRef.current || !sceneRef.current || !cameraRef.current || !rendererRef.current) {\n        console.warn('Required 3D objects not found');\n        return;\n      }\n\n      // Update drone position\n      const targetPos = gameToScene(gameState.dronePosition.x, gameState.dronePosition.y);\n      droneRef.current.position.x = targetPos.x;\n      droneRef.current.position.z = targetPos.z;\n\n      // Hover animation\n      droneRef.current.position.y = 0.5 + Math.sin(Date.now() * 0.002) * 0.1;\n      // Rotation animation\n      droneRef.current.rotation.y += 0.02;\n\n      // Animate crops\n      if (modelsRef.current) {\n        Object.entries(modelsRef.current).forEach(([cropType, cropInstances]) => {\n          cropInstances.forEach((crop, index) => {\n            if (crop.visible) {\n              const tile = gameState.land[index];\n              if (tile.cropState === 'growing') {\n                const scale = 0.3 + Math.sin(Date.now() * 0.001 + index) * 0.1;\n                crop.scale.set(0.5, scale, 0.5);\n              } else if (tile.cropState === 'ready') {\n                crop.rotation.y += 0.01;\n              }\n            }\n          });\n        });\n      }\n\n      // Render scene\n      rendererRef.current.render(sceneRef.current, cameraRef.current);\n\n      // Continue animation loop\n      animationFrameRef.current = requestAnimationFrame(animate);\n    }\n\n    // Start animation loop\n    animate();\n\n    // Cleanup function\n    return () => {\n      console.log('Cleaning up Game3D');\n      if (animationFrameRef.current) {\n        cancelAnimationFrame(animationFrameRef.current);\n      }\n      if (rendererRef.current) {\n        rendererRef.current.dispose();\n      }\n    };\n  }, [isMounted, isInitialized, initializeScene, gameState, gameToScene]);\n\n  // Update crop visibility and state\n  useEffect(() => {\n    if (!isInitialized || !isMounted || !modelsRef.current) return;\n    Object.entries(modelsRef.current).forEach(([cropType, cropInstances]) => {\n      cropInstances.forEach((crop, index) => {\n        const tile = gameState.land[index];\n        const x = Math.floor(index / 5);\n        const y = index % 5;\n        const pos = gameToScene(x, y);\n        if (tile.hasCrop && tile.cropType === cropType) {\n          crop.visible = true;\n          crop.position.set(pos.x, 0.25, pos.z);\n          if (tile.cropState === 'ready') {\n            crop.scale.set(1, 1, 1);\n          } else {\n            crop.scale.set(0.5, 0.5, 0.5);\n          }\n        } else {\n          crop.visible = false;\n        }\n      });\n    });\n  }, [gameState, isInitialized, isMounted, gameToScene]);\n  if (!isMounted) return null;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      width: '100%',\n      height: '100%',\n      position: 'relative'\n    },\n    children: /*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: canvasRef,\n      style: {\n        width: '100%',\n        height: '100%',\n        display: 'block'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 231,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 230,\n    columnNumber: 5\n  }, this);\n};\n_s(Game3D, \"Z2RI6CdnrFnYZCKGKGZCZAcGXak=\");\n_c = Game3D;\nexport default Game3D;\nvar _c;\n$RefreshReg$(_c, \"Game3D\");","map":{"version":3,"names":["React","useRef","useEffect","useState","useLayoutEffect","useCallback","THREE","jsxDEV","_jsxDEV","Game3D","gameState","setGameState","_s","isInitialized","setIsInitialized","isMounted","setIsMounted","canvasRef","sceneRef","cameraRef","rendererRef","droneRef","modelsRef","animationFrameRef","gameToScene","x","y","z","initializeScene","current","console","warn","scene","Scene","background","Color","camera","PerspectiveCamera","position","set","lookAt","renderer","WebGLRenderer","canvas","antialias","alpha","setSize","setPixelRatio","window","devicePixelRatio","ambientLight","AmbientLight","add","directionalLight","DirectionalLight","groundGeometry","PlaneGeometry","groundMaterial","MeshStandardMaterial","color","roughness","metalness","ground","Mesh","rotation","Math","PI","gridHelper","GridHelper","droneGeometry","BoxGeometry","droneMaterial","drone","initialPos","dronePosition","cropGeometries","wheat","CylinderGeometry","corn","potato","SphereGeometry","cropMaterials","crops","forEach","cropType","Array","fill","map","crop","visible","error","log","sceneInitialized","animate","targetPos","sin","Date","now","Object","entries","cropInstances","index","tile","land","cropState","scale","render","requestAnimationFrame","cancelAnimationFrame","dispose","floor","pos","hasCrop","style","width","height","children","ref","display","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/SPIDER/Downloads/Project/Demo GPT/Demo 1/src/components/Game3D.js"],"sourcesContent":["import React, { useRef, useEffect, useState, useLayoutEffect, useCallback } from 'react';\r\nimport * as THREE from 'three';\r\n\r\nconst Game3D = ({ gameState, setGameState }) => {\r\n  const [isInitialized, setIsInitialized] = useState(false);\r\n  const [isMounted, setIsMounted] = useState(false);\r\n  const canvasRef = useRef(null);\r\n  const sceneRef = useRef(null);\r\n  const cameraRef = useRef(null);\r\n  const rendererRef = useRef(null);\r\n  const droneRef = useRef(null);\r\n  const modelsRef = useRef({});\r\n  const animationFrameRef = useRef(null);\r\n\r\n  // Convert game coordinates to 3D coordinates\r\n  const gameToScene = useCallback((x, y) => {\r\n    return {\r\n      x: x - 2,\r\n      z: y - 2\r\n    };\r\n  }, []);\r\n\r\n  // Ensure component is mounted before initialization\r\n  useLayoutEffect(() => {\r\n    setIsMounted(true);\r\n    return () => setIsMounted(false);\r\n  }, []);\r\n\r\n  // Initialize Three.js scene\r\n  const initializeScene = useCallback(() => {\r\n    try {\r\n      if (!canvasRef.current || !isMounted) {\r\n        console.warn('Canvas element not found or component not mounted');\r\n        return false;\r\n      }\r\n\r\n      // Create scene\r\n      const scene = new THREE.Scene();\r\n      scene.background = new THREE.Color(0x87CEEB);\r\n      \r\n      // Create camera with better angle\r\n      const camera = new THREE.PerspectiveCamera(75, 1, 0.1, 1000);\r\n      camera.position.set(3, 4, 3);\r\n      camera.lookAt(0, 0, 0);\r\n      \r\n      // Create renderer with proper size\r\n      const renderer = new THREE.WebGLRenderer({ \r\n        canvas: canvasRef.current,\r\n        antialias: true,\r\n        alpha: true\r\n      });\r\n      renderer.setSize(600, 600, false);\r\n      renderer.setPixelRatio(window.devicePixelRatio);\r\n\r\n      // Add lights\r\n      const ambientLight = new THREE.AmbientLight(0xffffff, 0.5);\r\n      scene.add(ambientLight);\r\n      \r\n      const directionalLight = new THREE.DirectionalLight(0xffffff, 0.8);\r\n      directionalLight.position.set(10, 10, 5);\r\n      scene.add(directionalLight);\r\n\r\n      // Create ground plane\r\n      const groundGeometry = new THREE.PlaneGeometry(5, 5);\r\n      const groundMaterial = new THREE.MeshStandardMaterial({ \r\n        color: 0x8B4513,\r\n        roughness: 0.8,\r\n        metalness: 0.2\r\n      });\r\n      const ground = new THREE.Mesh(groundGeometry, groundMaterial);\r\n      ground.rotation.x = -Math.PI / 2;\r\n      scene.add(ground);\r\n\r\n      // Create grid helper\r\n      const gridHelper = new THREE.GridHelper(5, 5);\r\n      scene.add(gridHelper);\r\n\r\n      // Create drone using basic geometry\r\n      const droneGeometry = new THREE.BoxGeometry(0.4, 0.2, 0.4);\r\n      const droneMaterial = new THREE.MeshStandardMaterial({ color: 0x3498db });\r\n      const drone = new THREE.Mesh(droneGeometry, droneMaterial);\r\n      \r\n      // Set initial drone position from game state\r\n      const initialPos = gameToScene(gameState.dronePosition.x, gameState.dronePosition.y);\r\n      drone.position.set(initialPos.x, 0.5, initialPos.z);\r\n      scene.add(drone);\r\n      droneRef.current = drone;\r\n\r\n      // Create crop geometries\r\n      const cropGeometries = {\r\n        wheat: new THREE.CylinderGeometry(0.1, 0.1, 0.5, 8),\r\n        corn: new THREE.CylinderGeometry(0.1, 0.1, 0.8, 8),\r\n        potato: new THREE.SphereGeometry(0.2, 8, 8)\r\n      };\r\n\r\n      const cropMaterials = {\r\n        wheat: new THREE.MeshStandardMaterial({ color: 0xF4D03F }),\r\n        corn: new THREE.MeshStandardMaterial({ color: 0xF39C12 }),\r\n        potato: new THREE.MeshStandardMaterial({ color: 0x935116 })\r\n      };\r\n\r\n      // Create crop instances (5x5 grid)\r\n      const crops = {};\r\n      ['wheat', 'corn', 'potato'].forEach(cropType => {\r\n        crops[cropType] = Array(25).fill().map(() => {\r\n          const crop = new THREE.Mesh(cropGeometries[cropType], cropMaterials[cropType]);\r\n          crop.visible = false;\r\n          scene.add(crop);\r\n          return crop;\r\n        });\r\n      });\r\n\r\n      // Store references\r\n      sceneRef.current = scene;\r\n      cameraRef.current = camera;\r\n      rendererRef.current = renderer;\r\n      modelsRef.current = crops;\r\n\r\n      return true;\r\n    } catch (error) {\r\n      console.error('Error initializing scene:', error);\r\n      return false;\r\n    }\r\n  }, [isMounted, gameState.dronePosition, gameToScene]);\r\n\r\n  // Initialize and run animation\r\n  useEffect(() => {\r\n    if (!isMounted) return;\r\n\r\n    console.log('Initializing Game3D');\r\n    \r\n    // Initialize scene if not already done\r\n    if (!isInitialized) {\r\n      const sceneInitialized = initializeScene();\r\n      if (!sceneInitialized) {\r\n        console.error('Failed to initialize scene');\r\n        return;\r\n      }\r\n      setIsInitialized(true);\r\n    }\r\n\r\n    console.log('Starting animation loop');\r\n\r\n    // Animation function\r\n    function animate() {\r\n      if (!droneRef.current || !sceneRef.current || !cameraRef.current || !rendererRef.current) {\r\n        console.warn('Required 3D objects not found');\r\n        return;\r\n      }\r\n\r\n      // Update drone position\r\n      const targetPos = gameToScene(gameState.dronePosition.x, gameState.dronePosition.y);\r\n      droneRef.current.position.x = targetPos.x;\r\n      droneRef.current.position.z = targetPos.z;\r\n      \r\n      // Hover animation\r\n      droneRef.current.position.y = 0.5 + Math.sin(Date.now() * 0.002) * 0.1;\r\n      // Rotation animation\r\n      droneRef.current.rotation.y += 0.02;\r\n\r\n      // Animate crops\r\n      if (modelsRef.current) {\r\n        Object.entries(modelsRef.current).forEach(([cropType, cropInstances]) => {\r\n          cropInstances.forEach((crop, index) => {\r\n            if (crop.visible) {\r\n              const tile = gameState.land[index];\r\n              if (tile.cropState === 'growing') {\r\n                const scale = 0.3 + Math.sin(Date.now() * 0.001 + index) * 0.1;\r\n                crop.scale.set(0.5, scale, 0.5);\r\n              } else if (tile.cropState === 'ready') {\r\n                crop.rotation.y += 0.01;\r\n              }\r\n            }\r\n          });\r\n        });\r\n      }\r\n\r\n      // Render scene\r\n      rendererRef.current.render(sceneRef.current, cameraRef.current);\r\n      \r\n      // Continue animation loop\r\n      animationFrameRef.current = requestAnimationFrame(animate);\r\n    }\r\n\r\n    // Start animation loop\r\n    animate();\r\n\r\n    // Cleanup function\r\n    return () => {\r\n      console.log('Cleaning up Game3D');\r\n      if (animationFrameRef.current) {\r\n        cancelAnimationFrame(animationFrameRef.current);\r\n      }\r\n      if (rendererRef.current) {\r\n        rendererRef.current.dispose();\r\n      }\r\n    };\r\n  }, [isMounted, isInitialized, initializeScene, gameState, gameToScene]);\r\n\r\n  // Update crop visibility and state\r\n  useEffect(() => {\r\n    if (!isInitialized || !isMounted || !modelsRef.current) return;\r\n\r\n    Object.entries(modelsRef.current).forEach(([cropType, cropInstances]) => {\r\n      cropInstances.forEach((crop, index) => {\r\n        const tile = gameState.land[index];\r\n        const x = Math.floor(index / 5);\r\n        const y = index % 5;\r\n        const pos = gameToScene(x, y);\r\n\r\n        if (tile.hasCrop && tile.cropType === cropType) {\r\n          crop.visible = true;\r\n          crop.position.set(pos.x, 0.25, pos.z);\r\n          \r\n          if (tile.cropState === 'ready') {\r\n            crop.scale.set(1, 1, 1);\r\n          } else {\r\n            crop.scale.set(0.5, 0.5, 0.5);\r\n          }\r\n        } else {\r\n          crop.visible = false;\r\n        }\r\n      });\r\n    });\r\n  }, [gameState, isInitialized, isMounted, gameToScene]);\r\n\r\n  if (!isMounted) return null;\r\n\r\n  return (\r\n    <div style={{ width: '100%', height: '100%', position: 'relative' }}>\r\n      <canvas \r\n        ref={canvasRef} \r\n        style={{ \r\n          width: '100%', \r\n          height: '100%',\r\n          display: 'block'\r\n        }} \r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Game3D; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}