{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\SPIDER\\\\Downloads\\\\Project\\\\Demo GPT\\\\Demo 1\\\\src\\\\components\\\\JavaScriptConsole.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport styled from 'styled-components';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ConsoleContainer = styled.div`\n  background-color: #1e1e1e;\n  border-radius: 5px;\n  padding: 10px;\n  margin: 10px;\n  height: 300px;\n  display: flex;\n  flex-direction: column;\n`;\n_c = ConsoleContainer;\nconst ConsoleOutput = styled.div`\n  color: #ffffff;\n  font-family: monospace;\n  flex-grow: 1;\n  overflow-y: auto;\n  padding: 10px;\n  white-space: pre-wrap;\n  background-color: #2d2d2d;\n  margin-bottom: 10px;\n  border-radius: 3px;\n`;\n_c2 = ConsoleOutput;\nconst ConsoleInput = styled.textarea`\n  background-color: #2d2d2d;\n  color: #ffffff;\n  font-family: monospace;\n  border: 1px solid #3f3f3f;\n  border-radius: 3px;\n  padding: 5px;\n  resize: none;\n  height: 60px;\n`;\n_c3 = ConsoleInput;\nconst RunButton = styled.button`\n  background-color: #4CAF50;\n  color: white;\n  padding: 8px 15px;\n  border: none;\n  border-radius: 3px;\n  margin-top: 5px;\n  cursor: pointer;\n  &:hover {\n    background-color: #45a049;\n  }\n`;\nconst PlayPauseButton = styled.button`\n  background-color: #4CAF50;\n  color: white;\n  padding: 8px 15px;\n  border: none;\n  border-radius: 3px;\n  margin-top: 5px;\n  cursor: pointer;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 40px;\n  height: 40px;\n  \n  &:hover {\n    background-color: #45a049;\n  }\n  \n  &:disabled {\n    background-color: #95a5a6;\n    cursor: not-allowed;\n  }\n`;\n_c4 = PlayPauseButton;\nconst PlayIcon = styled.span`\n  display: inline-block;\n  width: 0;\n  height: 0;\n  border-style: solid;\n  border-width: 10px 0 10px 15px;\n  border-color: transparent transparent transparent white;\n  margin-left: 3px;\n`;\n_c5 = PlayIcon;\nconst PauseIcon = styled.span`\n  display: flex;\n  gap: 3px;\n  \n  &::before,\n  &::after {\n    content: '';\n    width: 5px;\n    height: 20px;\n    background-color: white;\n  }\n`;\n\n// Store console states globally\n_c6 = PauseIcon;\nconst consoleStates = {};\nfunction JavaScriptConsole({\n  gameState,\n  setGameState,\n  consoleId\n}) {\n  _s();\n  const [input, setInput] = useState('');\n  const [output, setOutput] = useState('🌟 Welcome to the JavaScript Console! 🌟\\n\\n' + '📝 Basic Commands:\\n' + '  • move(x, y)         - Move to coordinates (x,y)\\n' + '  • scan()             - Get info about current tile\\n' + '  • position()         - Get current coordinates\\n\\n' + '🚜 Farming Commands:\\n' + '  • plow()            - Plow the current tile\\n' + '  • plant(\"crop\")     - Plant a crop (wheat unlocked, others in Tech Tree)\\n' + '  • harvest()         - Harvest ready crop at current tile\\n\\n' + '🏗️ Farm Management:\\n' + '  • expand()          - Expand farm size (max 5x5)\\n' + '  • sell(\"type\", amount) - Sell harvested crops\\n' + '  • buy(\"type\", amount)  - Buy seeds for planting\\n\\n' + '💡 Tips:\\n' + '  • Start with expand() to increase farm size\\n' + '  • Use scan() to check tile status\\n' + '  • Crops must be planted on plowed land\\n' + '  • Unlock more crops in the Tech Tree\\n' + '  • Buy seeds before planting\\n\\n' + '⌨️ Usage:\\n' + '  • Type your code and press Play (▶) or Ctrl+Enter\\n' + '  • Each command runs once when executed\\n' + '  • Multiple commands can be entered on separate lines\\n\\n');\n  const [farm, setFarm] = useState(null);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [currentLine, setCurrentLine] = useState(0);\n  const codeLines = useRef([]);\n  const executionInterval = useRef(null);\n\n  // Initialize or restore console state\n  useEffect(() => {\n    if (!consoleStates[consoleId]) {\n      consoleStates[consoleId] = {\n        input: '',\n        output: output,\n        farm: null,\n        isPlaying: false,\n        currentLine: 0\n      };\n    } else {\n      setInput(consoleStates[consoleId].input);\n      setOutput(consoleStates[consoleId].output);\n      setFarm(consoleStates[consoleId].farm);\n      setIsPlaying(consoleStates[consoleId].isPlaying);\n      setCurrentLine(consoleStates[consoleId].currentLine);\n    }\n\n    // Initialize farm when component mounts\n    const newFarm = {\n      money: gameState.money,\n      inventory: gameState.inventory,\n      land: gameState.land,\n      size: Math.sqrt(gameState.land.length),\n      maxSize: 5,\n      drone: gameState.drone,\n      expand: function () {\n        if (this.size >= this.maxSize) {\n          this.print(`Farm is already at maximum size (${this.maxSize}x${this.maxSize})`);\n          return false;\n        }\n        const newSize = this.size + 1;\n        const newLand = Array(newSize * newSize).fill().map((_, index) => {\n          if (index < this.land.length) {\n            return this.land[index];\n          }\n          return {\n            isPlowed: false,\n            hasCrop: false,\n            cropType: null,\n            cropState: null,\n            plantedTime: null\n          };\n        });\n        setGameState(prev => ({\n          ...prev,\n          land: newLand\n        }));\n        this.land = newLand;\n        this.size = newSize;\n        this.print(`Farm expanded to ${newSize}x${newSize}`);\n        return true;\n      },\n      move: function (x, y) {\n        if (0 <= x && x < this.size && 0 <= y && y < this.size) {\n          setGameState(prev => ({\n            ...prev,\n            dronePosition: {\n              x,\n              y\n            },\n            drone: {\n              x,\n              y\n            }\n          }));\n          this.drone = {\n            x,\n            y\n          };\n          this.print(`Moved to (${x}, ${y})`);\n          return true;\n        }\n        this.print(\"Invalid coordinates\");\n        return false;\n      },\n      plow: function () {\n        const x = this.drone.x;\n        const y = this.drone.y;\n        const index = y * this.size + x;\n        if (this.land[index].isPlowed) {\n          this.print(\"This tile is already plowed\");\n          return false;\n        }\n        const newLand = [...this.land];\n        newLand[index] = {\n          ...newLand[index],\n          isPlowed: true\n        };\n        setGameState(prev => ({\n          ...prev,\n          land: newLand\n        }));\n        this.land = newLand;\n        this.print(`Successfully plowed tile at (${x}, ${y})`);\n        return true;\n      },\n      plant: function (cropType) {\n        const x = this.drone.x;\n        const y = this.drone.y;\n        const index = y * this.size + x;\n\n        // Check if crop is unlocked\n        if (!gameState.unlockedCrops.includes(cropType)) {\n          this.print(`Cannot plant ${cropType} - You need to unlock it first in the Tech Tree!`);\n          return false;\n        }\n\n        // Check if we have seeds\n        if (!this.inventory[`${cropType}_seeds`] || this.inventory[`${cropType}_seeds`] <= 0) {\n          this.print(`Cannot plant ${cropType} - No seeds available!`);\n          return false;\n        }\n        if (this.land[index].isPlowed && !this.land[index].hasCrop) {\n          const newLand = [...this.land];\n          newLand[index] = {\n            ...newLand[index],\n            hasCrop: true,\n            cropType: cropType,\n            cropState: 'growing',\n            plantedTime: Date.now()\n          };\n\n          // Deduct one seed when planting\n          const newInventory = {\n            ...this.inventory,\n            [`${cropType}_seeds`]: this.inventory[`${cropType}_seeds`] - 1\n          };\n          setGameState(prev => ({\n            ...prev,\n            land: newLand,\n            inventory: newInventory\n          }));\n          this.land = newLand;\n          this.inventory = newInventory;\n          this.print(`Successfully planted ${cropType} at (${x}, ${y})`);\n          return true;\n        }\n        this.print(`Failed to plant ${cropType} - Make sure the tile is plowed and empty`);\n        return false;\n      },\n      harvest: function () {\n        const x = this.drone.x;\n        const y = this.drone.y;\n        const index = y * this.size + x;\n        if (this.land[index].hasCrop && this.land[index].cropState === 'ready') {\n          const cropType = this.land[index].cropType;\n          const newLand = [...this.land];\n          newLand[index] = {\n            ...newLand[index],\n            hasCrop: false,\n            cropType: null,\n            cropState: null,\n            plantedTime: null\n          };\n          const newInventory = {\n            ...this.inventory,\n            [cropType]: (this.inventory[cropType] || 0) + 1\n          };\n          setGameState(prev => ({\n            ...prev,\n            land: newLand,\n            inventory: newInventory\n          }));\n          this.land = newLand;\n          this.inventory = newInventory;\n          this.print(`Successfully harvested ${cropType} at (${x}, ${y})`);\n          return true;\n        }\n        this.print(`Failed to harvest - No ready crop at (${x}, ${y})`);\n        return false;\n      },\n      scan: function () {\n        const x = this.drone.x;\n        const y = this.drone.y;\n        const index = y * this.size + x;\n        const tile = this.land[index];\n        let status = \"empty\";\n        if (tile.isPlowed) {\n          status = \"plowed\";\n        }\n        if (tile.hasCrop) {\n          status = `${tile.cropState} ${tile.cropType}`;\n        }\n        this.print(`Scan results at (${x}, ${y}): ${status}`);\n        return status;\n      },\n      position: function () {\n        return {\n          x: this.drone.x,\n          y: this.drone.y\n        };\n      },\n      sell: function (cropType, amount) {\n        const available = this.inventory[cropType] || 0;\n        if (available >= amount) {\n          const prices = {\n            wheat: 20,\n            corn: 30,\n            potato: 40\n          };\n          const price = prices[cropType] || 0;\n          const newMoney = this.money + price * amount;\n          const newInventory = {\n            ...this.inventory,\n            [cropType]: this.inventory[cropType] - amount\n          };\n          setGameState(prev => ({\n            ...prev,\n            money: newMoney,\n            inventory: newInventory\n          }));\n          this.money = newMoney;\n          this.inventory = newInventory;\n          this.print(`Successfully sold ${amount} ${cropType}`);\n          return true;\n        }\n        this.print(`Failed to sell ${amount} ${cropType}`);\n        return false;\n      },\n      buy: function (cropType, amount) {\n        const prices = {\n          wheat: 10,\n          corn: 15,\n          potato: 20\n        };\n        const price = (prices[cropType] || 0) * amount;\n        if (this.money >= price) {\n          const newMoney = this.money - price;\n          const newInventory = {\n            ...this.inventory,\n            [`${cropType}_seeds`]: (this.inventory[`${cropType}_seeds`] || 0) + amount\n          };\n          setGameState(prev => ({\n            ...prev,\n            money: newMoney,\n            inventory: newInventory\n          }));\n          this.money = newMoney;\n          this.inventory = newInventory;\n          this.print(`Successfully bought ${amount} ${cropType} seeds`);\n          return true;\n        }\n        this.print(`Failed to buy ${amount} ${cropType} seeds`);\n        return false;\n      },\n      print: function (text) {\n        setOutput(prev => prev + text + '\\n');\n      },\n      toString: function () {\n        return `Farm(money=$${this.money}, size=${this.size}x${this.size}, inventory=${JSON.stringify(this.inventory)})`;\n      }\n    };\n    setFarm(newFarm);\n    setOutput(prev => prev + `Farm initialized: ${newFarm.toString()}\\n`);\n  }, [gameState, setGameState, consoleId]);\n\n  // Save console state when it changes\n  useEffect(() => {\n    consoleStates[consoleId] = {\n      input,\n      output,\n      farm,\n      isPlaying,\n      currentLine\n    };\n  }, [input, output, farm, isPlaying, currentLine, consoleId]);\n  const handleKeyDown = e => {\n    if (e.key === 'Enter' && e.ctrlKey) {\n      e.preventDefault();\n      togglePlayPause();\n    }\n  };\n  const executeLine = line => {\n    if (!farm) return;\n    try {\n      setOutput(prev => prev + '\\n>>> ' + line + '\\n');\n\n      // Create a function that returns a Promise to handle async operations\n      const executeCode = new Function('farm', `\n        return new Promise((resolve, reject) => {\n          try {\n            const result = eval(${JSON.stringify(line)});\n            if (result instanceof Promise) {\n              result.then(resolve).catch(reject);\n            } else {\n              resolve(result);\n            }\n          } catch (error) {\n            farm.print('Error: ' + error.message);\n            reject(error);\n          }\n        });\n      `);\n      return executeCode(farm);\n    } catch (error) {\n      setOutput(prev => prev + 'Error: ' + error.message + '\\n');\n      return Promise.reject(error);\n    }\n  };\n  const togglePlayPause = async () => {\n    if (!input.trim() || !farm) return;\n    if (!isPlaying) {\n      // Start playing\n      setIsPlaying(true);\n      try {\n        // Execute the entire code at once\n        const result = await executeLine(input);\n        if (result !== undefined) {\n          setOutput(prev => prev + result + '\\n');\n        }\n      } catch (error) {\n        console.error('Execution error:', error);\n      } finally {\n        setIsPlaying(false);\n      }\n    }\n  };\n\n  // Cleanup interval on unmount\n  useEffect(() => {\n    return () => {\n      if (executionInterval.current) {\n        clearInterval(executionInterval.current);\n      }\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(ConsoleContainer, {\n    children: [/*#__PURE__*/_jsxDEV(ConsoleOutput, {\n      children: output\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 455,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ConsoleInput, {\n      value: input,\n      onChange: e => setInput(e.target.value),\n      onKeyDown: handleKeyDown,\n      placeholder: \"Enter JavaScript code here...\",\n      disabled: !farm || isPlaying\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 458,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(PlayPauseButton, {\n      onClick: togglePlayPause,\n      disabled: !farm || !input.trim(),\n      children: isPlaying ? /*#__PURE__*/_jsxDEV(PauseIcon, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 469,\n        columnNumber: 22\n      }, this) : /*#__PURE__*/_jsxDEV(PlayIcon, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 469,\n        columnNumber: 38\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 465,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 454,\n    columnNumber: 5\n  }, this);\n}\n_s(JavaScriptConsole, \"tyNaCznkGBjhRB4NuwQmYHFnmak=\");\n_c7 = JavaScriptConsole;\nexport default JavaScriptConsole;\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7;\n$RefreshReg$(_c, \"ConsoleContainer\");\n$RefreshReg$(_c2, \"ConsoleOutput\");\n$RefreshReg$(_c3, \"ConsoleInput\");\n$RefreshReg$(_c4, \"PlayPauseButton\");\n$RefreshReg$(_c5, \"PlayIcon\");\n$RefreshReg$(_c6, \"PauseIcon\");\n$RefreshReg$(_c7, \"JavaScriptConsole\");","map":{"version":3,"names":["React","useState","useEffect","useRef","styled","jsxDEV","_jsxDEV","ConsoleContainer","div","_c","ConsoleOutput","_c2","ConsoleInput","textarea","_c3","RunButton","button","PlayPauseButton","_c4","PlayIcon","span","_c5","PauseIcon","_c6","consoleStates","JavaScriptConsole","gameState","setGameState","consoleId","_s","input","setInput","output","setOutput","farm","setFarm","isPlaying","setIsPlaying","currentLine","setCurrentLine","codeLines","executionInterval","newFarm","money","inventory","land","size","Math","sqrt","length","maxSize","drone","expand","print","newSize","newLand","Array","fill","map","_","index","isPlowed","hasCrop","cropType","cropState","plantedTime","prev","move","x","y","dronePosition","plow","plant","unlockedCrops","includes","Date","now","newInventory","harvest","scan","tile","status","position","sell","amount","available","prices","wheat","corn","potato","price","newMoney","buy","text","toString","JSON","stringify","handleKeyDown","e","key","ctrlKey","preventDefault","togglePlayPause","executeLine","line","executeCode","Function","error","message","Promise","reject","trim","result","undefined","console","current","clearInterval","children","fileName","_jsxFileName","lineNumber","columnNumber","value","onChange","target","onKeyDown","placeholder","disabled","onClick","_c7","$RefreshReg$"],"sources":["C:/Users/SPIDER/Downloads/Project/Demo GPT/Demo 1/src/components/JavaScriptConsole.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst ConsoleContainer = styled.div`\r\n  background-color: #1e1e1e;\r\n  border-radius: 5px;\r\n  padding: 10px;\r\n  margin: 10px;\r\n  height: 300px;\r\n  display: flex;\r\n  flex-direction: column;\r\n`;\r\n\r\nconst ConsoleOutput = styled.div`\r\n  color: #ffffff;\r\n  font-family: monospace;\r\n  flex-grow: 1;\r\n  overflow-y: auto;\r\n  padding: 10px;\r\n  white-space: pre-wrap;\r\n  background-color: #2d2d2d;\r\n  margin-bottom: 10px;\r\n  border-radius: 3px;\r\n`;\r\n\r\nconst ConsoleInput = styled.textarea`\r\n  background-color: #2d2d2d;\r\n  color: #ffffff;\r\n  font-family: monospace;\r\n  border: 1px solid #3f3f3f;\r\n  border-radius: 3px;\r\n  padding: 5px;\r\n  resize: none;\r\n  height: 60px;\r\n`;\r\n\r\nconst RunButton = styled.button`\r\n  background-color: #4CAF50;\r\n  color: white;\r\n  padding: 8px 15px;\r\n  border: none;\r\n  border-radius: 3px;\r\n  margin-top: 5px;\r\n  cursor: pointer;\r\n  &:hover {\r\n    background-color: #45a049;\r\n  }\r\n`;\r\n\r\nconst PlayPauseButton = styled.button`\r\n  background-color: #4CAF50;\r\n  color: white;\r\n  padding: 8px 15px;\r\n  border: none;\r\n  border-radius: 3px;\r\n  margin-top: 5px;\r\n  cursor: pointer;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  width: 40px;\r\n  height: 40px;\r\n  \r\n  &:hover {\r\n    background-color: #45a049;\r\n  }\r\n  \r\n  &:disabled {\r\n    background-color: #95a5a6;\r\n    cursor: not-allowed;\r\n  }\r\n`;\r\n\r\nconst PlayIcon = styled.span`\r\n  display: inline-block;\r\n  width: 0;\r\n  height: 0;\r\n  border-style: solid;\r\n  border-width: 10px 0 10px 15px;\r\n  border-color: transparent transparent transparent white;\r\n  margin-left: 3px;\r\n`;\r\n\r\nconst PauseIcon = styled.span`\r\n  display: flex;\r\n  gap: 3px;\r\n  \r\n  &::before,\r\n  &::after {\r\n    content: '';\r\n    width: 5px;\r\n    height: 20px;\r\n    background-color: white;\r\n  }\r\n`;\r\n\r\n// Store console states globally\r\nconst consoleStates = {};\r\n\r\nfunction JavaScriptConsole({ gameState, setGameState, consoleId }) {\r\n  const [input, setInput] = useState('');\r\n  const [output, setOutput] = useState(\r\n    '🌟 Welcome to the JavaScript Console! 🌟\\n\\n' +\r\n    '📝 Basic Commands:\\n' +\r\n    '  • move(x, y)         - Move to coordinates (x,y)\\n' +\r\n    '  • scan()             - Get info about current tile\\n' +\r\n    '  • position()         - Get current coordinates\\n\\n' +\r\n    '🚜 Farming Commands:\\n' +\r\n    '  • plow()            - Plow the current tile\\n' +\r\n    '  • plant(\"crop\")     - Plant a crop (wheat unlocked, others in Tech Tree)\\n' +\r\n    '  • harvest()         - Harvest ready crop at current tile\\n\\n' +\r\n    '🏗️ Farm Management:\\n' +\r\n    '  • expand()          - Expand farm size (max 5x5)\\n' +\r\n    '  • sell(\"type\", amount) - Sell harvested crops\\n' +\r\n    '  • buy(\"type\", amount)  - Buy seeds for planting\\n\\n' +\r\n    '💡 Tips:\\n' +\r\n    '  • Start with expand() to increase farm size\\n' +\r\n    '  • Use scan() to check tile status\\n' +\r\n    '  • Crops must be planted on plowed land\\n' +\r\n    '  • Unlock more crops in the Tech Tree\\n' +\r\n    '  • Buy seeds before planting\\n\\n' +\r\n    '⌨️ Usage:\\n' +\r\n    '  • Type your code and press Play (▶) or Ctrl+Enter\\n' +\r\n    '  • Each command runs once when executed\\n' +\r\n    '  • Multiple commands can be entered on separate lines\\n\\n'\r\n  );\r\n  const [farm, setFarm] = useState(null);\r\n  const [isPlaying, setIsPlaying] = useState(false);\r\n  const [currentLine, setCurrentLine] = useState(0);\r\n  const codeLines = useRef([]);\r\n  const executionInterval = useRef(null);\r\n\r\n  // Initialize or restore console state\r\n  useEffect(() => {\r\n    if (!consoleStates[consoleId]) {\r\n      consoleStates[consoleId] = {\r\n        input: '',\r\n        output: output,\r\n        farm: null,\r\n        isPlaying: false,\r\n        currentLine: 0\r\n      };\r\n    } else {\r\n      setInput(consoleStates[consoleId].input);\r\n      setOutput(consoleStates[consoleId].output);\r\n      setFarm(consoleStates[consoleId].farm);\r\n      setIsPlaying(consoleStates[consoleId].isPlaying);\r\n      setCurrentLine(consoleStates[consoleId].currentLine);\r\n    }\r\n\r\n    // Initialize farm when component mounts\r\n    const newFarm = {\r\n      money: gameState.money,\r\n      inventory: gameState.inventory,\r\n      land: gameState.land,\r\n      size: Math.sqrt(gameState.land.length),\r\n      maxSize: 5,\r\n      drone: gameState.drone,\r\n      \r\n      expand: function() {\r\n        if (this.size >= this.maxSize) {\r\n          this.print(`Farm is already at maximum size (${this.maxSize}x${this.maxSize})`);\r\n          return false;\r\n        }\r\n\r\n        const newSize = this.size + 1;\r\n        const newLand = Array(newSize * newSize).fill().map((_, index) => {\r\n          if (index < this.land.length) {\r\n            return this.land[index];\r\n          }\r\n          return {\r\n            isPlowed: false,\r\n            hasCrop: false,\r\n            cropType: null,\r\n            cropState: null,\r\n            plantedTime: null\r\n          };\r\n        });\r\n\r\n        setGameState(prev => ({ ...prev, land: newLand }));\r\n        this.land = newLand;\r\n        this.size = newSize;\r\n        this.print(`Farm expanded to ${newSize}x${newSize}`);\r\n        return true;\r\n      },\r\n      \r\n      move: function(x, y) {\r\n        if (0 <= x && x < this.size && 0 <= y && y < this.size) {\r\n          setGameState(prev => ({\r\n            ...prev,\r\n            dronePosition: { x, y },\r\n            drone: { x, y }\r\n          }));\r\n          this.drone = { x, y };\r\n          this.print(`Moved to (${x}, ${y})`);\r\n          return true;\r\n        }\r\n        this.print(\"Invalid coordinates\");\r\n        return false;\r\n      },\r\n\r\n      plow: function() {\r\n        const x = this.drone.x;\r\n        const y = this.drone.y;\r\n        const index = y * this.size + x;\r\n        if (this.land[index].isPlowed) {\r\n          this.print(\"This tile is already plowed\");\r\n          return false;\r\n        }\r\n        const newLand = [...this.land];\r\n        newLand[index] = { ...newLand[index], isPlowed: true };\r\n        setGameState(prev => ({ ...prev, land: newLand }));\r\n        this.land = newLand;\r\n        this.print(`Successfully plowed tile at (${x}, ${y})`);\r\n        return true;\r\n      },\r\n\r\n      plant: function(cropType) {\r\n        const x = this.drone.x;\r\n        const y = this.drone.y;\r\n        const index = y * this.size + x;\r\n        \r\n        // Check if crop is unlocked\r\n        if (!gameState.unlockedCrops.includes(cropType)) {\r\n          this.print(`Cannot plant ${cropType} - You need to unlock it first in the Tech Tree!`);\r\n          return false;\r\n        }\r\n        \r\n        // Check if we have seeds\r\n        if (!this.inventory[`${cropType}_seeds`] || this.inventory[`${cropType}_seeds`] <= 0) {\r\n          this.print(`Cannot plant ${cropType} - No seeds available!`);\r\n          return false;\r\n        }\r\n\r\n        if (this.land[index].isPlowed && !this.land[index].hasCrop) {\r\n          const newLand = [...this.land];\r\n          newLand[index] = {\r\n            ...newLand[index],\r\n            hasCrop: true,\r\n            cropType: cropType,\r\n            cropState: 'growing',\r\n            plantedTime: Date.now()\r\n          };\r\n          \r\n          // Deduct one seed when planting\r\n          const newInventory = {\r\n            ...this.inventory,\r\n            [`${cropType}_seeds`]: this.inventory[`${cropType}_seeds`] - 1\r\n          };\r\n          \r\n          setGameState(prev => ({\r\n            ...prev,\r\n            land: newLand,\r\n            inventory: newInventory\r\n          }));\r\n          \r\n          this.land = newLand;\r\n          this.inventory = newInventory;\r\n          this.print(`Successfully planted ${cropType} at (${x}, ${y})`);\r\n          return true;\r\n        }\r\n        \r\n        this.print(`Failed to plant ${cropType} - Make sure the tile is plowed and empty`);\r\n        return false;\r\n      },\r\n\r\n      harvest: function() {\r\n        const x = this.drone.x;\r\n        const y = this.drone.y;\r\n        const index = y * this.size + x;\r\n        \r\n        if (this.land[index].hasCrop && this.land[index].cropState === 'ready') {\r\n          const cropType = this.land[index].cropType;\r\n          const newLand = [...this.land];\r\n          newLand[index] = {\r\n            ...newLand[index],\r\n            hasCrop: false,\r\n            cropType: null,\r\n            cropState: null,\r\n            plantedTime: null\r\n          };\r\n          const newInventory = { ...this.inventory, [cropType]: (this.inventory[cropType] || 0) + 1 };\r\n          setGameState(prev => ({\r\n            ...prev,\r\n            land: newLand,\r\n            inventory: newInventory\r\n          }));\r\n          this.land = newLand;\r\n          this.inventory = newInventory;\r\n          this.print(`Successfully harvested ${cropType} at (${x}, ${y})`);\r\n          return true;\r\n        }\r\n        this.print(`Failed to harvest - No ready crop at (${x}, ${y})`);\r\n        return false;\r\n      },\r\n\r\n      scan: function() {\r\n        const x = this.drone.x;\r\n        const y = this.drone.y;\r\n        const index = y * this.size + x;\r\n        const tile = this.land[index];\r\n        \r\n        let status = \"empty\";\r\n        if (tile.isPlowed) {\r\n          status = \"plowed\";\r\n        }\r\n        if (tile.hasCrop) {\r\n          status = `${tile.cropState} ${tile.cropType}`;\r\n        }\r\n        \r\n        this.print(`Scan results at (${x}, ${y}): ${status}`);\r\n        return status;\r\n      },\r\n\r\n      position: function() {\r\n        return { x: this.drone.x, y: this.drone.y };\r\n      },\r\n      \r\n      sell: function(cropType, amount) {\r\n        const available = this.inventory[cropType] || 0;\r\n        if (available >= amount) {\r\n          const prices = { wheat: 20, corn: 30, potato: 40 };\r\n          const price = prices[cropType] || 0;\r\n          const newMoney = this.money + (price * amount);\r\n          const newInventory = { ...this.inventory, [cropType]: this.inventory[cropType] - amount };\r\n          setGameState(prev => ({\r\n            ...prev,\r\n            money: newMoney,\r\n            inventory: newInventory\r\n          }));\r\n          this.money = newMoney;\r\n          this.inventory = newInventory;\r\n          this.print(`Successfully sold ${amount} ${cropType}`);\r\n          return true;\r\n        }\r\n        this.print(`Failed to sell ${amount} ${cropType}`);\r\n        return false;\r\n      },\r\n      \r\n      buy: function(cropType, amount) {\r\n        const prices = { wheat: 10, corn: 15, potato: 20 };\r\n        const price = (prices[cropType] || 0) * amount;\r\n        if (this.money >= price) {\r\n          const newMoney = this.money - price;\r\n          const newInventory = {\r\n            ...this.inventory,\r\n            [`${cropType}_seeds`]: (this.inventory[`${cropType}_seeds`] || 0) + amount\r\n          };\r\n          setGameState(prev => ({\r\n            ...prev,\r\n            money: newMoney,\r\n            inventory: newInventory\r\n          }));\r\n          this.money = newMoney;\r\n          this.inventory = newInventory;\r\n          this.print(`Successfully bought ${amount} ${cropType} seeds`);\r\n          return true;\r\n        }\r\n        this.print(`Failed to buy ${amount} ${cropType} seeds`);\r\n        return false;\r\n      },\r\n      \r\n      print: function(text) {\r\n        setOutput(prev => prev + text + '\\n');\r\n      },\r\n      \r\n      toString: function() {\r\n        return `Farm(money=$${this.money}, size=${this.size}x${this.size}, inventory=${JSON.stringify(this.inventory)})`;\r\n      }\r\n    };\r\n    \r\n    setFarm(newFarm);\r\n    setOutput(prev => prev + `Farm initialized: ${newFarm.toString()}\\n`);\r\n  }, [gameState, setGameState, consoleId]);\r\n\r\n  // Save console state when it changes\r\n  useEffect(() => {\r\n    consoleStates[consoleId] = {\r\n      input,\r\n      output,\r\n      farm,\r\n      isPlaying,\r\n      currentLine\r\n    };\r\n  }, [input, output, farm, isPlaying, currentLine, consoleId]);\r\n\r\n  const handleKeyDown = (e) => {\r\n    if (e.key === 'Enter' && e.ctrlKey) {\r\n      e.preventDefault();\r\n      togglePlayPause();\r\n    }\r\n  };\r\n\r\n  const executeLine = (line) => {\r\n    if (!farm) return;\r\n\r\n    try {\r\n      setOutput(prev => prev + '\\n>>> ' + line + '\\n');\r\n\r\n      // Create a function that returns a Promise to handle async operations\r\n      const executeCode = new Function('farm', `\r\n        return new Promise((resolve, reject) => {\r\n          try {\r\n            const result = eval(${JSON.stringify(line)});\r\n            if (result instanceof Promise) {\r\n              result.then(resolve).catch(reject);\r\n            } else {\r\n              resolve(result);\r\n            }\r\n          } catch (error) {\r\n            farm.print('Error: ' + error.message);\r\n            reject(error);\r\n          }\r\n        });\r\n      `);\r\n\r\n      return executeCode(farm);\r\n    } catch (error) {\r\n      setOutput(prev => prev + 'Error: ' + error.message + '\\n');\r\n      return Promise.reject(error);\r\n    }\r\n  };\r\n\r\n  const togglePlayPause = async () => {\r\n    if (!input.trim() || !farm) return;\r\n\r\n    if (!isPlaying) {\r\n      // Start playing\r\n      setIsPlaying(true);\r\n      try {\r\n        // Execute the entire code at once\r\n        const result = await executeLine(input);\r\n        if (result !== undefined) {\r\n          setOutput(prev => prev + result + '\\n');\r\n        }\r\n      } catch (error) {\r\n        console.error('Execution error:', error);\r\n      } finally {\r\n        setIsPlaying(false);\r\n      }\r\n    }\r\n  };\r\n\r\n  // Cleanup interval on unmount\r\n  useEffect(() => {\r\n    return () => {\r\n      if (executionInterval.current) {\r\n        clearInterval(executionInterval.current);\r\n      }\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <ConsoleContainer>\r\n      <ConsoleOutput>\r\n        {output}\r\n      </ConsoleOutput>\r\n      <ConsoleInput\r\n        value={input}\r\n        onChange={(e) => setInput(e.target.value)}\r\n        onKeyDown={handleKeyDown}\r\n        placeholder=\"Enter JavaScript code here...\"\r\n        disabled={!farm || isPlaying}\r\n      />\r\n      <PlayPauseButton \r\n        onClick={togglePlayPause} \r\n        disabled={!farm || !input.trim()}\r\n      >\r\n        {isPlaying ? <PauseIcon /> : <PlayIcon />}\r\n      </PlayPauseButton>\r\n    </ConsoleContainer>\r\n  );\r\n}\r\n\r\nexport default JavaScriptConsole; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}