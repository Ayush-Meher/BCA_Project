{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\SPIDER\\\\Downloads\\\\Project\\\\Demo GPT\\\\Demo 1\\\\src\\\\components\\\\Game3D.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect } from 'react';\nimport * as THREE from 'three';\nimport { OrbitControls } from 'three/addons/controls/OrbitControls.js';\nimport { GLTFLoader } from 'three/addons/loaders/GLTFLoader.js';\nimport { OBJLoader } from 'three/addons/loaders/OBJLoader.js';\nimport { EffectComposer } from 'three/addons/postprocessing/EffectComposer.js';\nimport { RenderPass } from 'three/addons/postprocessing/RenderPass.js';\nimport { UnrealBloomPass } from 'three/addons/postprocessing/UnrealBloomPass.js';\nimport { SMAAPass } from 'three/addons/postprocessing/SMAAPass.js';\nimport { Sky } from 'three/addons/objects/Sky.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Game3D = ({\n  gameState\n}) => {\n  _s();\n  const canvasRef = useRef(null);\n  const sceneRef = useRef(null);\n  const droneRef = useRef(null);\n  const composerRef = useRef(null);\n  const modelsRef = useRef({});\n  const texturesRef = useRef({});\n\n  // Convert game coordinates to scene coordinates\n  const gameToScene = React.useCallback((x, y) => {\n    const size = Math.sqrt(gameState.land.length);\n    const offset = (size - 1) / 2;\n    return {\n      x: x - offset,\n      z: y - offset\n    };\n  }, [gameState.land.length]);\n\n  // Calculate camera position based on grid size\n  const calculateCameraPosition = () => {\n    const size = Math.sqrt(gameState.land.length);\n    const distance = 2 + size * 1.5; // Base distance that scales with grid size\n    const height = 3 + size * 1.2; // Base height that scales with grid size\n    return {\n      position: new THREE.Vector3(distance, height, distance),\n      target: new THREE.Vector3(0, 0, 0)\n    };\n  };\n\n  // Load textures\n  const loadTextures = async () => {\n    const textureLoader = new THREE.TextureLoader();\n    const loadTexture = url => new Promise((resolve, reject) => {\n      textureLoader.load(url, resolve, undefined, reject);\n    });\n    try {\n      texturesRef.current = {\n        grass: {\n          diffuse: await loadTexture('/textures/grass.jpg')\n        },\n        soil: {\n          diffuse: await loadTexture('/textures/plowed_soil.jpg')\n        }\n      };\n\n      // Configure texture properties\n      Object.values(texturesRef.current).forEach(textures => {\n        Object.values(textures).forEach(texture => {\n          texture.wrapS = texture.wrapT = THREE.RepeatWrapping;\n          texture.repeat.set(2, 2);\n        });\n      });\n    } catch (error) {\n      console.error('Error loading textures:', error);\n    }\n  };\n\n  // Load models\n  const loadModels = async () => {\n    const gltfLoader = new GLTFLoader();\n    const objLoader = new OBJLoader();\n    const loadGLTF = url => new Promise((resolve, reject) => {\n      gltfLoader.load(url, resolve, undefined, reject);\n    });\n    const loadOBJ = url => new Promise((resolve, reject) => {\n      objLoader.load(url, resolve, undefined, reject);\n    });\n    try {\n      // Load drone model\n      const droneModel = await loadGLTF('/models/drone.glb');\n      modelsRef.current.drone = droneModel.scene;\n\n      // Load crop models\n      modelsRef.current.wheat = await loadOBJ('/models/wheat.obj');\n      modelsRef.current.corn = await loadOBJ('/models/corn.obj');\n      modelsRef.current.potato = await loadOBJ('/models/potato.obj');\n\n      // Configure models\n      Object.values(modelsRef.current).forEach(model => {\n        model.traverse(child => {\n          if (child.isMesh) {\n            child.castShadow = true;\n            child.receiveShadow = true;\n          }\n        });\n      });\n    } catch (error) {\n      console.error('Error loading models:', error);\n    }\n  };\n\n  // Create environment map\n  const createEnvironmentMap = renderer => {\n    const pmremGenerator = new THREE.PMREMGenerator(renderer);\n    pmremGenerator.compileEquirectangularShader();\n    const sky = new Sky();\n    sky.scale.setScalar(450000);\n    const sun = new THREE.Vector3();\n    const uniforms = sky.material.uniforms;\n    uniforms['turbidity'].value = 10;\n    uniforms['rayleigh'].value = 3;\n    uniforms['mieCoefficient'].value = 0.005;\n    uniforms['mieDirectionalG'].value = 0.7;\n    const phi = THREE.MathUtils.degToRad(90 - 2);\n    const theta = THREE.MathUtils.degToRad(180);\n    sun.setFromSphericalCoords(1, phi, theta);\n    uniforms['sunPosition'].value.copy(sun);\n    const renderTarget = pmremGenerator.fromScene(sky);\n    pmremGenerator.dispose();\n    return renderTarget.texture;\n  };\n\n  // Create fallback drone model\n  const createFallbackDrone = () => {\n    const droneGroup = new THREE.Group();\n\n    // Drone body\n    const bodyGeometry = new THREE.BoxGeometry(0.4, 0.1, 0.4);\n    const bodyMaterial = new THREE.MeshStandardMaterial({\n      color: 0x3498db,\n      metalness: 0.8,\n      roughness: 0.2\n    });\n    const body = new THREE.Mesh(bodyGeometry, bodyMaterial);\n    body.castShadow = true;\n    droneGroup.add(body);\n\n    // Drone arms\n    const armGeometry = new THREE.CylinderGeometry(0.02, 0.02, 0.3);\n    const armMaterial = new THREE.MeshStandardMaterial({\n      color: 0x2c3e50,\n      metalness: 0.5,\n      roughness: 0.5\n    });\n\n    // Create four arms\n    for (let i = 0; i < 4; i++) {\n      const arm = new THREE.Mesh(armGeometry, armMaterial);\n      arm.position.y = 0.05;\n      arm.rotation.z = Math.PI / 2;\n      arm.rotation.y = i * Math.PI / 2;\n      arm.position.x = Math.cos(arm.rotation.y) * 0.2;\n      arm.position.z = Math.sin(arm.rotation.y) * 0.2;\n      arm.castShadow = true;\n      droneGroup.add(arm);\n    }\n\n    // Propellers\n    const propGeometry = new THREE.BoxGeometry(0.05, 0.01, 0.3);\n    const propMaterial = new THREE.MeshStandardMaterial({\n      color: 0x95a5a6,\n      metalness: 0.3,\n      roughness: 0.7\n    });\n\n    // Create four propellers\n    for (let i = 0; i < 4; i++) {\n      const propeller = new THREE.Group();\n      const blade1 = new THREE.Mesh(propGeometry, propMaterial);\n      const blade2 = new THREE.Mesh(propGeometry, propMaterial);\n      blade2.rotation.y = Math.PI / 2;\n      propeller.add(blade1, blade2);\n      propeller.position.y = 0.1;\n      propeller.position.x = Math.cos(i * Math.PI / 2) * 0.2;\n      propeller.position.z = Math.sin(i * Math.PI / 2) * 0.2;\n      propeller.castShadow = true;\n      droneGroup.add(propeller);\n    }\n    return droneGroup;\n  };\n\n  // Create and update ground plane\n  const updateGround = () => {\n    var _texturesRef$current, _texturesRef$current$;\n    if (!sceneRef.current) return;\n\n    // Remove old ground\n    const oldGround = sceneRef.current.children.find(child => child.userData.isGround);\n    if (oldGround) {\n      sceneRef.current.remove(oldGround);\n      if (oldGround.geometry) oldGround.geometry.dispose();\n      if (oldGround.material) oldGround.material.dispose();\n    }\n\n    // Create new ground with dynamic size\n    const size = Math.sqrt(gameState.land.length);\n    const groundSize = Math.max(size * 1.5, 2); // At least 2 units, scales with grid\n    const groundGeometry = new THREE.PlaneGeometry(groundSize, groundSize);\n    const groundMaterial = new THREE.MeshStandardMaterial({\n      color: 0x90EE90,\n      // Default grass color\n      roughness: 0.8,\n      metalness: 0.2\n    });\n\n    // Apply texture if available\n    if ((_texturesRef$current = texturesRef.current) !== null && _texturesRef$current !== void 0 && (_texturesRef$current$ = _texturesRef$current.grass) !== null && _texturesRef$current$ !== void 0 && _texturesRef$current$.diffuse) {\n      groundMaterial.map = texturesRef.current.grass.diffuse.clone(); // Clone texture to avoid sharing\n      groundMaterial.map.repeat.set(size, size);\n      groundMaterial.map.wrapS = groundMaterial.map.wrapT = THREE.RepeatWrapping;\n      groundMaterial.needsUpdate = true;\n    }\n    const ground = new THREE.Mesh(groundGeometry, groundMaterial);\n    ground.rotation.x = -Math.PI / 2;\n    ground.position.y = 0;\n    ground.receiveShadow = true;\n    ground.userData.isGround = true;\n    sceneRef.current.add(ground);\n  };\n\n  // Create and update tiles\n  const updateTiles = () => {\n    if (!sceneRef.current) return;\n\n    // Remove old tiles\n    const oldTiles = sceneRef.current.children.filter(child => child.userData.isTile);\n    oldTiles.forEach(tile => {\n      sceneRef.current.remove(tile);\n      if (tile.geometry) tile.geometry.dispose();\n      if (tile.material) tile.material.dispose();\n    });\n\n    // Create new tiles based on gameState\n    const size = Math.sqrt(gameState.land.length);\n    const tileSize = 0.95; // Slightly smaller than 1 to create gaps\n    const offset = (size - 1) / 2;\n    gameState.land.forEach((tile, index) => {\n      if (tile.isPlowed) {\n        var _texturesRef$current2, _texturesRef$current3;\n        const x = Math.floor(index / size);\n        const z = index % size;\n        const geometry = new THREE.PlaneGeometry(tileSize, tileSize);\n        const material = new THREE.MeshStandardMaterial({\n          color: 0x8B4513,\n          // Default soil color\n          roughness: 0.8,\n          metalness: 0.2\n        });\n\n        // Apply texture if available\n        if ((_texturesRef$current2 = texturesRef.current) !== null && _texturesRef$current2 !== void 0 && (_texturesRef$current3 = _texturesRef$current2.soil) !== null && _texturesRef$current3 !== void 0 && _texturesRef$current3.diffuse) {\n          material.map = texturesRef.current.soil.diffuse.clone(); // Clone texture to avoid sharing\n          material.map.repeat.set(1, 1);\n          material.map.wrapS = material.map.wrapT = THREE.RepeatWrapping;\n          material.needsUpdate = true;\n        }\n        const mesh = new THREE.Mesh(geometry, material);\n        mesh.rotation.x = -Math.PI / 2;\n        mesh.position.set(x - offset, 0.01, z - offset); // Slightly above ground\n        mesh.receiveShadow = true;\n        mesh.userData.isTile = true;\n        sceneRef.current.add(mesh);\n      }\n    });\n\n    // Update grid helper\n    const oldGrid = sceneRef.current.children.find(child => child instanceof THREE.GridHelper);\n    if (oldGrid) {\n      sceneRef.current.remove(oldGrid);\n      oldGrid.material.dispose();\n      oldGrid.geometry.dispose();\n    }\n    const gridHelper = new THREE.GridHelper(size, size, 0x000000, 0x000000);\n    gridHelper.position.y = 0.01;\n    gridHelper.material.opacity = 0.2;\n    gridHelper.material.transparent = true;\n    sceneRef.current.add(gridHelper);\n\n    // Update ground plane\n    updateGround();\n  };\n  useEffect(() => {\n    if (!canvasRef.current) return;\n\n    // Create scene\n    const scene = new THREE.Scene();\n    scene.background = new THREE.Color(0x87CEEB);\n    scene.fog = new THREE.FogExp2(0x87CEEB, 0.01);\n    sceneRef.current = scene;\n\n    // Create camera with initial position\n    const camera = new THREE.PerspectiveCamera(60, 1, 0.1, 1000);\n    const initialCamera = calculateCameraPosition();\n    camera.position.copy(initialCamera.position);\n    camera.lookAt(initialCamera.target);\n\n    // Create renderer with improved settings\n    const renderer = new THREE.WebGLRenderer({\n      canvas: canvasRef.current,\n      antialias: true,\n      powerPreference: \"high-performance\",\n      stencil: false\n    });\n    renderer.setSize(600, 600);\n    renderer.shadowMap.enabled = true;\n    renderer.shadowMap.type = THREE.PCFSoftShadowMap;\n    renderer.outputColorSpace = THREE.SRGBColorSpace;\n    renderer.toneMapping = THREE.ACESFilmicToneMapping;\n    renderer.toneMappingExposure = 1.0;\n    renderer.setPixelRatio(window.devicePixelRatio);\n\n    // Create environment map\n    const envMap = createEnvironmentMap(renderer);\n    scene.environment = envMap;\n\n    // Add lights with improved settings\n    const ambientLight = new THREE.AmbientLight(0xffffff, 0.5);\n    scene.add(ambientLight);\n    const sunLight = new THREE.DirectionalLight(0xffffff, 2.0);\n    sunLight.position.set(10, 10, 5);\n    sunLight.castShadow = true;\n    sunLight.shadow.mapSize.width = 2048;\n    sunLight.shadow.mapSize.height = 2048;\n    sunLight.shadow.camera.near = 0.5;\n    sunLight.shadow.camera.far = 50;\n    sunLight.shadow.camera.left = -10;\n    sunLight.shadow.camera.right = 10;\n    sunLight.shadow.camera.top = 10;\n    sunLight.shadow.camera.bottom = -10;\n    sunLight.shadow.bias = -0.001;\n    scene.add(sunLight);\n\n    // Add subtle point lights for better ambiance\n    const pointLight1 = new THREE.PointLight(0xffd700, 0.5, 10);\n    pointLight1.position.set(2, 2, 2);\n    scene.add(pointLight1);\n    const pointLight2 = new THREE.PointLight(0x00ffff, 0.3, 10);\n    pointLight2.position.set(-2, 3, -2);\n    scene.add(pointLight2);\n\n    // Initial ground setup will be handled by updateTiles\n    updateTiles();\n\n    // Setup post-processing with improved settings\n    const composer = new EffectComposer(renderer);\n    composerRef.current = composer;\n    const renderPass = new RenderPass(scene, camera);\n    composer.addPass(renderPass);\n    const bloomPass = new UnrealBloomPass(new THREE.Vector2(600, 600), 0.5,\n    // strength\n    0.4,\n    // radius\n    0.85 // threshold\n    );\n    composer.addPass(bloomPass);\n    const smaaPass = new SMAAPass(600, 600);\n    composer.addPass(smaaPass);\n\n    // Add OrbitControls with dynamic limits\n    const controls = new OrbitControls(camera, renderer.domElement);\n    controls.enableDamping = true;\n    controls.dampingFactor = 0.05;\n    controls.screenSpacePanning = false;\n    controls.minDistance = 2;\n    controls.maxDistance = 20;\n    controls.maxPolarAngle = Math.PI / 2.1;\n    controls.minPolarAngle = Math.PI / 6;\n    controls.enableZoom = true;\n    controls.zoomSpeed = 0.5;\n    controls.rotateSpeed = 0.5;\n\n    // Set initial camera position\n    camera.position.copy(initialCamera.position);\n    controls.target.copy(initialCamera.target);\n    controls.update();\n\n    // Load assets with improved error handling\n    Promise.all([loadTextures(), loadModels()]).then(() => {\n      // Add drone to scene with improved fallback handling\n      if (modelsRef.current.drone) {\n        const drone = modelsRef.current.drone.clone();\n        drone.scale.set(0.5, 0.5, 0.5);\n        drone.traverse(child => {\n          if (child.isMesh) {\n            child.castShadow = true;\n            child.material.envMapIntensity = 1;\n          }\n        });\n        scene.add(drone);\n        droneRef.current = drone;\n      } else {\n        console.log('Using fallback drone model');\n        const fallbackDrone = createFallbackDrone();\n        scene.add(fallbackDrone);\n        droneRef.current = fallbackDrone;\n      }\n    }).catch(error => {\n      console.error('Error loading assets:', error);\n      const fallbackDrone = createFallbackDrone();\n      scene.add(fallbackDrone);\n      droneRef.current = fallbackDrone;\n    });\n\n    // Animation loop with improved timing\n    let lastTime = 0;\n    const animate = time => {\n      requestAnimationFrame(animate);\n      const delta = (time - lastTime) / 1000;\n      lastTime = time;\n\n      // Update drone hover animation\n      if (droneRef.current) {\n        const baseHeight = 0.5;\n        droneRef.current.position.y = baseHeight + Math.sin(time * 0.002) * 0.1;\n\n        // Rotate propellers if using fallback model\n        if (!modelsRef.current.drone) {\n          droneRef.current.children.forEach((child, index) => {\n            if (index > 4) {\n              // Skip body and arms\n              child.rotation.y += 15 * delta;\n            }\n          });\n        }\n      }\n\n      // Update controls and render\n      controls.update();\n      composer.render();\n    };\n    animate(0);\n\n    // Cleanup with improved resource disposal\n    return () => {\n      renderer.dispose();\n      composer.dispose();\n      controls.dispose();\n      envMap.dispose();\n      Object.values(texturesRef.current).forEach(textures => {\n        Object.values(textures).forEach(texture => texture.dispose());\n      });\n      scene.traverse(object => {\n        if (object.geometry) object.geometry.dispose();\n        if (object.material) {\n          if (Array.isArray(object.material)) {\n            object.material.forEach(material => material.dispose());\n          } else {\n            object.material.dispose();\n          }\n        }\n      });\n    };\n  }, []);\n\n  // Update drone position when gameState changes\n  useEffect(() => {\n    if (!droneRef.current || !gameState.dronePosition) return;\n    const targetPos = gameToScene(gameState.dronePosition.x, gameState.dronePosition.y);\n\n    // Smoothly animate to new position\n    const duration = 500; // 0.5 seconds\n    const startPosition = {\n      x: droneRef.current.position.x,\n      y: droneRef.current.position.y,\n      z: droneRef.current.position.z\n    };\n    const startTime = Date.now();\n    const animate = () => {\n      const elapsed = Date.now() - startTime;\n      const progress = Math.min(elapsed / duration, 1);\n\n      // Smooth easing\n      const t = progress < 0.5 ? 4 * progress * progress * progress : 1 - Math.pow(-2 * progress + 2, 3) / 2;\n\n      // Update drone position\n      droneRef.current.position.x = startPosition.x + (targetPos.x - startPosition.x) * t;\n      droneRef.current.position.z = startPosition.z + (targetPos.z - startPosition.z) * t;\n      droneRef.current.position.y = 0.5 + Math.sin(Date.now() * 0.002) * 0.1; // Keep hover animation\n\n      if (progress < 1) {\n        requestAnimationFrame(animate);\n      }\n    };\n    animate();\n  }, [gameState.dronePosition, gameState.land.length, gameToScene]);\n\n  // Update tiles when gameState changes\n  useEffect(() => {\n    updateTiles();\n  }, [gameState.land]);\n\n  // Add new effect to handle camera position updates when grid size changes\n  useEffect(() => {\n    if (!canvasRef.current) return;\n    const newCamera = calculateCameraPosition();\n\n    // Get the orbit controls instance\n    const canvas = canvasRef.current;\n    const controls = canvas.__controls;\n    if (controls) {\n      // Smoothly animate to new position\n      const duration = 1000; // 1 second\n      const startPosition = controls.object.position.clone();\n      const startTarget = controls.target.clone();\n      const startTime = Date.now();\n      const animate = () => {\n        const elapsed = Date.now() - startTime;\n        const progress = Math.min(elapsed / duration, 1);\n\n        // Smooth easing\n        const t = progress < 0.5 ? 4 * progress * progress * progress : 1 - Math.pow(-2 * progress + 2, 3) / 2;\n\n        // Update camera position\n        controls.object.position.lerpVectors(startPosition, newCamera.position, t);\n        controls.target.lerpVectors(startTarget, newCamera.target, t);\n        controls.update();\n        if (progress < 1) {\n          requestAnimationFrame(animate);\n        }\n      };\n      animate();\n    }\n  }, [gameState.land.length]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      width: '600px',\n      height: '600px',\n      backgroundColor: '#000000',\n      margin: '0 auto',\n      borderRadius: '8px',\n      overflow: 'hidden',\n      boxShadow: '0 4px 6px rgba(0, 0, 0, 0.1)'\n    },\n    children: /*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: canvasRef,\n      style: {\n        width: '100%',\n        height: '100%'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 571,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 562,\n    columnNumber: 5\n  }, this);\n};\n_s(Game3D, \"D1kHSS7XsGTneJI7fgVtSyDTYrA=\");\n_c = Game3D;\nexport default Game3D;\nvar _c;\n$RefreshReg$(_c, \"Game3D\");","map":{"version":3,"names":["React","useRef","useEffect","THREE","OrbitControls","GLTFLoader","OBJLoader","EffectComposer","RenderPass","UnrealBloomPass","SMAAPass","Sky","jsxDEV","_jsxDEV","Game3D","gameState","_s","canvasRef","sceneRef","droneRef","composerRef","modelsRef","texturesRef","gameToScene","useCallback","x","y","size","Math","sqrt","land","length","offset","z","calculateCameraPosition","distance","height","position","Vector3","target","loadTextures","textureLoader","TextureLoader","loadTexture","url","Promise","resolve","reject","load","undefined","current","grass","diffuse","soil","Object","values","forEach","textures","texture","wrapS","wrapT","RepeatWrapping","repeat","set","error","console","loadModels","gltfLoader","objLoader","loadGLTF","loadOBJ","droneModel","drone","scene","wheat","corn","potato","model","traverse","child","isMesh","castShadow","receiveShadow","createEnvironmentMap","renderer","pmremGenerator","PMREMGenerator","compileEquirectangularShader","sky","scale","setScalar","sun","uniforms","material","value","phi","MathUtils","degToRad","theta","setFromSphericalCoords","copy","renderTarget","fromScene","dispose","createFallbackDrone","droneGroup","Group","bodyGeometry","BoxGeometry","bodyMaterial","MeshStandardMaterial","color","metalness","roughness","body","Mesh","add","armGeometry","CylinderGeometry","armMaterial","i","arm","rotation","PI","cos","sin","propGeometry","propMaterial","propeller","blade1","blade2","updateGround","_texturesRef$current","_texturesRef$current$","oldGround","children","find","userData","isGround","remove","geometry","groundSize","max","groundGeometry","PlaneGeometry","groundMaterial","map","clone","needsUpdate","ground","updateTiles","oldTiles","filter","isTile","tile","tileSize","index","isPlowed","_texturesRef$current2","_texturesRef$current3","floor","mesh","oldGrid","GridHelper","gridHelper","opacity","transparent","Scene","background","Color","fog","FogExp2","camera","PerspectiveCamera","initialCamera","lookAt","WebGLRenderer","canvas","antialias","powerPreference","stencil","setSize","shadowMap","enabled","type","PCFSoftShadowMap","outputColorSpace","SRGBColorSpace","toneMapping","ACESFilmicToneMapping","toneMappingExposure","setPixelRatio","window","devicePixelRatio","envMap","environment","ambientLight","AmbientLight","sunLight","DirectionalLight","shadow","mapSize","width","near","far","left","right","top","bottom","bias","pointLight1","PointLight","pointLight2","composer","renderPass","addPass","bloomPass","Vector2","smaaPass","controls","domElement","enableDamping","dampingFactor","screenSpacePanning","minDistance","maxDistance","maxPolarAngle","minPolarAngle","enableZoom","zoomSpeed","rotateSpeed","update","all","then","envMapIntensity","log","fallbackDrone","catch","lastTime","animate","time","requestAnimationFrame","delta","baseHeight","render","object","Array","isArray","dronePosition","targetPos","duration","startPosition","startTime","Date","now","elapsed","progress","min","t","pow","newCamera","__controls","startTarget","lerpVectors","style","backgroundColor","margin","borderRadius","overflow","boxShadow","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/SPIDER/Downloads/Project/Demo GPT/Demo 1/src/components/Game3D.js"],"sourcesContent":["import React, { useRef, useEffect } from 'react';\r\nimport * as THREE from 'three';\r\nimport { OrbitControls } from 'three/addons/controls/OrbitControls.js';\r\nimport { GLTFLoader } from 'three/addons/loaders/GLTFLoader.js';\r\nimport { OBJLoader } from 'three/addons/loaders/OBJLoader.js';\r\nimport { EffectComposer } from 'three/addons/postprocessing/EffectComposer.js';\r\nimport { RenderPass } from 'three/addons/postprocessing/RenderPass.js';\r\nimport { UnrealBloomPass } from 'three/addons/postprocessing/UnrealBloomPass.js';\r\nimport { SMAAPass } from 'three/addons/postprocessing/SMAAPass.js';\r\nimport { Sky } from 'three/addons/objects/Sky.js';\r\n\r\nconst Game3D = ({ gameState }) => {\r\n  const canvasRef = useRef(null);\r\n  const sceneRef = useRef(null);\r\n  const droneRef = useRef(null);\r\n  const composerRef = useRef(null);\r\n  const modelsRef = useRef({});\r\n  const texturesRef = useRef({});\r\n\r\n  // Convert game coordinates to scene coordinates\r\n  const gameToScene = React.useCallback((x, y) => {\r\n    const size = Math.sqrt(gameState.land.length);\r\n    const offset = (size - 1) / 2;\r\n    return {\r\n      x: x - offset,\r\n      z: y - offset\r\n    };\r\n  }, [gameState.land.length]);\r\n\r\n  // Calculate camera position based on grid size\r\n  const calculateCameraPosition = () => {\r\n    const size = Math.sqrt(gameState.land.length);\r\n    const distance = 2 + size * 1.5; // Base distance that scales with grid size\r\n    const height = 3 + size * 1.2;   // Base height that scales with grid size\r\n    return {\r\n      position: new THREE.Vector3(distance, height, distance),\r\n      target: new THREE.Vector3(0, 0, 0)\r\n    };\r\n  };\r\n\r\n  // Load textures\r\n  const loadTextures = async () => {\r\n    const textureLoader = new THREE.TextureLoader();\r\n    const loadTexture = (url) => new Promise((resolve, reject) => {\r\n      textureLoader.load(url, resolve, undefined, reject);\r\n    });\r\n\r\n    try {\r\n      texturesRef.current = {\r\n        grass: {\r\n          diffuse: await loadTexture('/textures/grass.jpg')\r\n        },\r\n        soil: {\r\n          diffuse: await loadTexture('/textures/plowed_soil.jpg')\r\n        }\r\n      };\r\n\r\n      // Configure texture properties\r\n      Object.values(texturesRef.current).forEach(textures => {\r\n        Object.values(textures).forEach(texture => {\r\n          texture.wrapS = texture.wrapT = THREE.RepeatWrapping;\r\n          texture.repeat.set(2, 2);\r\n        });\r\n      });\r\n    } catch (error) {\r\n      console.error('Error loading textures:', error);\r\n    }\r\n  };\r\n\r\n  // Load models\r\n  const loadModels = async () => {\r\n    const gltfLoader = new GLTFLoader();\r\n    const objLoader = new OBJLoader();\r\n\r\n    const loadGLTF = (url) => new Promise((resolve, reject) => {\r\n      gltfLoader.load(url, resolve, undefined, reject);\r\n    });\r\n\r\n    const loadOBJ = (url) => new Promise((resolve, reject) => {\r\n      objLoader.load(url, resolve, undefined, reject);\r\n    });\r\n\r\n    try {\r\n      // Load drone model\r\n      const droneModel = await loadGLTF('/models/drone.glb');\r\n      modelsRef.current.drone = droneModel.scene;\r\n\r\n      // Load crop models\r\n      modelsRef.current.wheat = await loadOBJ('/models/wheat.obj');\r\n      modelsRef.current.corn = await loadOBJ('/models/corn.obj');\r\n      modelsRef.current.potato = await loadOBJ('/models/potato.obj');\r\n\r\n      // Configure models\r\n      Object.values(modelsRef.current).forEach(model => {\r\n        model.traverse(child => {\r\n          if (child.isMesh) {\r\n            child.castShadow = true;\r\n            child.receiveShadow = true;\r\n          }\r\n        });\r\n      });\r\n    } catch (error) {\r\n      console.error('Error loading models:', error);\r\n    }\r\n  };\r\n\r\n  // Create environment map\r\n  const createEnvironmentMap = (renderer) => {\r\n    const pmremGenerator = new THREE.PMREMGenerator(renderer);\r\n    pmremGenerator.compileEquirectangularShader();\r\n\r\n    const sky = new Sky();\r\n    sky.scale.setScalar(450000);\r\n    \r\n    const sun = new THREE.Vector3();\r\n    const uniforms = sky.material.uniforms;\r\n    uniforms['turbidity'].value = 10;\r\n    uniforms['rayleigh'].value = 3;\r\n    uniforms['mieCoefficient'].value = 0.005;\r\n    uniforms['mieDirectionalG'].value = 0.7;\r\n\r\n    const phi = THREE.MathUtils.degToRad(90 - 2);\r\n    const theta = THREE.MathUtils.degToRad(180);\r\n    sun.setFromSphericalCoords(1, phi, theta);\r\n    uniforms['sunPosition'].value.copy(sun);\r\n\r\n    const renderTarget = pmremGenerator.fromScene(sky);\r\n    pmremGenerator.dispose();\r\n\r\n    return renderTarget.texture;\r\n  };\r\n\r\n  // Create fallback drone model\r\n  const createFallbackDrone = () => {\r\n    const droneGroup = new THREE.Group();\r\n\r\n    // Drone body\r\n    const bodyGeometry = new THREE.BoxGeometry(0.4, 0.1, 0.4);\r\n    const bodyMaterial = new THREE.MeshStandardMaterial({\r\n      color: 0x3498db,\r\n      metalness: 0.8,\r\n      roughness: 0.2\r\n    });\r\n    const body = new THREE.Mesh(bodyGeometry, bodyMaterial);\r\n    body.castShadow = true;\r\n    droneGroup.add(body);\r\n\r\n    // Drone arms\r\n    const armGeometry = new THREE.CylinderGeometry(0.02, 0.02, 0.3);\r\n    const armMaterial = new THREE.MeshStandardMaterial({\r\n      color: 0x2c3e50,\r\n      metalness: 0.5,\r\n      roughness: 0.5\r\n    });\r\n\r\n    // Create four arms\r\n    for (let i = 0; i < 4; i++) {\r\n      const arm = new THREE.Mesh(armGeometry, armMaterial);\r\n      arm.position.y = 0.05;\r\n      arm.rotation.z = Math.PI / 2;\r\n      arm.rotation.y = (i * Math.PI) / 2;\r\n      arm.position.x = Math.cos(arm.rotation.y) * 0.2;\r\n      arm.position.z = Math.sin(arm.rotation.y) * 0.2;\r\n      arm.castShadow = true;\r\n      droneGroup.add(arm);\r\n    }\r\n\r\n    // Propellers\r\n    const propGeometry = new THREE.BoxGeometry(0.05, 0.01, 0.3);\r\n    const propMaterial = new THREE.MeshStandardMaterial({\r\n      color: 0x95a5a6,\r\n      metalness: 0.3,\r\n      roughness: 0.7\r\n    });\r\n\r\n    // Create four propellers\r\n    for (let i = 0; i < 4; i++) {\r\n      const propeller = new THREE.Group();\r\n      \r\n      const blade1 = new THREE.Mesh(propGeometry, propMaterial);\r\n      const blade2 = new THREE.Mesh(propGeometry, propMaterial);\r\n      blade2.rotation.y = Math.PI / 2;\r\n      \r\n      propeller.add(blade1, blade2);\r\n      propeller.position.y = 0.1;\r\n      propeller.position.x = Math.cos(i * Math.PI / 2) * 0.2;\r\n      propeller.position.z = Math.sin(i * Math.PI / 2) * 0.2;\r\n      propeller.castShadow = true;\r\n      \r\n      droneGroup.add(propeller);\r\n    }\r\n\r\n    return droneGroup;\r\n  };\r\n\r\n  // Create and update ground plane\r\n  const updateGround = () => {\r\n    if (!sceneRef.current) return;\r\n\r\n    // Remove old ground\r\n    const oldGround = sceneRef.current.children.find(child => child.userData.isGround);\r\n    if (oldGround) {\r\n      sceneRef.current.remove(oldGround);\r\n      if (oldGround.geometry) oldGround.geometry.dispose();\r\n      if (oldGround.material) oldGround.material.dispose();\r\n    }\r\n\r\n    // Create new ground with dynamic size\r\n    const size = Math.sqrt(gameState.land.length);\r\n    const groundSize = Math.max(size * 1.5, 2); // At least 2 units, scales with grid\r\n    const groundGeometry = new THREE.PlaneGeometry(groundSize, groundSize);\r\n    const groundMaterial = new THREE.MeshStandardMaterial({\r\n      color: 0x90EE90, // Default grass color\r\n      roughness: 0.8,\r\n      metalness: 0.2\r\n    });\r\n\r\n    // Apply texture if available\r\n    if (texturesRef.current?.grass?.diffuse) {\r\n      groundMaterial.map = texturesRef.current.grass.diffuse.clone(); // Clone texture to avoid sharing\r\n      groundMaterial.map.repeat.set(size, size);\r\n      groundMaterial.map.wrapS = groundMaterial.map.wrapT = THREE.RepeatWrapping;\r\n      groundMaterial.needsUpdate = true;\r\n    }\r\n\r\n    const ground = new THREE.Mesh(groundGeometry, groundMaterial);\r\n    ground.rotation.x = -Math.PI / 2;\r\n    ground.position.y = 0;\r\n    ground.receiveShadow = true;\r\n    ground.userData.isGround = true;\r\n    sceneRef.current.add(ground);\r\n  };\r\n\r\n  // Create and update tiles\r\n  const updateTiles = () => {\r\n    if (!sceneRef.current) return;\r\n\r\n    // Remove old tiles\r\n    const oldTiles = sceneRef.current.children.filter(child => child.userData.isTile);\r\n    oldTiles.forEach(tile => {\r\n      sceneRef.current.remove(tile);\r\n      if (tile.geometry) tile.geometry.dispose();\r\n      if (tile.material) tile.material.dispose();\r\n    });\r\n\r\n    // Create new tiles based on gameState\r\n    const size = Math.sqrt(gameState.land.length);\r\n    const tileSize = 0.95; // Slightly smaller than 1 to create gaps\r\n    const offset = (size - 1) / 2;\r\n\r\n    gameState.land.forEach((tile, index) => {\r\n      if (tile.isPlowed) {\r\n        const x = Math.floor(index / size);\r\n        const z = index % size;\r\n        \r\n        const geometry = new THREE.PlaneGeometry(tileSize, tileSize);\r\n        const material = new THREE.MeshStandardMaterial({\r\n          color: 0x8B4513, // Default soil color\r\n          roughness: 0.8,\r\n          metalness: 0.2\r\n        });\r\n\r\n        // Apply texture if available\r\n        if (texturesRef.current?.soil?.diffuse) {\r\n          material.map = texturesRef.current.soil.diffuse.clone(); // Clone texture to avoid sharing\r\n          material.map.repeat.set(1, 1);\r\n          material.map.wrapS = material.map.wrapT = THREE.RepeatWrapping;\r\n          material.needsUpdate = true;\r\n        }\r\n        \r\n        const mesh = new THREE.Mesh(geometry, material);\r\n        mesh.rotation.x = -Math.PI / 2;\r\n        mesh.position.set(x - offset, 0.01, z - offset); // Slightly above ground\r\n        mesh.receiveShadow = true;\r\n        mesh.userData.isTile = true;\r\n        \r\n        sceneRef.current.add(mesh);\r\n      }\r\n    });\r\n\r\n    // Update grid helper\r\n    const oldGrid = sceneRef.current.children.find(child => child instanceof THREE.GridHelper);\r\n    if (oldGrid) {\r\n      sceneRef.current.remove(oldGrid);\r\n      oldGrid.material.dispose();\r\n      oldGrid.geometry.dispose();\r\n    }\r\n\r\n    const gridHelper = new THREE.GridHelper(size, size, 0x000000, 0x000000);\r\n    gridHelper.position.y = 0.01;\r\n    gridHelper.material.opacity = 0.2;\r\n    gridHelper.material.transparent = true;\r\n    sceneRef.current.add(gridHelper);\r\n\r\n    // Update ground plane\r\n    updateGround();\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (!canvasRef.current) return;\r\n\r\n    // Create scene\r\n    const scene = new THREE.Scene();\r\n    scene.background = new THREE.Color(0x87CEEB);\r\n    scene.fog = new THREE.FogExp2(0x87CEEB, 0.01);\r\n    sceneRef.current = scene;\r\n\r\n    // Create camera with initial position\r\n    const camera = new THREE.PerspectiveCamera(60, 1, 0.1, 1000);\r\n    const initialCamera = calculateCameraPosition();\r\n    camera.position.copy(initialCamera.position);\r\n    camera.lookAt(initialCamera.target);\r\n\r\n    // Create renderer with improved settings\r\n    const renderer = new THREE.WebGLRenderer({\r\n      canvas: canvasRef.current,\r\n      antialias: true,\r\n      powerPreference: \"high-performance\",\r\n      stencil: false\r\n    });\r\n    renderer.setSize(600, 600);\r\n    renderer.shadowMap.enabled = true;\r\n    renderer.shadowMap.type = THREE.PCFSoftShadowMap;\r\n    renderer.outputColorSpace = THREE.SRGBColorSpace;\r\n    renderer.toneMapping = THREE.ACESFilmicToneMapping;\r\n    renderer.toneMappingExposure = 1.0;\r\n    renderer.setPixelRatio(window.devicePixelRatio);\r\n\r\n    // Create environment map\r\n    const envMap = createEnvironmentMap(renderer);\r\n    scene.environment = envMap;\r\n\r\n    // Add lights with improved settings\r\n    const ambientLight = new THREE.AmbientLight(0xffffff, 0.5);\r\n    scene.add(ambientLight);\r\n\r\n    const sunLight = new THREE.DirectionalLight(0xffffff, 2.0);\r\n    sunLight.position.set(10, 10, 5);\r\n    sunLight.castShadow = true;\r\n    sunLight.shadow.mapSize.width = 2048;\r\n    sunLight.shadow.mapSize.height = 2048;\r\n    sunLight.shadow.camera.near = 0.5;\r\n    sunLight.shadow.camera.far = 50;\r\n    sunLight.shadow.camera.left = -10;\r\n    sunLight.shadow.camera.right = 10;\r\n    sunLight.shadow.camera.top = 10;\r\n    sunLight.shadow.camera.bottom = -10;\r\n    sunLight.shadow.bias = -0.001;\r\n    scene.add(sunLight);\r\n\r\n    // Add subtle point lights for better ambiance\r\n    const pointLight1 = new THREE.PointLight(0xffd700, 0.5, 10);\r\n    pointLight1.position.set(2, 2, 2);\r\n    scene.add(pointLight1);\r\n\r\n    const pointLight2 = new THREE.PointLight(0x00ffff, 0.3, 10);\r\n    pointLight2.position.set(-2, 3, -2);\r\n    scene.add(pointLight2);\r\n\r\n    // Initial ground setup will be handled by updateTiles\r\n    updateTiles();\r\n\r\n    // Setup post-processing with improved settings\r\n    const composer = new EffectComposer(renderer);\r\n    composerRef.current = composer;\r\n\r\n    const renderPass = new RenderPass(scene, camera);\r\n    composer.addPass(renderPass);\r\n\r\n    const bloomPass = new UnrealBloomPass(\r\n      new THREE.Vector2(600, 600),\r\n      0.5,  // strength\r\n      0.4,  // radius\r\n      0.85  // threshold\r\n    );\r\n    composer.addPass(bloomPass);\r\n\r\n    const smaaPass = new SMAAPass(600, 600);\r\n    composer.addPass(smaaPass);\r\n\r\n    // Add OrbitControls with dynamic limits\r\n    const controls = new OrbitControls(camera, renderer.domElement);\r\n    controls.enableDamping = true;\r\n    controls.dampingFactor = 0.05;\r\n    controls.screenSpacePanning = false;\r\n    controls.minDistance = 2;\r\n    controls.maxDistance = 20;\r\n    controls.maxPolarAngle = Math.PI / 2.1;\r\n    controls.minPolarAngle = Math.PI / 6;\r\n    controls.enableZoom = true;\r\n    controls.zoomSpeed = 0.5;\r\n    controls.rotateSpeed = 0.5;\r\n\r\n    // Set initial camera position\r\n    camera.position.copy(initialCamera.position);\r\n    controls.target.copy(initialCamera.target);\r\n    controls.update();\r\n\r\n    // Load assets with improved error handling\r\n    Promise.all([loadTextures(), loadModels()]).then(() => {\r\n      // Add drone to scene with improved fallback handling\r\n      if (modelsRef.current.drone) {\r\n        const drone = modelsRef.current.drone.clone();\r\n        drone.scale.set(0.5, 0.5, 0.5);\r\n        drone.traverse((child) => {\r\n          if (child.isMesh) {\r\n            child.castShadow = true;\r\n            child.material.envMapIntensity = 1;\r\n          }\r\n        });\r\n        scene.add(drone);\r\n        droneRef.current = drone;\r\n      } else {\r\n        console.log('Using fallback drone model');\r\n        const fallbackDrone = createFallbackDrone();\r\n        scene.add(fallbackDrone);\r\n        droneRef.current = fallbackDrone;\r\n      }\r\n    }).catch(error => {\r\n      console.error('Error loading assets:', error);\r\n      const fallbackDrone = createFallbackDrone();\r\n      scene.add(fallbackDrone);\r\n      droneRef.current = fallbackDrone;\r\n    });\r\n\r\n    // Animation loop with improved timing\r\n    let lastTime = 0;\r\n    const animate = (time) => {\r\n      requestAnimationFrame(animate);\r\n\r\n      const delta = (time - lastTime) / 1000;\r\n      lastTime = time;\r\n\r\n      // Update drone hover animation\r\n      if (droneRef.current) {\r\n        const baseHeight = 0.5;\r\n        droneRef.current.position.y = baseHeight + Math.sin(time * 0.002) * 0.1;\r\n        \r\n        // Rotate propellers if using fallback model\r\n        if (!modelsRef.current.drone) {\r\n          droneRef.current.children.forEach((child, index) => {\r\n            if (index > 4) { // Skip body and arms\r\n              child.rotation.y += 15 * delta;\r\n            }\r\n          });\r\n        }\r\n      }\r\n\r\n      // Update controls and render\r\n      controls.update();\r\n      composer.render();\r\n    };\r\n    animate(0);\r\n\r\n    // Cleanup with improved resource disposal\r\n    return () => {\r\n      renderer.dispose();\r\n      composer.dispose();\r\n      controls.dispose();\r\n      envMap.dispose();\r\n      \r\n      Object.values(texturesRef.current).forEach(textures => {\r\n        Object.values(textures).forEach(texture => texture.dispose());\r\n      });\r\n      \r\n      scene.traverse((object) => {\r\n        if (object.geometry) object.geometry.dispose();\r\n        if (object.material) {\r\n          if (Array.isArray(object.material)) {\r\n            object.material.forEach(material => material.dispose());\r\n          } else {\r\n            object.material.dispose();\r\n          }\r\n        }\r\n      });\r\n    };\r\n  }, []);\r\n\r\n  // Update drone position when gameState changes\r\n  useEffect(() => {\r\n    if (!droneRef.current || !gameState.dronePosition) return;\r\n    \r\n    const targetPos = gameToScene(gameState.dronePosition.x, gameState.dronePosition.y);\r\n    \r\n    // Smoothly animate to new position\r\n    const duration = 500; // 0.5 seconds\r\n    const startPosition = {\r\n      x: droneRef.current.position.x,\r\n      y: droneRef.current.position.y,\r\n      z: droneRef.current.position.z\r\n    };\r\n    const startTime = Date.now();\r\n\r\n    const animate = () => {\r\n      const elapsed = Date.now() - startTime;\r\n      const progress = Math.min(elapsed / duration, 1);\r\n      \r\n      // Smooth easing\r\n      const t = progress < 0.5 \r\n        ? 4 * progress * progress * progress \r\n        : 1 - Math.pow(-2 * progress + 2, 3) / 2;\r\n\r\n      // Update drone position\r\n      droneRef.current.position.x = startPosition.x + (targetPos.x - startPosition.x) * t;\r\n      droneRef.current.position.z = startPosition.z + (targetPos.z - startPosition.z) * t;\r\n      droneRef.current.position.y = 0.5 + Math.sin(Date.now() * 0.002) * 0.1; // Keep hover animation\r\n\r\n      if (progress < 1) {\r\n        requestAnimationFrame(animate);\r\n      }\r\n    };\r\n\r\n    animate();\r\n  }, [gameState.dronePosition, gameState.land.length, gameToScene]);\r\n\r\n  // Update tiles when gameState changes\r\n  useEffect(() => {\r\n    updateTiles();\r\n  }, [gameState.land]);\r\n\r\n  // Add new effect to handle camera position updates when grid size changes\r\n  useEffect(() => {\r\n    if (!canvasRef.current) return;\r\n    \r\n    const newCamera = calculateCameraPosition();\r\n    \r\n    // Get the orbit controls instance\r\n    const canvas = canvasRef.current;\r\n    const controls = canvas.__controls;\r\n    \r\n    if (controls) {\r\n      // Smoothly animate to new position\r\n      const duration = 1000; // 1 second\r\n      const startPosition = controls.object.position.clone();\r\n      const startTarget = controls.target.clone();\r\n      const startTime = Date.now();\r\n\r\n      const animate = () => {\r\n        const elapsed = Date.now() - startTime;\r\n        const progress = Math.min(elapsed / duration, 1);\r\n        \r\n        // Smooth easing\r\n        const t = progress < 0.5 \r\n          ? 4 * progress * progress * progress \r\n          : 1 - Math.pow(-2 * progress + 2, 3) / 2;\r\n\r\n        // Update camera position\r\n        controls.object.position.lerpVectors(startPosition, newCamera.position, t);\r\n        controls.target.lerpVectors(startTarget, newCamera.target, t);\r\n        controls.update();\r\n\r\n        if (progress < 1) {\r\n          requestAnimationFrame(animate);\r\n        }\r\n      };\r\n\r\n      animate();\r\n    }\r\n  }, [gameState.land.length]);\r\n\r\n  return (\r\n    <div style={{ \r\n      width: '600px', \r\n      height: '600px', \r\n      backgroundColor: '#000000',\r\n      margin: '0 auto',\r\n      borderRadius: '8px',\r\n      overflow: 'hidden',\r\n      boxShadow: '0 4px 6px rgba(0, 0, 0, 0.1)'\r\n    }}>\r\n      <canvas \r\n        ref={canvasRef}\r\n        style={{\r\n          width: '100%',\r\n          height: '100%'\r\n        }}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Game3D; "],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,MAAM,EAAEC,SAAS,QAAQ,OAAO;AAChD,OAAO,KAAKC,KAAK,MAAM,OAAO;AAC9B,SAASC,aAAa,QAAQ,wCAAwC;AACtE,SAASC,UAAU,QAAQ,oCAAoC;AAC/D,SAASC,SAAS,QAAQ,mCAAmC;AAC7D,SAASC,cAAc,QAAQ,+CAA+C;AAC9E,SAASC,UAAU,QAAQ,2CAA2C;AACtE,SAASC,eAAe,QAAQ,gDAAgD;AAChF,SAASC,QAAQ,QAAQ,yCAAyC;AAClE,SAASC,GAAG,QAAQ,6BAA6B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElD,MAAMC,MAAM,GAAGA,CAAC;EAAEC;AAAU,CAAC,KAAK;EAAAC,EAAA;EAChC,MAAMC,SAAS,GAAGhB,MAAM,CAAC,IAAI,CAAC;EAC9B,MAAMiB,QAAQ,GAAGjB,MAAM,CAAC,IAAI,CAAC;EAC7B,MAAMkB,QAAQ,GAAGlB,MAAM,CAAC,IAAI,CAAC;EAC7B,MAAMmB,WAAW,GAAGnB,MAAM,CAAC,IAAI,CAAC;EAChC,MAAMoB,SAAS,GAAGpB,MAAM,CAAC,CAAC,CAAC,CAAC;EAC5B,MAAMqB,WAAW,GAAGrB,MAAM,CAAC,CAAC,CAAC,CAAC;;EAE9B;EACA,MAAMsB,WAAW,GAAGvB,KAAK,CAACwB,WAAW,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAK;IAC9C,MAAMC,IAAI,GAAGC,IAAI,CAACC,IAAI,CAACd,SAAS,CAACe,IAAI,CAACC,MAAM,CAAC;IAC7C,MAAMC,MAAM,GAAG,CAACL,IAAI,GAAG,CAAC,IAAI,CAAC;IAC7B,OAAO;MACLF,CAAC,EAAEA,CAAC,GAAGO,MAAM;MACbC,CAAC,EAAEP,CAAC,GAAGM;IACT,CAAC;EACH,CAAC,EAAE,CAACjB,SAAS,CAACe,IAAI,CAACC,MAAM,CAAC,CAAC;;EAE3B;EACA,MAAMG,uBAAuB,GAAGA,CAAA,KAAM;IACpC,MAAMP,IAAI,GAAGC,IAAI,CAACC,IAAI,CAACd,SAAS,CAACe,IAAI,CAACC,MAAM,CAAC;IAC7C,MAAMI,QAAQ,GAAG,CAAC,GAAGR,IAAI,GAAG,GAAG,CAAC,CAAC;IACjC,MAAMS,MAAM,GAAG,CAAC,GAAGT,IAAI,GAAG,GAAG,CAAC,CAAG;IACjC,OAAO;MACLU,QAAQ,EAAE,IAAIlC,KAAK,CAACmC,OAAO,CAACH,QAAQ,EAAEC,MAAM,EAAED,QAAQ,CAAC;MACvDI,MAAM,EAAE,IAAIpC,KAAK,CAACmC,OAAO,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC;IACnC,CAAC;EACH,CAAC;;EAED;EACA,MAAME,YAAY,GAAG,MAAAA,CAAA,KAAY;IAC/B,MAAMC,aAAa,GAAG,IAAItC,KAAK,CAACuC,aAAa,CAAC,CAAC;IAC/C,MAAMC,WAAW,GAAIC,GAAG,IAAK,IAAIC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;MAC5DN,aAAa,CAACO,IAAI,CAACJ,GAAG,EAAEE,OAAO,EAAEG,SAAS,EAAEF,MAAM,CAAC;IACrD,CAAC,CAAC;IAEF,IAAI;MACFzB,WAAW,CAAC4B,OAAO,GAAG;QACpBC,KAAK,EAAE;UACLC,OAAO,EAAE,MAAMT,WAAW,CAAC,qBAAqB;QAClD,CAAC;QACDU,IAAI,EAAE;UACJD,OAAO,EAAE,MAAMT,WAAW,CAAC,2BAA2B;QACxD;MACF,CAAC;;MAED;MACAW,MAAM,CAACC,MAAM,CAACjC,WAAW,CAAC4B,OAAO,CAAC,CAACM,OAAO,CAACC,QAAQ,IAAI;QACrDH,MAAM,CAACC,MAAM,CAACE,QAAQ,CAAC,CAACD,OAAO,CAACE,OAAO,IAAI;UACzCA,OAAO,CAACC,KAAK,GAAGD,OAAO,CAACE,KAAK,GAAGzD,KAAK,CAAC0D,cAAc;UACpDH,OAAO,CAACI,MAAM,CAACC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC;QAC1B,CAAC,CAAC;MACJ,CAAC,CAAC;IACJ,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;IACjD;EACF,CAAC;;EAED;EACA,MAAME,UAAU,GAAG,MAAAA,CAAA,KAAY;IAC7B,MAAMC,UAAU,GAAG,IAAI9D,UAAU,CAAC,CAAC;IACnC,MAAM+D,SAAS,GAAG,IAAI9D,SAAS,CAAC,CAAC;IAEjC,MAAM+D,QAAQ,GAAIzB,GAAG,IAAK,IAAIC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;MACzDoB,UAAU,CAACnB,IAAI,CAACJ,GAAG,EAAEE,OAAO,EAAEG,SAAS,EAAEF,MAAM,CAAC;IAClD,CAAC,CAAC;IAEF,MAAMuB,OAAO,GAAI1B,GAAG,IAAK,IAAIC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;MACxDqB,SAAS,CAACpB,IAAI,CAACJ,GAAG,EAAEE,OAAO,EAAEG,SAAS,EAAEF,MAAM,CAAC;IACjD,CAAC,CAAC;IAEF,IAAI;MACF;MACA,MAAMwB,UAAU,GAAG,MAAMF,QAAQ,CAAC,mBAAmB,CAAC;MACtDhD,SAAS,CAAC6B,OAAO,CAACsB,KAAK,GAAGD,UAAU,CAACE,KAAK;;MAE1C;MACApD,SAAS,CAAC6B,OAAO,CAACwB,KAAK,GAAG,MAAMJ,OAAO,CAAC,mBAAmB,CAAC;MAC5DjD,SAAS,CAAC6B,OAAO,CAACyB,IAAI,GAAG,MAAML,OAAO,CAAC,kBAAkB,CAAC;MAC1DjD,SAAS,CAAC6B,OAAO,CAAC0B,MAAM,GAAG,MAAMN,OAAO,CAAC,oBAAoB,CAAC;;MAE9D;MACAhB,MAAM,CAACC,MAAM,CAAClC,SAAS,CAAC6B,OAAO,CAAC,CAACM,OAAO,CAACqB,KAAK,IAAI;QAChDA,KAAK,CAACC,QAAQ,CAACC,KAAK,IAAI;UACtB,IAAIA,KAAK,CAACC,MAAM,EAAE;YAChBD,KAAK,CAACE,UAAU,GAAG,IAAI;YACvBF,KAAK,CAACG,aAAa,GAAG,IAAI;UAC5B;QACF,CAAC,CAAC;MACJ,CAAC,CAAC;IACJ,CAAC,CAAC,OAAOlB,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;IAC/C;EACF,CAAC;;EAED;EACA,MAAMmB,oBAAoB,GAAIC,QAAQ,IAAK;IACzC,MAAMC,cAAc,GAAG,IAAIlF,KAAK,CAACmF,cAAc,CAACF,QAAQ,CAAC;IACzDC,cAAc,CAACE,4BAA4B,CAAC,CAAC;IAE7C,MAAMC,GAAG,GAAG,IAAI7E,GAAG,CAAC,CAAC;IACrB6E,GAAG,CAACC,KAAK,CAACC,SAAS,CAAC,MAAM,CAAC;IAE3B,MAAMC,GAAG,GAAG,IAAIxF,KAAK,CAACmC,OAAO,CAAC,CAAC;IAC/B,MAAMsD,QAAQ,GAAGJ,GAAG,CAACK,QAAQ,CAACD,QAAQ;IACtCA,QAAQ,CAAC,WAAW,CAAC,CAACE,KAAK,GAAG,EAAE;IAChCF,QAAQ,CAAC,UAAU,CAAC,CAACE,KAAK,GAAG,CAAC;IAC9BF,QAAQ,CAAC,gBAAgB,CAAC,CAACE,KAAK,GAAG,KAAK;IACxCF,QAAQ,CAAC,iBAAiB,CAAC,CAACE,KAAK,GAAG,GAAG;IAEvC,MAAMC,GAAG,GAAG5F,KAAK,CAAC6F,SAAS,CAACC,QAAQ,CAAC,EAAE,GAAG,CAAC,CAAC;IAC5C,MAAMC,KAAK,GAAG/F,KAAK,CAAC6F,SAAS,CAACC,QAAQ,CAAC,GAAG,CAAC;IAC3CN,GAAG,CAACQ,sBAAsB,CAAC,CAAC,EAAEJ,GAAG,EAAEG,KAAK,CAAC;IACzCN,QAAQ,CAAC,aAAa,CAAC,CAACE,KAAK,CAACM,IAAI,CAACT,GAAG,CAAC;IAEvC,MAAMU,YAAY,GAAGhB,cAAc,CAACiB,SAAS,CAACd,GAAG,CAAC;IAClDH,cAAc,CAACkB,OAAO,CAAC,CAAC;IAExB,OAAOF,YAAY,CAAC3C,OAAO;EAC7B,CAAC;;EAED;EACA,MAAM8C,mBAAmB,GAAGA,CAAA,KAAM;IAChC,MAAMC,UAAU,GAAG,IAAItG,KAAK,CAACuG,KAAK,CAAC,CAAC;;IAEpC;IACA,MAAMC,YAAY,GAAG,IAAIxG,KAAK,CAACyG,WAAW,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC;IACzD,MAAMC,YAAY,GAAG,IAAI1G,KAAK,CAAC2G,oBAAoB,CAAC;MAClDC,KAAK,EAAE,QAAQ;MACfC,SAAS,EAAE,GAAG;MACdC,SAAS,EAAE;IACb,CAAC,CAAC;IACF,MAAMC,IAAI,GAAG,IAAI/G,KAAK,CAACgH,IAAI,CAACR,YAAY,EAAEE,YAAY,CAAC;IACvDK,IAAI,CAACjC,UAAU,GAAG,IAAI;IACtBwB,UAAU,CAACW,GAAG,CAACF,IAAI,CAAC;;IAEpB;IACA,MAAMG,WAAW,GAAG,IAAIlH,KAAK,CAACmH,gBAAgB,CAAC,IAAI,EAAE,IAAI,EAAE,GAAG,CAAC;IAC/D,MAAMC,WAAW,GAAG,IAAIpH,KAAK,CAAC2G,oBAAoB,CAAC;MACjDC,KAAK,EAAE,QAAQ;MACfC,SAAS,EAAE,GAAG;MACdC,SAAS,EAAE;IACb,CAAC,CAAC;;IAEF;IACA,KAAK,IAAIO,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EAAE;MAC1B,MAAMC,GAAG,GAAG,IAAItH,KAAK,CAACgH,IAAI,CAACE,WAAW,EAAEE,WAAW,CAAC;MACpDE,GAAG,CAACpF,QAAQ,CAACX,CAAC,GAAG,IAAI;MACrB+F,GAAG,CAACC,QAAQ,CAACzF,CAAC,GAAGL,IAAI,CAAC+F,EAAE,GAAG,CAAC;MAC5BF,GAAG,CAACC,QAAQ,CAAChG,CAAC,GAAI8F,CAAC,GAAG5F,IAAI,CAAC+F,EAAE,GAAI,CAAC;MAClCF,GAAG,CAACpF,QAAQ,CAACZ,CAAC,GAAGG,IAAI,CAACgG,GAAG,CAACH,GAAG,CAACC,QAAQ,CAAChG,CAAC,CAAC,GAAG,GAAG;MAC/C+F,GAAG,CAACpF,QAAQ,CAACJ,CAAC,GAAGL,IAAI,CAACiG,GAAG,CAACJ,GAAG,CAACC,QAAQ,CAAChG,CAAC,CAAC,GAAG,GAAG;MAC/C+F,GAAG,CAACxC,UAAU,GAAG,IAAI;MACrBwB,UAAU,CAACW,GAAG,CAACK,GAAG,CAAC;IACrB;;IAEA;IACA,MAAMK,YAAY,GAAG,IAAI3H,KAAK,CAACyG,WAAW,CAAC,IAAI,EAAE,IAAI,EAAE,GAAG,CAAC;IAC3D,MAAMmB,YAAY,GAAG,IAAI5H,KAAK,CAAC2G,oBAAoB,CAAC;MAClDC,KAAK,EAAE,QAAQ;MACfC,SAAS,EAAE,GAAG;MACdC,SAAS,EAAE;IACb,CAAC,CAAC;;IAEF;IACA,KAAK,IAAIO,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EAAE;MAC1B,MAAMQ,SAAS,GAAG,IAAI7H,KAAK,CAACuG,KAAK,CAAC,CAAC;MAEnC,MAAMuB,MAAM,GAAG,IAAI9H,KAAK,CAACgH,IAAI,CAACW,YAAY,EAAEC,YAAY,CAAC;MACzD,MAAMG,MAAM,GAAG,IAAI/H,KAAK,CAACgH,IAAI,CAACW,YAAY,EAAEC,YAAY,CAAC;MACzDG,MAAM,CAACR,QAAQ,CAAChG,CAAC,GAAGE,IAAI,CAAC+F,EAAE,GAAG,CAAC;MAE/BK,SAAS,CAACZ,GAAG,CAACa,MAAM,EAAEC,MAAM,CAAC;MAC7BF,SAAS,CAAC3F,QAAQ,CAACX,CAAC,GAAG,GAAG;MAC1BsG,SAAS,CAAC3F,QAAQ,CAACZ,CAAC,GAAGG,IAAI,CAACgG,GAAG,CAACJ,CAAC,GAAG5F,IAAI,CAAC+F,EAAE,GAAG,CAAC,CAAC,GAAG,GAAG;MACtDK,SAAS,CAAC3F,QAAQ,CAACJ,CAAC,GAAGL,IAAI,CAACiG,GAAG,CAACL,CAAC,GAAG5F,IAAI,CAAC+F,EAAE,GAAG,CAAC,CAAC,GAAG,GAAG;MACtDK,SAAS,CAAC/C,UAAU,GAAG,IAAI;MAE3BwB,UAAU,CAACW,GAAG,CAACY,SAAS,CAAC;IAC3B;IAEA,OAAOvB,UAAU;EACnB,CAAC;;EAED;EACA,MAAM0B,YAAY,GAAGA,CAAA,KAAM;IAAA,IAAAC,oBAAA,EAAAC,qBAAA;IACzB,IAAI,CAACnH,QAAQ,CAACgC,OAAO,EAAE;;IAEvB;IACA,MAAMoF,SAAS,GAAGpH,QAAQ,CAACgC,OAAO,CAACqF,QAAQ,CAACC,IAAI,CAACzD,KAAK,IAAIA,KAAK,CAAC0D,QAAQ,CAACC,QAAQ,CAAC;IAClF,IAAIJ,SAAS,EAAE;MACbpH,QAAQ,CAACgC,OAAO,CAACyF,MAAM,CAACL,SAAS,CAAC;MAClC,IAAIA,SAAS,CAACM,QAAQ,EAAEN,SAAS,CAACM,QAAQ,CAACrC,OAAO,CAAC,CAAC;MACpD,IAAI+B,SAAS,CAACzC,QAAQ,EAAEyC,SAAS,CAACzC,QAAQ,CAACU,OAAO,CAAC,CAAC;IACtD;;IAEA;IACA,MAAM5E,IAAI,GAAGC,IAAI,CAACC,IAAI,CAACd,SAAS,CAACe,IAAI,CAACC,MAAM,CAAC;IAC7C,MAAM8G,UAAU,GAAGjH,IAAI,CAACkH,GAAG,CAACnH,IAAI,GAAG,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC;IAC5C,MAAMoH,cAAc,GAAG,IAAI5I,KAAK,CAAC6I,aAAa,CAACH,UAAU,EAAEA,UAAU,CAAC;IACtE,MAAMI,cAAc,GAAG,IAAI9I,KAAK,CAAC2G,oBAAoB,CAAC;MACpDC,KAAK,EAAE,QAAQ;MAAE;MACjBE,SAAS,EAAE,GAAG;MACdD,SAAS,EAAE;IACb,CAAC,CAAC;;IAEF;IACA,KAAAoB,oBAAA,GAAI9G,WAAW,CAAC4B,OAAO,cAAAkF,oBAAA,gBAAAC,qBAAA,GAAnBD,oBAAA,CAAqBjF,KAAK,cAAAkF,qBAAA,eAA1BA,qBAAA,CAA4BjF,OAAO,EAAE;MACvC6F,cAAc,CAACC,GAAG,GAAG5H,WAAW,CAAC4B,OAAO,CAACC,KAAK,CAACC,OAAO,CAAC+F,KAAK,CAAC,CAAC,CAAC,CAAC;MAChEF,cAAc,CAACC,GAAG,CAACpF,MAAM,CAACC,GAAG,CAACpC,IAAI,EAAEA,IAAI,CAAC;MACzCsH,cAAc,CAACC,GAAG,CAACvF,KAAK,GAAGsF,cAAc,CAACC,GAAG,CAACtF,KAAK,GAAGzD,KAAK,CAAC0D,cAAc;MAC1EoF,cAAc,CAACG,WAAW,GAAG,IAAI;IACnC;IAEA,MAAMC,MAAM,GAAG,IAAIlJ,KAAK,CAACgH,IAAI,CAAC4B,cAAc,EAAEE,cAAc,CAAC;IAC7DI,MAAM,CAAC3B,QAAQ,CAACjG,CAAC,GAAG,CAACG,IAAI,CAAC+F,EAAE,GAAG,CAAC;IAChC0B,MAAM,CAAChH,QAAQ,CAACX,CAAC,GAAG,CAAC;IACrB2H,MAAM,CAACnE,aAAa,GAAG,IAAI;IAC3BmE,MAAM,CAACZ,QAAQ,CAACC,QAAQ,GAAG,IAAI;IAC/BxH,QAAQ,CAACgC,OAAO,CAACkE,GAAG,CAACiC,MAAM,CAAC;EAC9B,CAAC;;EAED;EACA,MAAMC,WAAW,GAAGA,CAAA,KAAM;IACxB,IAAI,CAACpI,QAAQ,CAACgC,OAAO,EAAE;;IAEvB;IACA,MAAMqG,QAAQ,GAAGrI,QAAQ,CAACgC,OAAO,CAACqF,QAAQ,CAACiB,MAAM,CAACzE,KAAK,IAAIA,KAAK,CAAC0D,QAAQ,CAACgB,MAAM,CAAC;IACjFF,QAAQ,CAAC/F,OAAO,CAACkG,IAAI,IAAI;MACvBxI,QAAQ,CAACgC,OAAO,CAACyF,MAAM,CAACe,IAAI,CAAC;MAC7B,IAAIA,IAAI,CAACd,QAAQ,EAAEc,IAAI,CAACd,QAAQ,CAACrC,OAAO,CAAC,CAAC;MAC1C,IAAImD,IAAI,CAAC7D,QAAQ,EAAE6D,IAAI,CAAC7D,QAAQ,CAACU,OAAO,CAAC,CAAC;IAC5C,CAAC,CAAC;;IAEF;IACA,MAAM5E,IAAI,GAAGC,IAAI,CAACC,IAAI,CAACd,SAAS,CAACe,IAAI,CAACC,MAAM,CAAC;IAC7C,MAAM4H,QAAQ,GAAG,IAAI,CAAC,CAAC;IACvB,MAAM3H,MAAM,GAAG,CAACL,IAAI,GAAG,CAAC,IAAI,CAAC;IAE7BZ,SAAS,CAACe,IAAI,CAAC0B,OAAO,CAAC,CAACkG,IAAI,EAAEE,KAAK,KAAK;MACtC,IAAIF,IAAI,CAACG,QAAQ,EAAE;QAAA,IAAAC,qBAAA,EAAAC,qBAAA;QACjB,MAAMtI,CAAC,GAAGG,IAAI,CAACoI,KAAK,CAACJ,KAAK,GAAGjI,IAAI,CAAC;QAClC,MAAMM,CAAC,GAAG2H,KAAK,GAAGjI,IAAI;QAEtB,MAAMiH,QAAQ,GAAG,IAAIzI,KAAK,CAAC6I,aAAa,CAACW,QAAQ,EAAEA,QAAQ,CAAC;QAC5D,MAAM9D,QAAQ,GAAG,IAAI1F,KAAK,CAAC2G,oBAAoB,CAAC;UAC9CC,KAAK,EAAE,QAAQ;UAAE;UACjBE,SAAS,EAAE,GAAG;UACdD,SAAS,EAAE;QACb,CAAC,CAAC;;QAEF;QACA,KAAA8C,qBAAA,GAAIxI,WAAW,CAAC4B,OAAO,cAAA4G,qBAAA,gBAAAC,qBAAA,GAAnBD,qBAAA,CAAqBzG,IAAI,cAAA0G,qBAAA,eAAzBA,qBAAA,CAA2B3G,OAAO,EAAE;UACtCyC,QAAQ,CAACqD,GAAG,GAAG5H,WAAW,CAAC4B,OAAO,CAACG,IAAI,CAACD,OAAO,CAAC+F,KAAK,CAAC,CAAC,CAAC,CAAC;UACzDtD,QAAQ,CAACqD,GAAG,CAACpF,MAAM,CAACC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC;UAC7B8B,QAAQ,CAACqD,GAAG,CAACvF,KAAK,GAAGkC,QAAQ,CAACqD,GAAG,CAACtF,KAAK,GAAGzD,KAAK,CAAC0D,cAAc;UAC9DgC,QAAQ,CAACuD,WAAW,GAAG,IAAI;QAC7B;QAEA,MAAMa,IAAI,GAAG,IAAI9J,KAAK,CAACgH,IAAI,CAACyB,QAAQ,EAAE/C,QAAQ,CAAC;QAC/CoE,IAAI,CAACvC,QAAQ,CAACjG,CAAC,GAAG,CAACG,IAAI,CAAC+F,EAAE,GAAG,CAAC;QAC9BsC,IAAI,CAAC5H,QAAQ,CAAC0B,GAAG,CAACtC,CAAC,GAAGO,MAAM,EAAE,IAAI,EAAEC,CAAC,GAAGD,MAAM,CAAC,CAAC,CAAC;QACjDiI,IAAI,CAAC/E,aAAa,GAAG,IAAI;QACzB+E,IAAI,CAACxB,QAAQ,CAACgB,MAAM,GAAG,IAAI;QAE3BvI,QAAQ,CAACgC,OAAO,CAACkE,GAAG,CAAC6C,IAAI,CAAC;MAC5B;IACF,CAAC,CAAC;;IAEF;IACA,MAAMC,OAAO,GAAGhJ,QAAQ,CAACgC,OAAO,CAACqF,QAAQ,CAACC,IAAI,CAACzD,KAAK,IAAIA,KAAK,YAAY5E,KAAK,CAACgK,UAAU,CAAC;IAC1F,IAAID,OAAO,EAAE;MACXhJ,QAAQ,CAACgC,OAAO,CAACyF,MAAM,CAACuB,OAAO,CAAC;MAChCA,OAAO,CAACrE,QAAQ,CAACU,OAAO,CAAC,CAAC;MAC1B2D,OAAO,CAACtB,QAAQ,CAACrC,OAAO,CAAC,CAAC;IAC5B;IAEA,MAAM6D,UAAU,GAAG,IAAIjK,KAAK,CAACgK,UAAU,CAACxI,IAAI,EAAEA,IAAI,EAAE,QAAQ,EAAE,QAAQ,CAAC;IACvEyI,UAAU,CAAC/H,QAAQ,CAACX,CAAC,GAAG,IAAI;IAC5B0I,UAAU,CAACvE,QAAQ,CAACwE,OAAO,GAAG,GAAG;IACjCD,UAAU,CAACvE,QAAQ,CAACyE,WAAW,GAAG,IAAI;IACtCpJ,QAAQ,CAACgC,OAAO,CAACkE,GAAG,CAACgD,UAAU,CAAC;;IAEhC;IACAjC,YAAY,CAAC,CAAC;EAChB,CAAC;EAEDjI,SAAS,CAAC,MAAM;IACd,IAAI,CAACe,SAAS,CAACiC,OAAO,EAAE;;IAExB;IACA,MAAMuB,KAAK,GAAG,IAAItE,KAAK,CAACoK,KAAK,CAAC,CAAC;IAC/B9F,KAAK,CAAC+F,UAAU,GAAG,IAAIrK,KAAK,CAACsK,KAAK,CAAC,QAAQ,CAAC;IAC5ChG,KAAK,CAACiG,GAAG,GAAG,IAAIvK,KAAK,CAACwK,OAAO,CAAC,QAAQ,EAAE,IAAI,CAAC;IAC7CzJ,QAAQ,CAACgC,OAAO,GAAGuB,KAAK;;IAExB;IACA,MAAMmG,MAAM,GAAG,IAAIzK,KAAK,CAAC0K,iBAAiB,CAAC,EAAE,EAAE,CAAC,EAAE,GAAG,EAAE,IAAI,CAAC;IAC5D,MAAMC,aAAa,GAAG5I,uBAAuB,CAAC,CAAC;IAC/C0I,MAAM,CAACvI,QAAQ,CAAC+D,IAAI,CAAC0E,aAAa,CAACzI,QAAQ,CAAC;IAC5CuI,MAAM,CAACG,MAAM,CAACD,aAAa,CAACvI,MAAM,CAAC;;IAEnC;IACA,MAAM6C,QAAQ,GAAG,IAAIjF,KAAK,CAAC6K,aAAa,CAAC;MACvCC,MAAM,EAAEhK,SAAS,CAACiC,OAAO;MACzBgI,SAAS,EAAE,IAAI;MACfC,eAAe,EAAE,kBAAkB;MACnCC,OAAO,EAAE;IACX,CAAC,CAAC;IACFhG,QAAQ,CAACiG,OAAO,CAAC,GAAG,EAAE,GAAG,CAAC;IAC1BjG,QAAQ,CAACkG,SAAS,CAACC,OAAO,GAAG,IAAI;IACjCnG,QAAQ,CAACkG,SAAS,CAACE,IAAI,GAAGrL,KAAK,CAACsL,gBAAgB;IAChDrG,QAAQ,CAACsG,gBAAgB,GAAGvL,KAAK,CAACwL,cAAc;IAChDvG,QAAQ,CAACwG,WAAW,GAAGzL,KAAK,CAAC0L,qBAAqB;IAClDzG,QAAQ,CAAC0G,mBAAmB,GAAG,GAAG;IAClC1G,QAAQ,CAAC2G,aAAa,CAACC,MAAM,CAACC,gBAAgB,CAAC;;IAE/C;IACA,MAAMC,MAAM,GAAG/G,oBAAoB,CAACC,QAAQ,CAAC;IAC7CX,KAAK,CAAC0H,WAAW,GAAGD,MAAM;;IAE1B;IACA,MAAME,YAAY,GAAG,IAAIjM,KAAK,CAACkM,YAAY,CAAC,QAAQ,EAAE,GAAG,CAAC;IAC1D5H,KAAK,CAAC2C,GAAG,CAACgF,YAAY,CAAC;IAEvB,MAAME,QAAQ,GAAG,IAAInM,KAAK,CAACoM,gBAAgB,CAAC,QAAQ,EAAE,GAAG,CAAC;IAC1DD,QAAQ,CAACjK,QAAQ,CAAC0B,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC;IAChCuI,QAAQ,CAACrH,UAAU,GAAG,IAAI;IAC1BqH,QAAQ,CAACE,MAAM,CAACC,OAAO,CAACC,KAAK,GAAG,IAAI;IACpCJ,QAAQ,CAACE,MAAM,CAACC,OAAO,CAACrK,MAAM,GAAG,IAAI;IACrCkK,QAAQ,CAACE,MAAM,CAAC5B,MAAM,CAAC+B,IAAI,GAAG,GAAG;IACjCL,QAAQ,CAACE,MAAM,CAAC5B,MAAM,CAACgC,GAAG,GAAG,EAAE;IAC/BN,QAAQ,CAACE,MAAM,CAAC5B,MAAM,CAACiC,IAAI,GAAG,CAAC,EAAE;IACjCP,QAAQ,CAACE,MAAM,CAAC5B,MAAM,CAACkC,KAAK,GAAG,EAAE;IACjCR,QAAQ,CAACE,MAAM,CAAC5B,MAAM,CAACmC,GAAG,GAAG,EAAE;IAC/BT,QAAQ,CAACE,MAAM,CAAC5B,MAAM,CAACoC,MAAM,GAAG,CAAC,EAAE;IACnCV,QAAQ,CAACE,MAAM,CAACS,IAAI,GAAG,CAAC,KAAK;IAC7BxI,KAAK,CAAC2C,GAAG,CAACkF,QAAQ,CAAC;;IAEnB;IACA,MAAMY,WAAW,GAAG,IAAI/M,KAAK,CAACgN,UAAU,CAAC,QAAQ,EAAE,GAAG,EAAE,EAAE,CAAC;IAC3DD,WAAW,CAAC7K,QAAQ,CAAC0B,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;IACjCU,KAAK,CAAC2C,GAAG,CAAC8F,WAAW,CAAC;IAEtB,MAAME,WAAW,GAAG,IAAIjN,KAAK,CAACgN,UAAU,CAAC,QAAQ,EAAE,GAAG,EAAE,EAAE,CAAC;IAC3DC,WAAW,CAAC/K,QAAQ,CAAC0B,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;IACnCU,KAAK,CAAC2C,GAAG,CAACgG,WAAW,CAAC;;IAEtB;IACA9D,WAAW,CAAC,CAAC;;IAEb;IACA,MAAM+D,QAAQ,GAAG,IAAI9M,cAAc,CAAC6E,QAAQ,CAAC;IAC7ChE,WAAW,CAAC8B,OAAO,GAAGmK,QAAQ;IAE9B,MAAMC,UAAU,GAAG,IAAI9M,UAAU,CAACiE,KAAK,EAAEmG,MAAM,CAAC;IAChDyC,QAAQ,CAACE,OAAO,CAACD,UAAU,CAAC;IAE5B,MAAME,SAAS,GAAG,IAAI/M,eAAe,CACnC,IAAIN,KAAK,CAACsN,OAAO,CAAC,GAAG,EAAE,GAAG,CAAC,EAC3B,GAAG;IAAG;IACN,GAAG;IAAG;IACN,IAAI,CAAE;IACR,CAAC;IACDJ,QAAQ,CAACE,OAAO,CAACC,SAAS,CAAC;IAE3B,MAAME,QAAQ,GAAG,IAAIhN,QAAQ,CAAC,GAAG,EAAE,GAAG,CAAC;IACvC2M,QAAQ,CAACE,OAAO,CAACG,QAAQ,CAAC;;IAE1B;IACA,MAAMC,QAAQ,GAAG,IAAIvN,aAAa,CAACwK,MAAM,EAAExF,QAAQ,CAACwI,UAAU,CAAC;IAC/DD,QAAQ,CAACE,aAAa,GAAG,IAAI;IAC7BF,QAAQ,CAACG,aAAa,GAAG,IAAI;IAC7BH,QAAQ,CAACI,kBAAkB,GAAG,KAAK;IACnCJ,QAAQ,CAACK,WAAW,GAAG,CAAC;IACxBL,QAAQ,CAACM,WAAW,GAAG,EAAE;IACzBN,QAAQ,CAACO,aAAa,GAAGtM,IAAI,CAAC+F,EAAE,GAAG,GAAG;IACtCgG,QAAQ,CAACQ,aAAa,GAAGvM,IAAI,CAAC+F,EAAE,GAAG,CAAC;IACpCgG,QAAQ,CAACS,UAAU,GAAG,IAAI;IAC1BT,QAAQ,CAACU,SAAS,GAAG,GAAG;IACxBV,QAAQ,CAACW,WAAW,GAAG,GAAG;;IAE1B;IACA1D,MAAM,CAACvI,QAAQ,CAAC+D,IAAI,CAAC0E,aAAa,CAACzI,QAAQ,CAAC;IAC5CsL,QAAQ,CAACpL,MAAM,CAAC6D,IAAI,CAAC0E,aAAa,CAACvI,MAAM,CAAC;IAC1CoL,QAAQ,CAACY,MAAM,CAAC,CAAC;;IAEjB;IACA1L,OAAO,CAAC2L,GAAG,CAAC,CAAChM,YAAY,CAAC,CAAC,EAAE0B,UAAU,CAAC,CAAC,CAAC,CAAC,CAACuK,IAAI,CAAC,MAAM;MACrD;MACA,IAAIpN,SAAS,CAAC6B,OAAO,CAACsB,KAAK,EAAE;QAC3B,MAAMA,KAAK,GAAGnD,SAAS,CAAC6B,OAAO,CAACsB,KAAK,CAAC2E,KAAK,CAAC,CAAC;QAC7C3E,KAAK,CAACiB,KAAK,CAAC1B,GAAG,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC;QAC9BS,KAAK,CAACM,QAAQ,CAAEC,KAAK,IAAK;UACxB,IAAIA,KAAK,CAACC,MAAM,EAAE;YAChBD,KAAK,CAACE,UAAU,GAAG,IAAI;YACvBF,KAAK,CAACc,QAAQ,CAAC6I,eAAe,GAAG,CAAC;UACpC;QACF,CAAC,CAAC;QACFjK,KAAK,CAAC2C,GAAG,CAAC5C,KAAK,CAAC;QAChBrD,QAAQ,CAAC+B,OAAO,GAAGsB,KAAK;MAC1B,CAAC,MAAM;QACLP,OAAO,CAAC0K,GAAG,CAAC,4BAA4B,CAAC;QACzC,MAAMC,aAAa,GAAGpI,mBAAmB,CAAC,CAAC;QAC3C/B,KAAK,CAAC2C,GAAG,CAACwH,aAAa,CAAC;QACxBzN,QAAQ,CAAC+B,OAAO,GAAG0L,aAAa;MAClC;IACF,CAAC,CAAC,CAACC,KAAK,CAAC7K,KAAK,IAAI;MAChBC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;MAC7C,MAAM4K,aAAa,GAAGpI,mBAAmB,CAAC,CAAC;MAC3C/B,KAAK,CAAC2C,GAAG,CAACwH,aAAa,CAAC;MACxBzN,QAAQ,CAAC+B,OAAO,GAAG0L,aAAa;IAClC,CAAC,CAAC;;IAEF;IACA,IAAIE,QAAQ,GAAG,CAAC;IAChB,MAAMC,OAAO,GAAIC,IAAI,IAAK;MACxBC,qBAAqB,CAACF,OAAO,CAAC;MAE9B,MAAMG,KAAK,GAAG,CAACF,IAAI,GAAGF,QAAQ,IAAI,IAAI;MACtCA,QAAQ,GAAGE,IAAI;;MAEf;MACA,IAAI7N,QAAQ,CAAC+B,OAAO,EAAE;QACpB,MAAMiM,UAAU,GAAG,GAAG;QACtBhO,QAAQ,CAAC+B,OAAO,CAACb,QAAQ,CAACX,CAAC,GAAGyN,UAAU,GAAGvN,IAAI,CAACiG,GAAG,CAACmH,IAAI,GAAG,KAAK,CAAC,GAAG,GAAG;;QAEvE;QACA,IAAI,CAAC3N,SAAS,CAAC6B,OAAO,CAACsB,KAAK,EAAE;UAC5BrD,QAAQ,CAAC+B,OAAO,CAACqF,QAAQ,CAAC/E,OAAO,CAAC,CAACuB,KAAK,EAAE6E,KAAK,KAAK;YAClD,IAAIA,KAAK,GAAG,CAAC,EAAE;cAAE;cACf7E,KAAK,CAAC2C,QAAQ,CAAChG,CAAC,IAAI,EAAE,GAAGwN,KAAK;YAChC;UACF,CAAC,CAAC;QACJ;MACF;;MAEA;MACAvB,QAAQ,CAACY,MAAM,CAAC,CAAC;MACjBlB,QAAQ,CAAC+B,MAAM,CAAC,CAAC;IACnB,CAAC;IACDL,OAAO,CAAC,CAAC,CAAC;;IAEV;IACA,OAAO,MAAM;MACX3J,QAAQ,CAACmB,OAAO,CAAC,CAAC;MAClB8G,QAAQ,CAAC9G,OAAO,CAAC,CAAC;MAClBoH,QAAQ,CAACpH,OAAO,CAAC,CAAC;MAClB2F,MAAM,CAAC3F,OAAO,CAAC,CAAC;MAEhBjD,MAAM,CAACC,MAAM,CAACjC,WAAW,CAAC4B,OAAO,CAAC,CAACM,OAAO,CAACC,QAAQ,IAAI;QACrDH,MAAM,CAACC,MAAM,CAACE,QAAQ,CAAC,CAACD,OAAO,CAACE,OAAO,IAAIA,OAAO,CAAC6C,OAAO,CAAC,CAAC,CAAC;MAC/D,CAAC,CAAC;MAEF9B,KAAK,CAACK,QAAQ,CAAEuK,MAAM,IAAK;QACzB,IAAIA,MAAM,CAACzG,QAAQ,EAAEyG,MAAM,CAACzG,QAAQ,CAACrC,OAAO,CAAC,CAAC;QAC9C,IAAI8I,MAAM,CAACxJ,QAAQ,EAAE;UACnB,IAAIyJ,KAAK,CAACC,OAAO,CAACF,MAAM,CAACxJ,QAAQ,CAAC,EAAE;YAClCwJ,MAAM,CAACxJ,QAAQ,CAACrC,OAAO,CAACqC,QAAQ,IAAIA,QAAQ,CAACU,OAAO,CAAC,CAAC,CAAC;UACzD,CAAC,MAAM;YACL8I,MAAM,CAACxJ,QAAQ,CAACU,OAAO,CAAC,CAAC;UAC3B;QACF;MACF,CAAC,CAAC;IACJ,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;;EAEN;EACArG,SAAS,CAAC,MAAM;IACd,IAAI,CAACiB,QAAQ,CAAC+B,OAAO,IAAI,CAACnC,SAAS,CAACyO,aAAa,EAAE;IAEnD,MAAMC,SAAS,GAAGlO,WAAW,CAACR,SAAS,CAACyO,aAAa,CAAC/N,CAAC,EAAEV,SAAS,CAACyO,aAAa,CAAC9N,CAAC,CAAC;;IAEnF;IACA,MAAMgO,QAAQ,GAAG,GAAG,CAAC,CAAC;IACtB,MAAMC,aAAa,GAAG;MACpBlO,CAAC,EAAEN,QAAQ,CAAC+B,OAAO,CAACb,QAAQ,CAACZ,CAAC;MAC9BC,CAAC,EAAEP,QAAQ,CAAC+B,OAAO,CAACb,QAAQ,CAACX,CAAC;MAC9BO,CAAC,EAAEd,QAAQ,CAAC+B,OAAO,CAACb,QAAQ,CAACJ;IAC/B,CAAC;IACD,MAAM2N,SAAS,GAAGC,IAAI,CAACC,GAAG,CAAC,CAAC;IAE5B,MAAMf,OAAO,GAAGA,CAAA,KAAM;MACpB,MAAMgB,OAAO,GAAGF,IAAI,CAACC,GAAG,CAAC,CAAC,GAAGF,SAAS;MACtC,MAAMI,QAAQ,GAAGpO,IAAI,CAACqO,GAAG,CAACF,OAAO,GAAGL,QAAQ,EAAE,CAAC,CAAC;;MAEhD;MACA,MAAMQ,CAAC,GAAGF,QAAQ,GAAG,GAAG,GACpB,CAAC,GAAGA,QAAQ,GAAGA,QAAQ,GAAGA,QAAQ,GAClC,CAAC,GAAGpO,IAAI,CAACuO,GAAG,CAAC,CAAC,CAAC,GAAGH,QAAQ,GAAG,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC;;MAE1C;MACA7O,QAAQ,CAAC+B,OAAO,CAACb,QAAQ,CAACZ,CAAC,GAAGkO,aAAa,CAAClO,CAAC,GAAG,CAACgO,SAAS,CAAChO,CAAC,GAAGkO,aAAa,CAAClO,CAAC,IAAIyO,CAAC;MACnF/O,QAAQ,CAAC+B,OAAO,CAACb,QAAQ,CAACJ,CAAC,GAAG0N,aAAa,CAAC1N,CAAC,GAAG,CAACwN,SAAS,CAACxN,CAAC,GAAG0N,aAAa,CAAC1N,CAAC,IAAIiO,CAAC;MACnF/O,QAAQ,CAAC+B,OAAO,CAACb,QAAQ,CAACX,CAAC,GAAG,GAAG,GAAGE,IAAI,CAACiG,GAAG,CAACgI,IAAI,CAACC,GAAG,CAAC,CAAC,GAAG,KAAK,CAAC,GAAG,GAAG,CAAC,CAAC;;MAExE,IAAIE,QAAQ,GAAG,CAAC,EAAE;QAChBf,qBAAqB,CAACF,OAAO,CAAC;MAChC;IACF,CAAC;IAEDA,OAAO,CAAC,CAAC;EACX,CAAC,EAAE,CAAChO,SAAS,CAACyO,aAAa,EAAEzO,SAAS,CAACe,IAAI,CAACC,MAAM,EAAER,WAAW,CAAC,CAAC;;EAEjE;EACArB,SAAS,CAAC,MAAM;IACdoJ,WAAW,CAAC,CAAC;EACf,CAAC,EAAE,CAACvI,SAAS,CAACe,IAAI,CAAC,CAAC;;EAEpB;EACA5B,SAAS,CAAC,MAAM;IACd,IAAI,CAACe,SAAS,CAACiC,OAAO,EAAE;IAExB,MAAMkN,SAAS,GAAGlO,uBAAuB,CAAC,CAAC;;IAE3C;IACA,MAAM+I,MAAM,GAAGhK,SAAS,CAACiC,OAAO;IAChC,MAAMyK,QAAQ,GAAG1C,MAAM,CAACoF,UAAU;IAElC,IAAI1C,QAAQ,EAAE;MACZ;MACA,MAAM+B,QAAQ,GAAG,IAAI,CAAC,CAAC;MACvB,MAAMC,aAAa,GAAGhC,QAAQ,CAAC0B,MAAM,CAAChN,QAAQ,CAAC8G,KAAK,CAAC,CAAC;MACtD,MAAMmH,WAAW,GAAG3C,QAAQ,CAACpL,MAAM,CAAC4G,KAAK,CAAC,CAAC;MAC3C,MAAMyG,SAAS,GAAGC,IAAI,CAACC,GAAG,CAAC,CAAC;MAE5B,MAAMf,OAAO,GAAGA,CAAA,KAAM;QACpB,MAAMgB,OAAO,GAAGF,IAAI,CAACC,GAAG,CAAC,CAAC,GAAGF,SAAS;QACtC,MAAMI,QAAQ,GAAGpO,IAAI,CAACqO,GAAG,CAACF,OAAO,GAAGL,QAAQ,EAAE,CAAC,CAAC;;QAEhD;QACA,MAAMQ,CAAC,GAAGF,QAAQ,GAAG,GAAG,GACpB,CAAC,GAAGA,QAAQ,GAAGA,QAAQ,GAAGA,QAAQ,GAClC,CAAC,GAAGpO,IAAI,CAACuO,GAAG,CAAC,CAAC,CAAC,GAAGH,QAAQ,GAAG,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC;;QAE1C;QACArC,QAAQ,CAAC0B,MAAM,CAAChN,QAAQ,CAACkO,WAAW,CAACZ,aAAa,EAAES,SAAS,CAAC/N,QAAQ,EAAE6N,CAAC,CAAC;QAC1EvC,QAAQ,CAACpL,MAAM,CAACgO,WAAW,CAACD,WAAW,EAAEF,SAAS,CAAC7N,MAAM,EAAE2N,CAAC,CAAC;QAC7DvC,QAAQ,CAACY,MAAM,CAAC,CAAC;QAEjB,IAAIyB,QAAQ,GAAG,CAAC,EAAE;UAChBf,qBAAqB,CAACF,OAAO,CAAC;QAChC;MACF,CAAC;MAEDA,OAAO,CAAC,CAAC;IACX;EACF,CAAC,EAAE,CAAChO,SAAS,CAACe,IAAI,CAACC,MAAM,CAAC,CAAC;EAE3B,oBACElB,OAAA;IAAK2P,KAAK,EAAE;MACV9D,KAAK,EAAE,OAAO;MACdtK,MAAM,EAAE,OAAO;MACfqO,eAAe,EAAE,SAAS;MAC1BC,MAAM,EAAE,QAAQ;MAChBC,YAAY,EAAE,KAAK;MACnBC,QAAQ,EAAE,QAAQ;MAClBC,SAAS,EAAE;IACb,CAAE;IAAAtI,QAAA,eACA1H,OAAA;MACEiQ,GAAG,EAAE7P,SAAU;MACfuP,KAAK,EAAE;QACL9D,KAAK,EAAE,MAAM;QACbtK,MAAM,EAAE;MACV;IAAE;MAAA2O,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV,CAAC;AAAClQ,EAAA,CAxjBIF,MAAM;AAAAqQ,EAAA,GAANrQ,MAAM;AA0jBZ,eAAeA,MAAM;AAAC,IAAAqQ,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}