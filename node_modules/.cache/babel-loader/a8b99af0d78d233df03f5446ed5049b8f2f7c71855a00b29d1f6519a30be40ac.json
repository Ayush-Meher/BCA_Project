{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\SPIDER\\\\Downloads\\\\Project\\\\Demo GPT\\\\Demo 1\\\\src\\\\components\\\\JavaScriptConsole.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport styled from 'styled-components';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ConsoleContainer = styled.div`\n  background-color: #1e1e1e;\n  border-radius: 5px;\n  padding: 10px;\n  margin: 10px;\n  height: 500px;\n  display: flex;\n  flex-direction: column;\n`;\n_c = ConsoleContainer;\nconst ConsoleOutput = styled.div`\n  color: #ffffff;\n  font-family: monospace;\n  flex-grow: 1;\n  overflow-y: auto;\n  padding: 10px;\n  white-space: pre-wrap;\n  background-color: #2d2d2d;\n  margin-bottom: 10px;\n  border-radius: 3px;\n`;\n_c2 = ConsoleOutput;\nconst ConsoleInput = styled.textarea`\n  background-color: #2d2d2d;\n  color: #ffffff;\n  font-family: monospace;\n  border: 1px solid #3f3f3f;\n  border-radius: 3px;\n  padding: 5px;\n  resize: none;\n  height: 150px;\n  margin-bottom: 5px;\n`;\n_c3 = ConsoleInput;\nconst ConsoleLine = styled.div`\n  color: ${props => props.error ? '#ff6b6b' : '#ffffff'};\n  margin: 2px 0;\n  font-family: monospace;\n  white-space: pre-wrap;\n  word-break: break-word;\n`;\n_c4 = ConsoleLine;\nconst ConsoleControls = styled.div`\n  display: flex;\n  justify-content: flex-end;\n  margin-top: 8px;\n  gap: 8px;\n`;\n_c5 = ConsoleControls;\nconst PlayButton = styled.button`\n  background-color: #4CAF50;\n  color: white;\n  padding: 8px;\n  border: none;\n  border-radius: 4px;\n  cursor: pointer;\n  width: 40px;\n  height: 40px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: 20px;\n  \n  &:hover {\n    background-color: #45a049;\n  }\n  \n  &:disabled {\n    background-color: #95a5a6;\n    cursor: not-allowed;\n  }\n`;\n_c6 = PlayButton;\nconst RunButton = styled.button`\n  background-color: #4CAF50;\n  color: white;\n  padding: 8px 15px;\n  border: none;\n  border-radius: 3px;\n  margin-top: 5px;\n  cursor: pointer;\n  &:hover {\n    background-color: #45a049;\n  }\n`;\nconst PlayPauseButton = styled.button`\n  background-color: #4CAF50;\n  color: white;\n  padding: 8px 15px;\n  border: none;\n  border-radius: 3px;\n  margin-top: 5px;\n  cursor: pointer;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 40px;\n  height: 40px;\n  \n  &:hover {\n    background-color: #45a049;\n  }\n  \n  &:disabled {\n    background-color: #95a5a6;\n    cursor: not-allowed;\n  }\n`;\nconst PlayIcon = styled.span`\n  display: inline-block;\n  width: 0;\n  height: 0;\n  border-style: solid;\n  border-width: 10px 0 10px 15px;\n  border-color: transparent transparent transparent white;\n  margin-left: 3px;\n`;\nconst PauseIcon = styled.span`\n  display: flex;\n  gap: 3px;\n  \n  &::before,\n  &::after {\n    content: '';\n    width: 5px;\n    height: 20px;\n    background-color: white;\n  }\n`;\n\n// Store console states globally\nconst consoleStates = {};\nconst JavaScriptConsole = ({\n  gameState,\n  setGameState,\n  consoleId,\n  content,\n  onContentChange,\n  onBuyItem,\n  onSellItem\n}) => {\n  _s();\n  const [input, setInput] = useState(content || '');\n  const [output, setOutput] = useState([{\n    text: '🌟 Welcome to the JavaScript Console! 🌟\\n',\n    type: 'info'\n  }, {\n    text: '📝 Basic Commands:\\n',\n    type: 'info'\n  }, {\n    text: '  • move(x, y)         - Move to coordinates (x,y)\\n',\n    type: 'info'\n  }, {\n    text: '  • scan()             - Get info about current tile\\n',\n    type: 'info'\n  }, {\n    text: '  • position()         - Get current coordinates\\n\\n',\n    type: 'info'\n  }, {\n    text: '🚜 Farming Commands:\\n',\n    type: 'info'\n  }, {\n    text: '  • plow()            - Plow the current tile\\n',\n    type: 'info'\n  }, {\n    text: '  • plant(\"crop\")     - Plant a crop (wheat unlocked, others in Tech Tree)\\n',\n    type: 'info'\n  }, {\n    text: '  • harvest()         - Harvest ready crop at current tile\\n\\n',\n    type: 'info'\n  }, {\n    text: '🏗️ Farm Management:\\n',\n    type: 'info'\n  }, {\n    text: '  • expand()          - Expand farm size (max 5x5)\\n',\n    type: 'info'\n  }, {\n    text: '  • sell(\"type\", amount) - Sell harvested crops\\n',\n    type: 'info'\n  }, {\n    text: '  • buy(\"type\", amount)  - Buy seeds for planting\\n\\n',\n    type: 'info'\n  }, {\n    text: '💡 Tips:\\n',\n    type: 'info'\n  }, {\n    text: '  • Start with expand() to increase farm size\\n',\n    type: 'info'\n  }, {\n    text: '  • Use scan() to check tile status\\n',\n    type: 'info'\n  }, {\n    text: '  • Crops must be planted on plowed land\\n',\n    type: 'info'\n  }, {\n    text: '  • Unlock more crops in the Tech Tree\\n',\n    type: 'info'\n  }, {\n    text: '  • Buy seeds before planting\\n\\n',\n    type: 'info'\n  }, {\n    text: '⌨️ Usage:\\n',\n    type: 'info'\n  }, {\n    text: '  • Type your code and press Play (▶) or Ctrl+Enter\\n',\n    type: 'info'\n  }, {\n    text: '  • Each command runs once when executed\\n',\n    type: 'info'\n  }, {\n    text: '  • Multiple commands can be entered on separate lines\\n\\n',\n    type: 'info'\n  }]);\n  const [farm, setFarm] = useState(null);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [currentLine, setCurrentLine] = useState(0);\n  const codeLines = useRef([]);\n  const executionInterval = useRef(null);\n  const farmRef = useRef(null);\n\n  // Initialize farm object only once and store in ref\n  useEffect(() => {\n    if (!farmRef.current) {\n      var _consoleStates$consol;\n      farmRef.current = {\n        money: gameState.money,\n        land: gameState.land,\n        size: Math.sqrt(gameState.land.length),\n        maxSize: 5,\n        drone: gameState.drone,\n        inventory: gameState.inventory,\n        expand: function () {\n          if (this.size >= this.maxSize) {\n            this.print(`Farm is already at maximum size (${this.maxSize}x${this.maxSize})`);\n            return false;\n          }\n          const newSize = this.size + 1;\n          const newLand = Array(newSize * newSize).fill().map((_, index) => {\n            if (index < this.land.length) {\n              return this.land[index];\n            }\n            return {\n              isPlowed: false,\n              hasCrop: false,\n              cropType: null,\n              cropState: null,\n              plantedTime: null\n            };\n          });\n          setGameState(prev => ({\n            ...prev,\n            land: newLand\n          }));\n          this.land = newLand;\n          this.size = newSize;\n          this.print(`Farm expanded to ${newSize}x${newSize}`);\n          return true;\n        },\n        move: function (x, y) {\n          if (0 <= x && x < this.size && 0 <= y && y < this.size) {\n            setGameState(prev => ({\n              ...prev,\n              dronePosition: {\n                x,\n                y\n              },\n              drone: {\n                x,\n                y\n              }\n            }));\n            this.drone = {\n              x,\n              y\n            };\n            this.print(`Moved to (${x}, ${y})`);\n            return true;\n          }\n          this.print(\"Invalid coordinates\");\n          return false;\n        },\n        plow: function () {\n          const x = this.drone.x;\n          const y = this.drone.y;\n          const index = y * this.size + x;\n          if (this.land[index].isPlowed) {\n            this.print(\"This tile is already plowed\");\n            return false;\n          }\n          const newLand = [...this.land];\n          newLand[index] = {\n            ...newLand[index],\n            isPlowed: true\n          };\n          setGameState(prev => ({\n            ...prev,\n            land: newLand\n          }));\n          this.land = newLand;\n          this.print(`Successfully plowed tile at (${x}, ${y})`);\n          return true;\n        },\n        plant: function (cropType) {\n          const x = this.drone.x;\n          const y = this.drone.y;\n          const index = y * this.size + x;\n\n          // Check if crop is unlocked\n          if (!gameState.unlockedCrops.includes(cropType)) {\n            this.print(`Cannot plant ${cropType} - You need to unlock it first in the Tech Tree!`);\n            return false;\n          }\n\n          // Check if we have seeds using gameState's inventory\n          if (!gameState.inventory[`${cropType}_seeds`] || gameState.inventory[`${cropType}_seeds`] <= 0) {\n            this.print(`Cannot plant ${cropType} - No seeds available!`);\n            return false;\n          }\n          if (this.land[index].isPlowed && !this.land[index].hasCrop) {\n            const newLand = [...this.land];\n            newLand[index] = {\n              ...newLand[index],\n              hasCrop: true,\n              cropType: cropType,\n              cropState: 'growing',\n              plantedTime: Date.now()\n            };\n\n            // Update gameState's inventory\n            const newInventory = {\n              ...gameState.inventory,\n              [`${cropType}_seeds`]: gameState.inventory[`${cropType}_seeds`] - 1\n            };\n            setGameState(prev => ({\n              ...prev,\n              land: newLand,\n              inventory: newInventory\n            }));\n            this.land = newLand;\n            this.print(`Successfully planted ${cropType} at (${x}, ${y})`);\n            return true;\n          }\n          this.print(`Failed to plant ${cropType} - Make sure the tile is plowed and empty`);\n          return false;\n        },\n        harvest: function () {\n          const x = this.drone.x;\n          const y = this.drone.y;\n          const index = y * this.size + x;\n          if (this.land[index].hasCrop && this.land[index].cropState === 'ready') {\n            const cropType = this.land[index].cropType;\n            const newLand = [...this.land];\n            newLand[index] = {\n              ...newLand[index],\n              hasCrop: false,\n              cropType: null,\n              cropState: null,\n              plantedTime: null\n            };\n\n            // Update gameState's inventory\n            const newInventory = {\n              ...gameState.inventory,\n              [cropType]: (gameState.inventory[cropType] || 0) + 1\n            };\n            setGameState(prev => ({\n              ...prev,\n              land: newLand,\n              inventory: newInventory\n            }));\n            this.land = newLand;\n            this.print(`Successfully harvested ${cropType} at (${x}, ${y})`);\n            return true;\n          }\n          this.print(`Failed to harvest - No ready crop at (${x}, ${y})`);\n          return false;\n        },\n        scan: function () {\n          const x = this.drone.x;\n          const y = this.drone.y;\n          const index = y * this.size + x;\n          const tile = this.land[index];\n          let status = \"empty\";\n          if (tile.isPlowed) {\n            status = \"plowed\";\n          }\n          if (tile.hasCrop) {\n            status = `${tile.cropState} ${tile.cropType}`;\n          }\n          this.print(`Scan results at (${x}, ${y}): ${status}`);\n          return status;\n        },\n        position: function () {\n          return {\n            x: this.drone.x,\n            y: this.drone.y\n          };\n        },\n        buy: function (itemType, amount = 1) {\n          const prices = {\n            wheat_seeds: 10,\n            corn_seeds: 20,\n            potato_seeds: 15\n          };\n          const cost = prices[itemType];\n          if (!cost) {\n            this.print(`Cannot buy ${itemType} - Item not available in shop!`);\n            return false;\n          }\n          if (onBuyItem(itemType, amount, cost)) {\n            this.print(`Bought ${amount} ${itemType} for $${cost * amount}`);\n            return true;\n          } else {\n            this.print(`Cannot buy ${itemType} - Not enough money!`);\n            return false;\n          }\n        },\n        sell: function (itemType, amount = 1) {\n          const prices = {\n            wheat: 25,\n            corn: 40,\n            potato: 30\n          };\n          const price = prices[itemType];\n          if (!price) {\n            this.print(`Cannot sell ${itemType} - Item not recognized!`);\n            return false;\n          }\n          if (onSellItem(itemType, amount, price)) {\n            this.print(`Sold ${amount} ${itemType} for $${price * amount}`);\n            return true;\n          } else {\n            this.print(`Cannot sell ${itemType} - Not enough in inventory!`);\n            return false;\n          }\n        },\n        toString: function () {\n          return `Farm(money=$${gameState.money}, size=${this.size}x${this.size}, inventory=${JSON.stringify(gameState.inventory)})`;\n        }\n      };\n      setFarm(farmRef.current);\n\n      // Only show initialization message once\n      if (!((_consoleStates$consol = consoleStates[consoleId]) !== null && _consoleStates$consol !== void 0 && _consoleStates$consol.initialized)) {\n        setOutput(prev => [...prev, {\n          text: `Farm initialized: ${farmRef.current.toString()}\\n`,\n          type: 'info'\n        }]);\n        if (consoleStates[consoleId]) {\n          consoleStates[consoleId].initialized = true;\n        }\n      }\n    }\n\n    // Update farm properties without recreating the object\n    if (farmRef.current) {\n      farmRef.current.money = gameState.money;\n      farmRef.current.land = gameState.land;\n      farmRef.current.size = Math.sqrt(gameState.land.length);\n      farmRef.current.drone = gameState.drone;\n      farmRef.current.inventory = gameState.inventory;\n    }\n  }, [gameState, consoleId]);\n\n  // Initialize or restore console state\n  useEffect(() => {\n    if (!consoleStates[consoleId]) {\n      consoleStates[consoleId] = {\n        input: '',\n        output: output,\n        isPlaying: false,\n        currentLine: 0,\n        initialized: false\n      };\n    } else {\n      setInput(consoleStates[consoleId].input);\n      setOutput(consoleStates[consoleId].output);\n      setIsPlaying(consoleStates[consoleId].isPlaying);\n      setCurrentLine(consoleStates[consoleId].currentLine);\n    }\n  }, [consoleId, output]);\n\n  // Save console state when it changes\n  useEffect(() => {\n    if (consoleStates[consoleId]) {\n      consoleStates[consoleId] = {\n        input,\n        output,\n        isPlaying,\n        currentLine,\n        initialized: true\n      };\n    }\n  }, [input, output, isPlaying, currentLine, consoleId]);\n\n  // Update parent when input changes\n  useEffect(() => {\n    onContentChange === null || onContentChange === void 0 ? void 0 : onContentChange(consoleId, input);\n  }, [input, consoleId, onContentChange]);\n\n  // Update local state when content prop changes\n  useEffect(() => {\n    if (content !== undefined && content !== input) {\n      setInput(content);\n    }\n  }, [content]);\n\n  // Update the print function in the farm object\n  useEffect(() => {\n    if (farm) {\n      farm.print = function (text) {\n        setOutput(prev => [...prev, {\n          text: text + '\\n',\n          type: 'normal'\n        }]);\n      };\n    }\n  }, [farm]);\n  const handleKeyDown = e => {\n    if (e.key === 'Enter' && e.ctrlKey) {\n      e.preventDefault();\n      togglePlayPause();\n    }\n  };\n  const executeLine = line => {\n    if (!farm) return;\n    try {\n      setOutput(prev => [...prev, {\n        text: '\\n>>> ' + line + '\\n',\n        type: 'command'\n      }]);\n\n      // Create a function that returns a Promise to handle async operations\n      const executeCode = new Function('farm', `\n        const move = farm.move.bind(farm);\n        const plow = farm.plow.bind(farm);\n        const plant = farm.plant.bind(farm);\n        const harvest = farm.harvest.bind(farm);\n        const scan = farm.scan.bind(farm);\n        const position = farm.position.bind(farm);\n        const expand = farm.expand.bind(farm);\n        const sell = farm.sell.bind(farm);\n        const buy = farm.buy.bind(farm);\n        \n        return new Promise((resolve, reject) => {\n          try {\n            const result = eval(${JSON.stringify(line)});\n            if (result instanceof Promise) {\n              result.then(resolve).catch(reject);\n            } else {\n              resolve(result);\n            }\n          } catch (error) {\n            farm.print('Error: ' + error.message);\n            reject(error);\n          }\n        });\n      `);\n      return executeCode(farm);\n    } catch (error) {\n      setOutput(prev => [...prev, {\n        text: 'Error: ' + error.message + '\\n',\n        type: 'error'\n      }]);\n      return Promise.reject(error);\n    }\n  };\n  const togglePlayPause = async () => {\n    if (!input.trim() || !farm) return;\n    if (!isPlaying) {\n      // Start playing\n      setIsPlaying(true);\n      try {\n        // Execute the entire code at once\n        const result = await executeLine(input);\n        if (result !== undefined) {\n          setOutput(prev => [...prev, {\n            text: result + '\\n',\n            type: 'normal'\n          }]);\n        }\n      } catch (error) {\n        console.error('Execution error:', error);\n      } finally {\n        setIsPlaying(false);\n      }\n    }\n  };\n\n  // Cleanup interval on unmount\n  useEffect(() => {\n    return () => {\n      if (executionInterval.current) {\n        clearInterval(executionInterval.current);\n      }\n    };\n  }, []);\n  const handleInputChange = e => {\n    setInput(e.target.value);\n  };\n  return /*#__PURE__*/_jsxDEV(ConsoleContainer, {\n    children: [/*#__PURE__*/_jsxDEV(ConsoleOutput, {\n      children: output.map((line, index) => /*#__PURE__*/_jsxDEV(ConsoleLine, {\n        error: line.type === 'error',\n        children: line.text\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 565,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 563,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ConsoleInput, {\n      id: `console-${consoleId}`,\n      value: input,\n      onChange: handleInputChange,\n      onKeyDown: handleKeyDown,\n      placeholder: \"Enter JavaScript code here...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 570,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ConsoleControls, {\n      children: /*#__PURE__*/_jsxDEV(PlayButton, {\n        onClick: togglePlayPause,\n        children: isPlaying ? '⏸️' : '▶️'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 578,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 577,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 562,\n    columnNumber: 5\n  }, this);\n};\n_s(JavaScriptConsole, \"+D/MB88+ofnC09/qxI+2BEc1eUg=\");\n_c7 = JavaScriptConsole;\nexport default JavaScriptConsole;\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7;\n$RefreshReg$(_c, \"ConsoleContainer\");\n$RefreshReg$(_c2, \"ConsoleOutput\");\n$RefreshReg$(_c3, \"ConsoleInput\");\n$RefreshReg$(_c4, \"ConsoleLine\");\n$RefreshReg$(_c5, \"ConsoleControls\");\n$RefreshReg$(_c6, \"PlayButton\");\n$RefreshReg$(_c7, \"JavaScriptConsole\");","map":{"version":3,"names":["React","useState","useEffect","useRef","styled","jsxDEV","_jsxDEV","ConsoleContainer","div","_c","ConsoleOutput","_c2","ConsoleInput","textarea","_c3","ConsoleLine","props","error","_c4","ConsoleControls","_c5","PlayButton","button","_c6","RunButton","PlayPauseButton","PlayIcon","span","PauseIcon","consoleStates","JavaScriptConsole","gameState","setGameState","consoleId","content","onContentChange","onBuyItem","onSellItem","_s","input","setInput","output","setOutput","text","type","farm","setFarm","isPlaying","setIsPlaying","currentLine","setCurrentLine","codeLines","executionInterval","farmRef","current","_consoleStates$consol","money","land","size","Math","sqrt","length","maxSize","drone","inventory","expand","print","newSize","newLand","Array","fill","map","_","index","isPlowed","hasCrop","cropType","cropState","plantedTime","prev","move","x","y","dronePosition","plow","plant","unlockedCrops","includes","Date","now","newInventory","harvest","scan","tile","status","position","buy","itemType","amount","prices","wheat_seeds","corn_seeds","potato_seeds","cost","sell","wheat","corn","potato","price","toString","JSON","stringify","initialized","undefined","handleKeyDown","e","key","ctrlKey","preventDefault","togglePlayPause","executeLine","line","executeCode","Function","message","Promise","reject","trim","result","console","clearInterval","handleInputChange","target","value","children","fileName","_jsxFileName","lineNumber","columnNumber","id","onChange","onKeyDown","placeholder","onClick","_c7","$RefreshReg$"],"sources":["C:/Users/SPIDER/Downloads/Project/Demo GPT/Demo 1/src/components/JavaScriptConsole.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst ConsoleContainer = styled.div`\r\n  background-color: #1e1e1e;\r\n  border-radius: 5px;\r\n  padding: 10px;\r\n  margin: 10px;\r\n  height: 500px;\r\n  display: flex;\r\n  flex-direction: column;\r\n`;\r\n\r\nconst ConsoleOutput = styled.div`\r\n  color: #ffffff;\r\n  font-family: monospace;\r\n  flex-grow: 1;\r\n  overflow-y: auto;\r\n  padding: 10px;\r\n  white-space: pre-wrap;\r\n  background-color: #2d2d2d;\r\n  margin-bottom: 10px;\r\n  border-radius: 3px;\r\n`;\r\n\r\nconst ConsoleInput = styled.textarea`\r\n  background-color: #2d2d2d;\r\n  color: #ffffff;\r\n  font-family: monospace;\r\n  border: 1px solid #3f3f3f;\r\n  border-radius: 3px;\r\n  padding: 5px;\r\n  resize: none;\r\n  height: 150px;\r\n  margin-bottom: 5px;\r\n`;\r\n\r\nconst ConsoleLine = styled.div`\r\n  color: ${props => props.error ? '#ff6b6b' : '#ffffff'};\r\n  margin: 2px 0;\r\n  font-family: monospace;\r\n  white-space: pre-wrap;\r\n  word-break: break-word;\r\n`;\r\n\r\nconst ConsoleControls = styled.div`\r\n  display: flex;\r\n  justify-content: flex-end;\r\n  margin-top: 8px;\r\n  gap: 8px;\r\n`;\r\n\r\nconst PlayButton = styled.button`\r\n  background-color: #4CAF50;\r\n  color: white;\r\n  padding: 8px;\r\n  border: none;\r\n  border-radius: 4px;\r\n  cursor: pointer;\r\n  width: 40px;\r\n  height: 40px;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  font-size: 20px;\r\n  \r\n  &:hover {\r\n    background-color: #45a049;\r\n  }\r\n  \r\n  &:disabled {\r\n    background-color: #95a5a6;\r\n    cursor: not-allowed;\r\n  }\r\n`;\r\n\r\nconst RunButton = styled.button`\r\n  background-color: #4CAF50;\r\n  color: white;\r\n  padding: 8px 15px;\r\n  border: none;\r\n  border-radius: 3px;\r\n  margin-top: 5px;\r\n  cursor: pointer;\r\n  &:hover {\r\n    background-color: #45a049;\r\n  }\r\n`;\r\n\r\nconst PlayPauseButton = styled.button`\r\n  background-color: #4CAF50;\r\n  color: white;\r\n  padding: 8px 15px;\r\n  border: none;\r\n  border-radius: 3px;\r\n  margin-top: 5px;\r\n  cursor: pointer;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  width: 40px;\r\n  height: 40px;\r\n  \r\n  &:hover {\r\n    background-color: #45a049;\r\n  }\r\n  \r\n  &:disabled {\r\n    background-color: #95a5a6;\r\n    cursor: not-allowed;\r\n  }\r\n`;\r\n\r\nconst PlayIcon = styled.span`\r\n  display: inline-block;\r\n  width: 0;\r\n  height: 0;\r\n  border-style: solid;\r\n  border-width: 10px 0 10px 15px;\r\n  border-color: transparent transparent transparent white;\r\n  margin-left: 3px;\r\n`;\r\n\r\nconst PauseIcon = styled.span`\r\n  display: flex;\r\n  gap: 3px;\r\n  \r\n  &::before,\r\n  &::after {\r\n    content: '';\r\n    width: 5px;\r\n    height: 20px;\r\n    background-color: white;\r\n  }\r\n`;\r\n\r\n// Store console states globally\r\nconst consoleStates = {};\r\n\r\nconst JavaScriptConsole = ({ \r\n  gameState, \r\n  setGameState, \r\n  consoleId, \r\n  content, \r\n  onContentChange,\r\n  onBuyItem,\r\n  onSellItem\r\n}) => {\r\n  const [input, setInput] = useState(content || '');\r\n  const [output, setOutput] = useState([\r\n    { text: '🌟 Welcome to the JavaScript Console! 🌟\\n', type: 'info' },\r\n    { text: '📝 Basic Commands:\\n', type: 'info' },\r\n    { text: '  • move(x, y)         - Move to coordinates (x,y)\\n', type: 'info' },\r\n    { text: '  • scan()             - Get info about current tile\\n', type: 'info' },\r\n    { text: '  • position()         - Get current coordinates\\n\\n', type: 'info' },\r\n    { text: '🚜 Farming Commands:\\n', type: 'info' },\r\n    { text: '  • plow()            - Plow the current tile\\n', type: 'info' },\r\n    { text: '  • plant(\"crop\")     - Plant a crop (wheat unlocked, others in Tech Tree)\\n', type: 'info' },\r\n    { text: '  • harvest()         - Harvest ready crop at current tile\\n\\n', type: 'info' },\r\n    { text: '🏗️ Farm Management:\\n', type: 'info' },\r\n    { text: '  • expand()          - Expand farm size (max 5x5)\\n', type: 'info' },\r\n    { text: '  • sell(\"type\", amount) - Sell harvested crops\\n', type: 'info' },\r\n    { text: '  • buy(\"type\", amount)  - Buy seeds for planting\\n\\n', type: 'info' },\r\n    { text: '💡 Tips:\\n', type: 'info' },\r\n    { text: '  • Start with expand() to increase farm size\\n', type: 'info' },\r\n    { text: '  • Use scan() to check tile status\\n', type: 'info' },\r\n    { text: '  • Crops must be planted on plowed land\\n', type: 'info' },\r\n    { text: '  • Unlock more crops in the Tech Tree\\n', type: 'info' },\r\n    { text: '  • Buy seeds before planting\\n\\n', type: 'info' },\r\n    { text: '⌨️ Usage:\\n', type: 'info' },\r\n    { text: '  • Type your code and press Play (▶) or Ctrl+Enter\\n', type: 'info' },\r\n    { text: '  • Each command runs once when executed\\n', type: 'info' },\r\n    { text: '  • Multiple commands can be entered on separate lines\\n\\n', type: 'info' }\r\n  ]);\r\n  const [farm, setFarm] = useState(null);\r\n  const [isPlaying, setIsPlaying] = useState(false);\r\n  const [currentLine, setCurrentLine] = useState(0);\r\n  const codeLines = useRef([]);\r\n  const executionInterval = useRef(null);\r\n  const farmRef = useRef(null);\r\n\r\n  // Initialize farm object only once and store in ref\r\n  useEffect(() => {\r\n    if (!farmRef.current) {\r\n      farmRef.current = {\r\n        money: gameState.money,\r\n        land: gameState.land,\r\n        size: Math.sqrt(gameState.land.length),\r\n        maxSize: 5,\r\n        drone: gameState.drone,\r\n        inventory: gameState.inventory,\r\n        \r\n        expand: function() {\r\n          if (this.size >= this.maxSize) {\r\n            this.print(`Farm is already at maximum size (${this.maxSize}x${this.maxSize})`);\r\n            return false;\r\n          }\r\n\r\n          const newSize = this.size + 1;\r\n          const newLand = Array(newSize * newSize).fill().map((_, index) => {\r\n            if (index < this.land.length) {\r\n              return this.land[index];\r\n            }\r\n            return {\r\n              isPlowed: false,\r\n              hasCrop: false,\r\n              cropType: null,\r\n              cropState: null,\r\n              plantedTime: null\r\n            };\r\n          });\r\n\r\n          setGameState(prev => ({ ...prev, land: newLand }));\r\n          this.land = newLand;\r\n          this.size = newSize;\r\n          this.print(`Farm expanded to ${newSize}x${newSize}`);\r\n          return true;\r\n        },\r\n        \r\n        move: function(x, y) {\r\n          if (0 <= x && x < this.size && 0 <= y && y < this.size) {\r\n            setGameState(prev => ({\r\n              ...prev,\r\n              dronePosition: { x, y },\r\n              drone: { x, y }\r\n            }));\r\n            this.drone = { x, y };\r\n            this.print(`Moved to (${x}, ${y})`);\r\n            return true;\r\n          }\r\n          this.print(\"Invalid coordinates\");\r\n          return false;\r\n        },\r\n\r\n        plow: function() {\r\n          const x = this.drone.x;\r\n          const y = this.drone.y;\r\n          const index = y * this.size + x;\r\n          if (this.land[index].isPlowed) {\r\n            this.print(\"This tile is already plowed\");\r\n            return false;\r\n          }\r\n          const newLand = [...this.land];\r\n          newLand[index] = { ...newLand[index], isPlowed: true };\r\n          setGameState(prev => ({ ...prev, land: newLand }));\r\n          this.land = newLand;\r\n          this.print(`Successfully plowed tile at (${x}, ${y})`);\r\n          return true;\r\n        },\r\n\r\n        plant: function(cropType) {\r\n          const x = this.drone.x;\r\n          const y = this.drone.y;\r\n          const index = y * this.size + x;\r\n          \r\n          // Check if crop is unlocked\r\n          if (!gameState.unlockedCrops.includes(cropType)) {\r\n            this.print(`Cannot plant ${cropType} - You need to unlock it first in the Tech Tree!`);\r\n            return false;\r\n          }\r\n          \r\n          // Check if we have seeds using gameState's inventory\r\n          if (!gameState.inventory[`${cropType}_seeds`] || gameState.inventory[`${cropType}_seeds`] <= 0) {\r\n            this.print(`Cannot plant ${cropType} - No seeds available!`);\r\n            return false;\r\n          }\r\n\r\n          if (this.land[index].isPlowed && !this.land[index].hasCrop) {\r\n            const newLand = [...this.land];\r\n            newLand[index] = {\r\n              ...newLand[index],\r\n              hasCrop: true,\r\n              cropType: cropType,\r\n              cropState: 'growing',\r\n              plantedTime: Date.now()\r\n            };\r\n            \r\n            // Update gameState's inventory\r\n            const newInventory = {\r\n              ...gameState.inventory,\r\n              [`${cropType}_seeds`]: gameState.inventory[`${cropType}_seeds`] - 1\r\n            };\r\n            \r\n            setGameState(prev => ({\r\n              ...prev,\r\n              land: newLand,\r\n              inventory: newInventory\r\n            }));\r\n            \r\n            this.land = newLand;\r\n            this.print(`Successfully planted ${cropType} at (${x}, ${y})`);\r\n            return true;\r\n          }\r\n          \r\n          this.print(`Failed to plant ${cropType} - Make sure the tile is plowed and empty`);\r\n          return false;\r\n        },\r\n\r\n        harvest: function() {\r\n          const x = this.drone.x;\r\n          const y = this.drone.y;\r\n          const index = y * this.size + x;\r\n          \r\n          if (this.land[index].hasCrop && this.land[index].cropState === 'ready') {\r\n            const cropType = this.land[index].cropType;\r\n            const newLand = [...this.land];\r\n            newLand[index] = {\r\n              ...newLand[index],\r\n              hasCrop: false,\r\n              cropType: null,\r\n              cropState: null,\r\n              plantedTime: null\r\n            };\r\n            \r\n            // Update gameState's inventory\r\n            const newInventory = {\r\n              ...gameState.inventory,\r\n              [cropType]: (gameState.inventory[cropType] || 0) + 1\r\n            };\r\n            \r\n            setGameState(prev => ({\r\n              ...prev,\r\n              land: newLand,\r\n              inventory: newInventory\r\n            }));\r\n            \r\n            this.land = newLand;\r\n            this.print(`Successfully harvested ${cropType} at (${x}, ${y})`);\r\n            return true;\r\n          }\r\n          this.print(`Failed to harvest - No ready crop at (${x}, ${y})`);\r\n          return false;\r\n        },\r\n\r\n        scan: function() {\r\n          const x = this.drone.x;\r\n          const y = this.drone.y;\r\n          const index = y * this.size + x;\r\n          const tile = this.land[index];\r\n          \r\n          let status = \"empty\";\r\n          if (tile.isPlowed) {\r\n            status = \"plowed\";\r\n          }\r\n          if (tile.hasCrop) {\r\n            status = `${tile.cropState} ${tile.cropType}`;\r\n          }\r\n          \r\n          this.print(`Scan results at (${x}, ${y}): ${status}`);\r\n          return status;\r\n        },\r\n\r\n        position: function() {\r\n          return { x: this.drone.x, y: this.drone.y };\r\n        },\r\n        \r\n        buy: function(itemType, amount = 1) {\r\n          const prices = {\r\n            wheat_seeds: 10,\r\n            corn_seeds: 20,\r\n            potato_seeds: 15\r\n          };\r\n\r\n          const cost = prices[itemType];\r\n          if (!cost) {\r\n            this.print(`Cannot buy ${itemType} - Item not available in shop!`);\r\n            return false;\r\n          }\r\n\r\n          if (onBuyItem(itemType, amount, cost)) {\r\n            this.print(`Bought ${amount} ${itemType} for $${cost * amount}`);\r\n            return true;\r\n          } else {\r\n            this.print(`Cannot buy ${itemType} - Not enough money!`);\r\n            return false;\r\n          }\r\n        },\r\n        \r\n        sell: function(itemType, amount = 1) {\r\n          const prices = {\r\n            wheat: 25,\r\n            corn: 40,\r\n            potato: 30\r\n          };\r\n\r\n          const price = prices[itemType];\r\n          if (!price) {\r\n            this.print(`Cannot sell ${itemType} - Item not recognized!`);\r\n            return false;\r\n          }\r\n\r\n          if (onSellItem(itemType, amount, price)) {\r\n            this.print(`Sold ${amount} ${itemType} for $${price * amount}`);\r\n            return true;\r\n          } else {\r\n            this.print(`Cannot sell ${itemType} - Not enough in inventory!`);\r\n            return false;\r\n          }\r\n        },\r\n        \r\n        toString: function() {\r\n          return `Farm(money=$${gameState.money}, size=${this.size}x${this.size}, inventory=${JSON.stringify(gameState.inventory)})`;\r\n        }\r\n      };\r\n\r\n      setFarm(farmRef.current);\r\n      \r\n      // Only show initialization message once\r\n      if (!consoleStates[consoleId]?.initialized) {\r\n        setOutput(prev => [...prev, { text: `Farm initialized: ${farmRef.current.toString()}\\n`, type: 'info' }]);\r\n        if (consoleStates[consoleId]) {\r\n          consoleStates[consoleId].initialized = true;\r\n        }\r\n      }\r\n    }\r\n\r\n    // Update farm properties without recreating the object\r\n    if (farmRef.current) {\r\n      farmRef.current.money = gameState.money;\r\n      farmRef.current.land = gameState.land;\r\n      farmRef.current.size = Math.sqrt(gameState.land.length);\r\n      farmRef.current.drone = gameState.drone;\r\n      farmRef.current.inventory = gameState.inventory;\r\n    }\r\n  }, [gameState, consoleId]);\r\n\r\n  // Initialize or restore console state\r\n  useEffect(() => {\r\n    if (!consoleStates[consoleId]) {\r\n      consoleStates[consoleId] = {\r\n        input: '',\r\n        output: output,\r\n        isPlaying: false,\r\n        currentLine: 0,\r\n        initialized: false\r\n      };\r\n    } else {\r\n      setInput(consoleStates[consoleId].input);\r\n      setOutput(consoleStates[consoleId].output);\r\n      setIsPlaying(consoleStates[consoleId].isPlaying);\r\n      setCurrentLine(consoleStates[consoleId].currentLine);\r\n    }\r\n  }, [consoleId, output]);\r\n\r\n  // Save console state when it changes\r\n  useEffect(() => {\r\n    if (consoleStates[consoleId]) {\r\n      consoleStates[consoleId] = {\r\n        input,\r\n        output,\r\n        isPlaying,\r\n        currentLine,\r\n        initialized: true\r\n      };\r\n    }\r\n  }, [input, output, isPlaying, currentLine, consoleId]);\r\n\r\n  // Update parent when input changes\r\n  useEffect(() => {\r\n    onContentChange?.(consoleId, input);\r\n  }, [input, consoleId, onContentChange]);\r\n\r\n  // Update local state when content prop changes\r\n  useEffect(() => {\r\n    if (content !== undefined && content !== input) {\r\n      setInput(content);\r\n    }\r\n  }, [content]);\r\n\r\n  // Update the print function in the farm object\r\n  useEffect(() => {\r\n    if (farm) {\r\n      farm.print = function(text) {\r\n        setOutput(prev => [...prev, { text: text + '\\n', type: 'normal' }]);\r\n      };\r\n    }\r\n  }, [farm]);\r\n\r\n  const handleKeyDown = (e) => {\r\n    if (e.key === 'Enter' && e.ctrlKey) {\r\n      e.preventDefault();\r\n      togglePlayPause();\r\n    }\r\n  };\r\n\r\n  const executeLine = (line) => {\r\n    if (!farm) return;\r\n\r\n    try {\r\n      setOutput(prev => [...prev, { text: '\\n>>> ' + line + '\\n', type: 'command' }]);\r\n\r\n      // Create a function that returns a Promise to handle async operations\r\n      const executeCode = new Function(\r\n        'farm',\r\n        `\r\n        const move = farm.move.bind(farm);\r\n        const plow = farm.plow.bind(farm);\r\n        const plant = farm.plant.bind(farm);\r\n        const harvest = farm.harvest.bind(farm);\r\n        const scan = farm.scan.bind(farm);\r\n        const position = farm.position.bind(farm);\r\n        const expand = farm.expand.bind(farm);\r\n        const sell = farm.sell.bind(farm);\r\n        const buy = farm.buy.bind(farm);\r\n        \r\n        return new Promise((resolve, reject) => {\r\n          try {\r\n            const result = eval(${JSON.stringify(line)});\r\n            if (result instanceof Promise) {\r\n              result.then(resolve).catch(reject);\r\n            } else {\r\n              resolve(result);\r\n            }\r\n          } catch (error) {\r\n            farm.print('Error: ' + error.message);\r\n            reject(error);\r\n          }\r\n        });\r\n      `);\r\n\r\n      return executeCode(farm);\r\n    } catch (error) {\r\n      setOutput(prev => [...prev, { text: 'Error: ' + error.message + '\\n', type: 'error' }]);\r\n      return Promise.reject(error);\r\n    }\r\n  };\r\n\r\n  const togglePlayPause = async () => {\r\n    if (!input.trim() || !farm) return;\r\n\r\n    if (!isPlaying) {\r\n      // Start playing\r\n      setIsPlaying(true);\r\n      try {\r\n        // Execute the entire code at once\r\n        const result = await executeLine(input);\r\n        if (result !== undefined) {\r\n          setOutput(prev => [...prev, { text: result + '\\n', type: 'normal' }]);\r\n        }\r\n      } catch (error) {\r\n        console.error('Execution error:', error);\r\n      } finally {\r\n        setIsPlaying(false);\r\n      }\r\n    }\r\n  };\r\n\r\n  // Cleanup interval on unmount\r\n  useEffect(() => {\r\n    return () => {\r\n      if (executionInterval.current) {\r\n        clearInterval(executionInterval.current);\r\n      }\r\n    };\r\n  }, []);\r\n\r\n  const handleInputChange = (e) => {\r\n    setInput(e.target.value);\r\n  };\r\n\r\n  return (\r\n    <ConsoleContainer>\r\n      <ConsoleOutput>\r\n        {output.map((line, index) => (\r\n          <ConsoleLine key={index} error={line.type === 'error'}>\r\n            {line.text}\r\n          </ConsoleLine>\r\n        ))}\r\n      </ConsoleOutput>\r\n      <ConsoleInput\r\n        id={`console-${consoleId}`}\r\n        value={input}\r\n        onChange={handleInputChange}\r\n        onKeyDown={handleKeyDown}\r\n        placeholder=\"Enter JavaScript code here...\"\r\n      />\r\n      <ConsoleControls>\r\n        <PlayButton onClick={togglePlayPause}>\r\n          {isPlaying ? '⏸️' : '▶️'}\r\n        </PlayButton>\r\n      </ConsoleControls>\r\n    </ConsoleContainer>\r\n  );\r\n}\r\n\r\nexport default JavaScriptConsole; "],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAC1D,OAAOC,MAAM,MAAM,mBAAmB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEvC,MAAMC,gBAAgB,GAAGH,MAAM,CAACI,GAAG;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAACC,EAAA,GARIF,gBAAgB;AAUtB,MAAMG,aAAa,GAAGN,MAAM,CAACI,GAAG;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAACG,GAAA,GAVID,aAAa;AAYnB,MAAME,YAAY,GAAGR,MAAM,CAACS,QAAQ;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAACC,GAAA,GAVIF,YAAY;AAYlB,MAAMG,WAAW,GAAGX,MAAM,CAACI,GAAG;AAC9B,WAAWQ,KAAK,IAAIA,KAAK,CAACC,KAAK,GAAG,SAAS,GAAG,SAAS;AACvD;AACA;AACA;AACA;AACA,CAAC;AAACC,GAAA,GANIH,WAAW;AAQjB,MAAMI,eAAe,GAAGf,MAAM,CAACI,GAAG;AAClC;AACA;AACA;AACA;AACA,CAAC;AAACY,GAAA,GALID,eAAe;AAOrB,MAAME,UAAU,GAAGjB,MAAM,CAACkB,MAAM;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAACC,GAAA,GAtBIF,UAAU;AAwBhB,MAAMG,SAAS,GAAGpB,MAAM,CAACkB,MAAM;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAED,MAAMG,eAAe,GAAGrB,MAAM,CAACkB,MAAM;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAED,MAAMI,QAAQ,GAAGtB,MAAM,CAACuB,IAAI;AAC5B;AACA;AACA;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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}