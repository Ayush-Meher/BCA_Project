{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\SPIDER\\\\Downloads\\\\Project\\\\Demo GPT\\\\Demo 1\\\\src\\\\components\\\\Game3D.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect } from 'react';\nimport * as THREE from 'three';\nimport { OrbitControls } from 'three/addons/controls/OrbitControls.js';\nimport { GLTFLoader } from 'three/addons/loaders/GLTFLoader.js';\nimport { OBJLoader } from 'three/addons/loaders/OBJLoader.js';\nimport { EffectComposer } from 'three/addons/postprocessing/EffectComposer.js';\nimport { RenderPass } from 'three/addons/postprocessing/RenderPass.js';\nimport { UnrealBloomPass } from 'three/addons/postprocessing/UnrealBloomPass.js';\nimport { SMAAPass } from 'three/addons/postprocessing/SMAAPass.js';\nimport { Sky } from 'three/addons/objects/Sky.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Game3D = ({\n  gameState\n}) => {\n  _s();\n  const canvasRef = useRef(null);\n  const sceneRef = useRef(null);\n  const droneRef = useRef(null);\n  const composerRef = useRef(null);\n  const modelsRef = useRef({});\n  const texturesRef = useRef({});\n\n  // Convert game coordinates to scene coordinates\n  const gameToScene = (x, y) => {\n    return {\n      x: x - 2.5,\n      z: y - 2.5\n    };\n  };\n\n  // Load textures\n  const loadTextures = async () => {\n    const textureLoader = new THREE.TextureLoader();\n    const loadTexture = url => new Promise((resolve, reject) => {\n      textureLoader.load(url, resolve, undefined, reject);\n    });\n    try {\n      texturesRef.current = {\n        grass: {\n          diffuse: await loadTexture('/textures/grass_diffuse.jpg'),\n          normal: await loadTexture('/textures/grass_normal.jpg'),\n          roughness: await loadTexture('/textures/grass_roughness.jpg')\n        },\n        soil: {\n          diffuse: await loadTexture('/textures/soil_diffuse.jpg'),\n          normal: await loadTexture('/textures/soil_normal.jpg'),\n          roughness: await loadTexture('/textures/soil_roughness.jpg')\n        }\n      };\n\n      // Configure texture properties\n      Object.values(texturesRef.current).forEach(textures => {\n        Object.values(textures).forEach(texture => {\n          texture.wrapS = texture.wrapT = THREE.RepeatWrapping;\n          texture.repeat.set(2, 2);\n        });\n      });\n    } catch (error) {\n      console.error('Error loading textures:', error);\n    }\n  };\n\n  // Load models\n  const loadModels = async () => {\n    const gltfLoader = new GLTFLoader();\n    const objLoader = new OBJLoader();\n    const loadGLTF = url => new Promise((resolve, reject) => {\n      gltfLoader.load(url, resolve, undefined, reject);\n    });\n    const loadOBJ = url => new Promise((resolve, reject) => {\n      objLoader.load(url, resolve, undefined, reject);\n    });\n    try {\n      // Load drone model\n      const droneModel = await loadGLTF('/models/drone.glb');\n      modelsRef.current.drone = droneModel.scene;\n\n      // Load crop models\n      modelsRef.current.wheat = await loadOBJ('/models/wheat.obj');\n      modelsRef.current.corn = await loadOBJ('/models/corn.obj');\n      modelsRef.current.potato = await loadOBJ('/models/potato.obj');\n\n      // Configure models\n      Object.values(modelsRef.current).forEach(model => {\n        model.traverse(child => {\n          if (child.isMesh) {\n            child.castShadow = true;\n            child.receiveShadow = true;\n          }\n        });\n      });\n    } catch (error) {\n      console.error('Error loading models:', error);\n    }\n  };\n\n  // Create environment map\n  const createEnvironmentMap = renderer => {\n    const pmremGenerator = new THREE.PMREMGenerator(renderer);\n    pmremGenerator.compileEquirectangularShader();\n    const sky = new Sky();\n    sky.scale.setScalar(450000);\n    const sun = new THREE.Vector3();\n    const uniforms = sky.material.uniforms;\n    uniforms['turbidity'].value = 10;\n    uniforms['rayleigh'].value = 3;\n    uniforms['mieCoefficient'].value = 0.005;\n    uniforms['mieDirectionalG'].value = 0.7;\n    const phi = THREE.MathUtils.degToRad(90 - 2);\n    const theta = THREE.MathUtils.degToRad(180);\n    sun.setFromSphericalCoords(1, phi, theta);\n    uniforms['sunPosition'].value.copy(sun);\n    const renderTarget = pmremGenerator.fromScene(sky);\n    pmremGenerator.dispose();\n    return renderTarget.texture;\n  };\n\n  // Create fallback drone model\n  const createFallbackDrone = () => {\n    const droneGroup = new THREE.Group();\n\n    // Drone body\n    const bodyGeometry = new THREE.BoxGeometry(0.4, 0.1, 0.4);\n    const bodyMaterial = new THREE.MeshStandardMaterial({\n      color: 0x3498db,\n      metalness: 0.8,\n      roughness: 0.2\n    });\n    const body = new THREE.Mesh(bodyGeometry, bodyMaterial);\n    body.castShadow = true;\n    droneGroup.add(body);\n\n    // Drone arms\n    const armGeometry = new THREE.CylinderGeometry(0.02, 0.02, 0.3);\n    const armMaterial = new THREE.MeshStandardMaterial({\n      color: 0x2c3e50,\n      metalness: 0.5,\n      roughness: 0.5\n    });\n\n    // Create four arms\n    for (let i = 0; i < 4; i++) {\n      const arm = new THREE.Mesh(armGeometry, armMaterial);\n      arm.position.y = 0.05;\n      arm.rotation.z = Math.PI / 2;\n      arm.rotation.y = i * Math.PI / 2;\n      arm.position.x = Math.cos(arm.rotation.y) * 0.2;\n      arm.position.z = Math.sin(arm.rotation.y) * 0.2;\n      arm.castShadow = true;\n      droneGroup.add(arm);\n    }\n\n    // Propellers\n    const propGeometry = new THREE.BoxGeometry(0.05, 0.01, 0.3);\n    const propMaterial = new THREE.MeshStandardMaterial({\n      color: 0x95a5a6,\n      metalness: 0.3,\n      roughness: 0.7\n    });\n\n    // Create four propellers\n    for (let i = 0; i < 4; i++) {\n      const propeller = new THREE.Group();\n      const blade1 = new THREE.Mesh(propGeometry, propMaterial);\n      const blade2 = new THREE.Mesh(propGeometry, propMaterial);\n      blade2.rotation.y = Math.PI / 2;\n      propeller.add(blade1, blade2);\n      propeller.position.y = 0.1;\n      propeller.position.x = Math.cos(i * Math.PI / 2) * 0.2;\n      propeller.position.z = Math.sin(i * Math.PI / 2) * 0.2;\n      propeller.castShadow = true;\n      droneGroup.add(propeller);\n    }\n    return droneGroup;\n  };\n  useEffect(() => {\n    if (!canvasRef.current) return;\n\n    // Create scene\n    const scene = new THREE.Scene();\n    scene.background = new THREE.Color(0x87CEEB);\n    scene.fog = new THREE.FogExp2(0x87CEEB, 0.01);\n    sceneRef.current = scene;\n\n    // Create camera\n    const camera = new THREE.PerspectiveCamera(60, 1, 0.1, 1000);\n    camera.position.set(8, 12, 8);\n    camera.lookAt(0, 0, 0);\n\n    // Create renderer with improved settings\n    const renderer = new THREE.WebGLRenderer({\n      canvas: canvasRef.current,\n      antialias: true,\n      powerPreference: \"high-performance\",\n      stencil: false\n    });\n    renderer.setSize(600, 600);\n    renderer.shadowMap.enabled = true;\n    renderer.shadowMap.type = THREE.PCFSoftShadowMap;\n    renderer.outputColorSpace = THREE.SRGBColorSpace;\n    renderer.toneMapping = THREE.ACESFilmicToneMapping;\n    renderer.toneMappingExposure = 1.0;\n    renderer.setPixelRatio(window.devicePixelRatio);\n\n    // Create environment map\n    const envMap = createEnvironmentMap(renderer);\n    scene.environment = envMap;\n\n    // Add lights with improved settings\n    const ambientLight = new THREE.AmbientLight(0xffffff, 0.5);\n    scene.add(ambientLight);\n    const sunLight = new THREE.DirectionalLight(0xffffff, 2.0);\n    sunLight.position.set(10, 10, 5);\n    sunLight.castShadow = true;\n    sunLight.shadow.mapSize.width = 2048;\n    sunLight.shadow.mapSize.height = 2048;\n    sunLight.shadow.camera.near = 0.5;\n    sunLight.shadow.camera.far = 50;\n    sunLight.shadow.camera.left = -10;\n    sunLight.shadow.camera.right = 10;\n    sunLight.shadow.camera.top = 10;\n    sunLight.shadow.camera.bottom = -10;\n    sunLight.shadow.bias = -0.001;\n    scene.add(sunLight);\n\n    // Add subtle point lights for better ambiance\n    const pointLight1 = new THREE.PointLight(0xffd700, 0.5, 10);\n    pointLight1.position.set(2, 2, 2);\n    scene.add(pointLight1);\n    const pointLight2 = new THREE.PointLight(0x00ffff, 0.3, 10);\n    pointLight2.position.set(-2, 3, -2);\n    scene.add(pointLight2);\n\n    // Create ground plane with improved materials\n    const gridSize = 5;\n    const groundGeometry = new THREE.PlaneGeometry(gridSize, gridSize, 32, 32);\n    const groundMaterial = new THREE.MeshStandardMaterial({\n      color: 0xffffff,\n      side: THREE.DoubleSide,\n      envMapIntensity: 0.5,\n      metalness: 0.0,\n      roughness: 0.9\n    });\n    const ground = new THREE.Mesh(groundGeometry, groundMaterial);\n    ground.rotation.x = -Math.PI / 2;\n    ground.position.y = 0;\n    ground.receiveShadow = true;\n    scene.add(ground);\n\n    // Add grid helper with improved visibility\n    const gridHelper = new THREE.GridHelper(gridSize, gridSize, 0x000000, 0x000000);\n    gridHelper.position.y = 0.01;\n    gridHelper.material.opacity = 0.2;\n    gridHelper.material.transparent = true;\n    scene.add(gridHelper);\n\n    // Setup post-processing with improved settings\n    const composer = new EffectComposer(renderer);\n    composerRef.current = composer;\n    const renderPass = new RenderPass(scene, camera);\n    composer.addPass(renderPass);\n    const bloomPass = new UnrealBloomPass(new THREE.Vector2(600, 600), 0.5,\n    // strength\n    0.4,\n    // radius\n    0.85 // threshold\n    );\n    composer.addPass(bloomPass);\n    const smaaPass = new SMAAPass(600, 600);\n    composer.addPass(smaaPass);\n\n    // Add OrbitControls with improved settings\n    const controls = new OrbitControls(camera, renderer.domElement);\n    controls.enableDamping = true;\n    controls.dampingFactor = 0.05;\n    controls.screenSpacePanning = false;\n    controls.minDistance = 5;\n    controls.maxDistance = 20;\n    controls.maxPolarAngle = Math.PI / 2.1;\n    controls.minPolarAngle = Math.PI / 6;\n    controls.enableZoom = true;\n    controls.zoomSpeed = 0.5;\n    controls.rotateSpeed = 0.5;\n\n    // Set initial camera position for isometric view\n    camera.position.set(8, 12, 8);\n    controls.target.set(0, 0, 0);\n    controls.update();\n\n    // Load assets with improved error handling\n    Promise.all([loadTextures(), loadModels()]).then(() => {\n      // Update ground material with loaded textures\n      if (texturesRef.current.grass) {\n        ground.material.map = texturesRef.current.grass.diffuse;\n        ground.material.normalMap = texturesRef.current.grass.normal;\n        ground.material.roughnessMap = texturesRef.current.grass.roughness;\n        ground.material.normalScale.set(1, 1);\n        ground.material.needsUpdate = true;\n      }\n\n      // Add drone to scene with improved fallback handling\n      if (modelsRef.current.drone) {\n        const drone = modelsRef.current.drone.clone();\n        drone.scale.set(0.5, 0.5, 0.5);\n        drone.traverse(child => {\n          if (child.isMesh) {\n            child.castShadow = true;\n            child.material.envMapIntensity = 1;\n          }\n        });\n        scene.add(drone);\n        droneRef.current = drone;\n      } else {\n        console.log('Using fallback drone model');\n        const fallbackDrone = createFallbackDrone();\n        scene.add(fallbackDrone);\n        droneRef.current = fallbackDrone;\n      }\n    }).catch(error => {\n      console.error('Error loading assets:', error);\n      const fallbackDrone = createFallbackDrone();\n      scene.add(fallbackDrone);\n      droneRef.current = fallbackDrone;\n    });\n\n    // Animation loop with improved timing\n    let lastTime = 0;\n    const animate = time => {\n      requestAnimationFrame(animate);\n      const delta = (time - lastTime) / 1000;\n      lastTime = time;\n\n      // Update drone position and animation with smooth interpolation\n      if (droneRef.current) {\n        const targetPos = gameToScene(gameState.dronePosition.x, gameState.dronePosition.y);\n        droneRef.current.position.x = THREE.MathUtils.lerp(droneRef.current.position.x, targetPos.x, 5 * delta);\n        droneRef.current.position.z = THREE.MathUtils.lerp(droneRef.current.position.z, targetPos.z, 5 * delta);\n        droneRef.current.position.y = 0.5 + Math.sin(time * 0.002) * 0.1;\n\n        // Rotate propellers if using fallback model\n        if (!modelsRef.current.drone) {\n          droneRef.current.children.forEach((child, index) => {\n            if (index > 4) {\n              // Skip body and arms\n              child.rotation.y += 15 * delta;\n            }\n          });\n        }\n      }\n\n      // Update controls and render\n      controls.update();\n      composer.render();\n    };\n    animate(0);\n\n    // Cleanup with improved resource disposal\n    return () => {\n      renderer.dispose();\n      composer.dispose();\n      controls.dispose();\n      envMap.dispose();\n      Object.values(texturesRef.current).forEach(textures => {\n        Object.values(textures).forEach(texture => texture.dispose());\n      });\n      scene.traverse(object => {\n        if (object.geometry) object.geometry.dispose();\n        if (object.material) {\n          if (Array.isArray(object.material)) {\n            object.material.forEach(material => material.dispose());\n          } else {\n            object.material.dispose();\n          }\n        }\n      });\n    };\n  }, []);\n\n  // Update drone position when gameState changes\n  useEffect(() => {\n    if (droneRef.current && gameState.dronePosition) {\n      const targetPos = gameToScene(gameState.dronePosition.x, gameState.dronePosition.y);\n      droneRef.current.position.x = targetPos.x;\n      droneRef.current.position.z = targetPos.z;\n    }\n  }, [gameState.dronePosition]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      width: '600px',\n      height: '600px',\n      backgroundColor: '#000000',\n      margin: '0 auto',\n      borderRadius: '8px',\n      overflow: 'hidden',\n      boxShadow: '0 4px 6px rgba(0, 0, 0, 0.1)'\n    },\n    children: /*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: canvasRef,\n      style: {\n        width: '100%',\n        height: '100%'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 424,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 415,\n    columnNumber: 5\n  }, this);\n};\n_s(Game3D, \"Ty8Snsgju/IeMRu6ufWclJpqW8E=\");\n_c = Game3D;\nexport default Game3D;\nvar _c;\n$RefreshReg$(_c, \"Game3D\");","map":{"version":3,"names":["React","useRef","useEffect","THREE","OrbitControls","GLTFLoader","OBJLoader","EffectComposer","RenderPass","UnrealBloomPass","SMAAPass","Sky","jsxDEV","_jsxDEV","Game3D","gameState","_s","canvasRef","sceneRef","droneRef","composerRef","modelsRef","texturesRef","gameToScene","x","y","z","loadTextures","textureLoader","TextureLoader","loadTexture","url","Promise","resolve","reject","load","undefined","current","grass","diffuse","normal","roughness","soil","Object","values","forEach","textures","texture","wrapS","wrapT","RepeatWrapping","repeat","set","error","console","loadModels","gltfLoader","objLoader","loadGLTF","loadOBJ","droneModel","drone","scene","wheat","corn","potato","model","traverse","child","isMesh","castShadow","receiveShadow","createEnvironmentMap","renderer","pmremGenerator","PMREMGenerator","compileEquirectangularShader","sky","scale","setScalar","sun","Vector3","uniforms","material","value","phi","MathUtils","degToRad","theta","setFromSphericalCoords","copy","renderTarget","fromScene","dispose","createFallbackDrone","droneGroup","Group","bodyGeometry","BoxGeometry","bodyMaterial","MeshStandardMaterial","color","metalness","body","Mesh","add","armGeometry","CylinderGeometry","armMaterial","i","arm","position","rotation","Math","PI","cos","sin","propGeometry","propMaterial","propeller","blade1","blade2","Scene","background","Color","fog","FogExp2","camera","PerspectiveCamera","lookAt","WebGLRenderer","canvas","antialias","powerPreference","stencil","setSize","shadowMap","enabled","type","PCFSoftShadowMap","outputColorSpace","SRGBColorSpace","toneMapping","ACESFilmicToneMapping","toneMappingExposure","setPixelRatio","window","devicePixelRatio","envMap","environment","ambientLight","AmbientLight","sunLight","DirectionalLight","shadow","mapSize","width","height","near","far","left","right","top","bottom","bias","pointLight1","PointLight","pointLight2","gridSize","groundGeometry","PlaneGeometry","groundMaterial","side","DoubleSide","envMapIntensity","ground","gridHelper","GridHelper","opacity","transparent","composer","renderPass","addPass","bloomPass","Vector2","smaaPass","controls","domElement","enableDamping","dampingFactor","screenSpacePanning","minDistance","maxDistance","maxPolarAngle","minPolarAngle","enableZoom","zoomSpeed","rotateSpeed","target","update","all","then","map","normalMap","roughnessMap","normalScale","needsUpdate","clone","log","fallbackDrone","catch","lastTime","animate","time","requestAnimationFrame","delta","targetPos","dronePosition","lerp","children","index","render","object","geometry","Array","isArray","style","backgroundColor","margin","borderRadius","overflow","boxShadow","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/SPIDER/Downloads/Project/Demo GPT/Demo 1/src/components/Game3D.js"],"sourcesContent":["import React, { useRef, useEffect } from 'react';\r\nimport * as THREE from 'three';\r\nimport { OrbitControls } from 'three/addons/controls/OrbitControls.js';\r\nimport { GLTFLoader } from 'three/addons/loaders/GLTFLoader.js';\r\nimport { OBJLoader } from 'three/addons/loaders/OBJLoader.js';\r\nimport { EffectComposer } from 'three/addons/postprocessing/EffectComposer.js';\r\nimport { RenderPass } from 'three/addons/postprocessing/RenderPass.js';\r\nimport { UnrealBloomPass } from 'three/addons/postprocessing/UnrealBloomPass.js';\r\nimport { SMAAPass } from 'three/addons/postprocessing/SMAAPass.js';\r\nimport { Sky } from 'three/addons/objects/Sky.js';\r\n\r\nconst Game3D = ({ gameState }) => {\r\n  const canvasRef = useRef(null);\r\n  const sceneRef = useRef(null);\r\n  const droneRef = useRef(null);\r\n  const composerRef = useRef(null);\r\n  const modelsRef = useRef({});\r\n  const texturesRef = useRef({});\r\n\r\n  // Convert game coordinates to scene coordinates\r\n  const gameToScene = (x, y) => {\r\n    return {\r\n      x: x - 2.5,\r\n      z: y - 2.5\r\n    };\r\n  };\r\n\r\n  // Load textures\r\n  const loadTextures = async () => {\r\n    const textureLoader = new THREE.TextureLoader();\r\n    const loadTexture = (url) => new Promise((resolve, reject) => {\r\n      textureLoader.load(url, resolve, undefined, reject);\r\n    });\r\n\r\n    try {\r\n      texturesRef.current = {\r\n        grass: {\r\n          diffuse: await loadTexture('/textures/grass_diffuse.jpg'),\r\n          normal: await loadTexture('/textures/grass_normal.jpg'),\r\n          roughness: await loadTexture('/textures/grass_roughness.jpg')\r\n        },\r\n        soil: {\r\n          diffuse: await loadTexture('/textures/soil_diffuse.jpg'),\r\n          normal: await loadTexture('/textures/soil_normal.jpg'),\r\n          roughness: await loadTexture('/textures/soil_roughness.jpg')\r\n        }\r\n      };\r\n\r\n      // Configure texture properties\r\n      Object.values(texturesRef.current).forEach(textures => {\r\n        Object.values(textures).forEach(texture => {\r\n          texture.wrapS = texture.wrapT = THREE.RepeatWrapping;\r\n          texture.repeat.set(2, 2);\r\n        });\r\n      });\r\n    } catch (error) {\r\n      console.error('Error loading textures:', error);\r\n    }\r\n  };\r\n\r\n  // Load models\r\n  const loadModels = async () => {\r\n    const gltfLoader = new GLTFLoader();\r\n    const objLoader = new OBJLoader();\r\n\r\n    const loadGLTF = (url) => new Promise((resolve, reject) => {\r\n      gltfLoader.load(url, resolve, undefined, reject);\r\n    });\r\n\r\n    const loadOBJ = (url) => new Promise((resolve, reject) => {\r\n      objLoader.load(url, resolve, undefined, reject);\r\n    });\r\n\r\n    try {\r\n      // Load drone model\r\n      const droneModel = await loadGLTF('/models/drone.glb');\r\n      modelsRef.current.drone = droneModel.scene;\r\n\r\n      // Load crop models\r\n      modelsRef.current.wheat = await loadOBJ('/models/wheat.obj');\r\n      modelsRef.current.corn = await loadOBJ('/models/corn.obj');\r\n      modelsRef.current.potato = await loadOBJ('/models/potato.obj');\r\n\r\n      // Configure models\r\n      Object.values(modelsRef.current).forEach(model => {\r\n        model.traverse(child => {\r\n          if (child.isMesh) {\r\n            child.castShadow = true;\r\n            child.receiveShadow = true;\r\n          }\r\n        });\r\n      });\r\n    } catch (error) {\r\n      console.error('Error loading models:', error);\r\n    }\r\n  };\r\n\r\n  // Create environment map\r\n  const createEnvironmentMap = (renderer) => {\r\n    const pmremGenerator = new THREE.PMREMGenerator(renderer);\r\n    pmremGenerator.compileEquirectangularShader();\r\n\r\n    const sky = new Sky();\r\n    sky.scale.setScalar(450000);\r\n    \r\n    const sun = new THREE.Vector3();\r\n    const uniforms = sky.material.uniforms;\r\n    uniforms['turbidity'].value = 10;\r\n    uniforms['rayleigh'].value = 3;\r\n    uniforms['mieCoefficient'].value = 0.005;\r\n    uniforms['mieDirectionalG'].value = 0.7;\r\n\r\n    const phi = THREE.MathUtils.degToRad(90 - 2);\r\n    const theta = THREE.MathUtils.degToRad(180);\r\n    sun.setFromSphericalCoords(1, phi, theta);\r\n    uniforms['sunPosition'].value.copy(sun);\r\n\r\n    const renderTarget = pmremGenerator.fromScene(sky);\r\n    pmremGenerator.dispose();\r\n\r\n    return renderTarget.texture;\r\n  };\r\n\r\n  // Create fallback drone model\r\n  const createFallbackDrone = () => {\r\n    const droneGroup = new THREE.Group();\r\n\r\n    // Drone body\r\n    const bodyGeometry = new THREE.BoxGeometry(0.4, 0.1, 0.4);\r\n    const bodyMaterial = new THREE.MeshStandardMaterial({\r\n      color: 0x3498db,\r\n      metalness: 0.8,\r\n      roughness: 0.2\r\n    });\r\n    const body = new THREE.Mesh(bodyGeometry, bodyMaterial);\r\n    body.castShadow = true;\r\n    droneGroup.add(body);\r\n\r\n    // Drone arms\r\n    const armGeometry = new THREE.CylinderGeometry(0.02, 0.02, 0.3);\r\n    const armMaterial = new THREE.MeshStandardMaterial({\r\n      color: 0x2c3e50,\r\n      metalness: 0.5,\r\n      roughness: 0.5\r\n    });\r\n\r\n    // Create four arms\r\n    for (let i = 0; i < 4; i++) {\r\n      const arm = new THREE.Mesh(armGeometry, armMaterial);\r\n      arm.position.y = 0.05;\r\n      arm.rotation.z = Math.PI / 2;\r\n      arm.rotation.y = (i * Math.PI) / 2;\r\n      arm.position.x = Math.cos(arm.rotation.y) * 0.2;\r\n      arm.position.z = Math.sin(arm.rotation.y) * 0.2;\r\n      arm.castShadow = true;\r\n      droneGroup.add(arm);\r\n    }\r\n\r\n    // Propellers\r\n    const propGeometry = new THREE.BoxGeometry(0.05, 0.01, 0.3);\r\n    const propMaterial = new THREE.MeshStandardMaterial({\r\n      color: 0x95a5a6,\r\n      metalness: 0.3,\r\n      roughness: 0.7\r\n    });\r\n\r\n    // Create four propellers\r\n    for (let i = 0; i < 4; i++) {\r\n      const propeller = new THREE.Group();\r\n      \r\n      const blade1 = new THREE.Mesh(propGeometry, propMaterial);\r\n      const blade2 = new THREE.Mesh(propGeometry, propMaterial);\r\n      blade2.rotation.y = Math.PI / 2;\r\n      \r\n      propeller.add(blade1, blade2);\r\n      propeller.position.y = 0.1;\r\n      propeller.position.x = Math.cos(i * Math.PI / 2) * 0.2;\r\n      propeller.position.z = Math.sin(i * Math.PI / 2) * 0.2;\r\n      propeller.castShadow = true;\r\n      \r\n      droneGroup.add(propeller);\r\n    }\r\n\r\n    return droneGroup;\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (!canvasRef.current) return;\r\n\r\n    // Create scene\r\n    const scene = new THREE.Scene();\r\n    scene.background = new THREE.Color(0x87CEEB);\r\n    scene.fog = new THREE.FogExp2(0x87CEEB, 0.01);\r\n    sceneRef.current = scene;\r\n\r\n    // Create camera\r\n    const camera = new THREE.PerspectiveCamera(60, 1, 0.1, 1000);\r\n    camera.position.set(8, 12, 8);\r\n    camera.lookAt(0, 0, 0);\r\n\r\n    // Create renderer with improved settings\r\n    const renderer = new THREE.WebGLRenderer({\r\n      canvas: canvasRef.current,\r\n      antialias: true,\r\n      powerPreference: \"high-performance\",\r\n      stencil: false\r\n    });\r\n    renderer.setSize(600, 600);\r\n    renderer.shadowMap.enabled = true;\r\n    renderer.shadowMap.type = THREE.PCFSoftShadowMap;\r\n    renderer.outputColorSpace = THREE.SRGBColorSpace;\r\n    renderer.toneMapping = THREE.ACESFilmicToneMapping;\r\n    renderer.toneMappingExposure = 1.0;\r\n    renderer.setPixelRatio(window.devicePixelRatio);\r\n\r\n    // Create environment map\r\n    const envMap = createEnvironmentMap(renderer);\r\n    scene.environment = envMap;\r\n\r\n    // Add lights with improved settings\r\n    const ambientLight = new THREE.AmbientLight(0xffffff, 0.5);\r\n    scene.add(ambientLight);\r\n\r\n    const sunLight = new THREE.DirectionalLight(0xffffff, 2.0);\r\n    sunLight.position.set(10, 10, 5);\r\n    sunLight.castShadow = true;\r\n    sunLight.shadow.mapSize.width = 2048;\r\n    sunLight.shadow.mapSize.height = 2048;\r\n    sunLight.shadow.camera.near = 0.5;\r\n    sunLight.shadow.camera.far = 50;\r\n    sunLight.shadow.camera.left = -10;\r\n    sunLight.shadow.camera.right = 10;\r\n    sunLight.shadow.camera.top = 10;\r\n    sunLight.shadow.camera.bottom = -10;\r\n    sunLight.shadow.bias = -0.001;\r\n    scene.add(sunLight);\r\n\r\n    // Add subtle point lights for better ambiance\r\n    const pointLight1 = new THREE.PointLight(0xffd700, 0.5, 10);\r\n    pointLight1.position.set(2, 2, 2);\r\n    scene.add(pointLight1);\r\n\r\n    const pointLight2 = new THREE.PointLight(0x00ffff, 0.3, 10);\r\n    pointLight2.position.set(-2, 3, -2);\r\n    scene.add(pointLight2);\r\n\r\n    // Create ground plane with improved materials\r\n    const gridSize = 5;\r\n    const groundGeometry = new THREE.PlaneGeometry(gridSize, gridSize, 32, 32);\r\n    const groundMaterial = new THREE.MeshStandardMaterial({\r\n      color: 0xffffff,\r\n      side: THREE.DoubleSide,\r\n      envMapIntensity: 0.5,\r\n      metalness: 0.0,\r\n      roughness: 0.9\r\n    });\r\n    const ground = new THREE.Mesh(groundGeometry, groundMaterial);\r\n    ground.rotation.x = -Math.PI / 2;\r\n    ground.position.y = 0;\r\n    ground.receiveShadow = true;\r\n    scene.add(ground);\r\n\r\n    // Add grid helper with improved visibility\r\n    const gridHelper = new THREE.GridHelper(gridSize, gridSize, 0x000000, 0x000000);\r\n    gridHelper.position.y = 0.01;\r\n    gridHelper.material.opacity = 0.2;\r\n    gridHelper.material.transparent = true;\r\n    scene.add(gridHelper);\r\n\r\n    // Setup post-processing with improved settings\r\n    const composer = new EffectComposer(renderer);\r\n    composerRef.current = composer;\r\n\r\n    const renderPass = new RenderPass(scene, camera);\r\n    composer.addPass(renderPass);\r\n\r\n    const bloomPass = new UnrealBloomPass(\r\n      new THREE.Vector2(600, 600),\r\n      0.5,  // strength\r\n      0.4,  // radius\r\n      0.85  // threshold\r\n    );\r\n    composer.addPass(bloomPass);\r\n\r\n    const smaaPass = new SMAAPass(600, 600);\r\n    composer.addPass(smaaPass);\r\n\r\n    // Add OrbitControls with improved settings\r\n    const controls = new OrbitControls(camera, renderer.domElement);\r\n    controls.enableDamping = true;\r\n    controls.dampingFactor = 0.05;\r\n    controls.screenSpacePanning = false;\r\n    controls.minDistance = 5;\r\n    controls.maxDistance = 20;\r\n    controls.maxPolarAngle = Math.PI / 2.1;\r\n    controls.minPolarAngle = Math.PI / 6;\r\n    controls.enableZoom = true;\r\n    controls.zoomSpeed = 0.5;\r\n    controls.rotateSpeed = 0.5;\r\n\r\n    // Set initial camera position for isometric view\r\n    camera.position.set(8, 12, 8);\r\n    controls.target.set(0, 0, 0);\r\n    controls.update();\r\n\r\n    // Load assets with improved error handling\r\n    Promise.all([loadTextures(), loadModels()]).then(() => {\r\n      // Update ground material with loaded textures\r\n      if (texturesRef.current.grass) {\r\n        ground.material.map = texturesRef.current.grass.diffuse;\r\n        ground.material.normalMap = texturesRef.current.grass.normal;\r\n        ground.material.roughnessMap = texturesRef.current.grass.roughness;\r\n        ground.material.normalScale.set(1, 1);\r\n        ground.material.needsUpdate = true;\r\n      }\r\n\r\n      // Add drone to scene with improved fallback handling\r\n      if (modelsRef.current.drone) {\r\n        const drone = modelsRef.current.drone.clone();\r\n        drone.scale.set(0.5, 0.5, 0.5);\r\n        drone.traverse((child) => {\r\n          if (child.isMesh) {\r\n            child.castShadow = true;\r\n            child.material.envMapIntensity = 1;\r\n          }\r\n        });\r\n        scene.add(drone);\r\n        droneRef.current = drone;\r\n      } else {\r\n        console.log('Using fallback drone model');\r\n        const fallbackDrone = createFallbackDrone();\r\n        scene.add(fallbackDrone);\r\n        droneRef.current = fallbackDrone;\r\n      }\r\n    }).catch(error => {\r\n      console.error('Error loading assets:', error);\r\n      const fallbackDrone = createFallbackDrone();\r\n      scene.add(fallbackDrone);\r\n      droneRef.current = fallbackDrone;\r\n    });\r\n\r\n    // Animation loop with improved timing\r\n    let lastTime = 0;\r\n    const animate = (time) => {\r\n      requestAnimationFrame(animate);\r\n\r\n      const delta = (time - lastTime) / 1000;\r\n      lastTime = time;\r\n\r\n      // Update drone position and animation with smooth interpolation\r\n      if (droneRef.current) {\r\n        const targetPos = gameToScene(gameState.dronePosition.x, gameState.dronePosition.y);\r\n        droneRef.current.position.x = THREE.MathUtils.lerp(\r\n          droneRef.current.position.x,\r\n          targetPos.x,\r\n          5 * delta\r\n        );\r\n        droneRef.current.position.z = THREE.MathUtils.lerp(\r\n          droneRef.current.position.z,\r\n          targetPos.z,\r\n          5 * delta\r\n        );\r\n        droneRef.current.position.y = 0.5 + Math.sin(time * 0.002) * 0.1;\r\n        \r\n        // Rotate propellers if using fallback model\r\n        if (!modelsRef.current.drone) {\r\n          droneRef.current.children.forEach((child, index) => {\r\n            if (index > 4) { // Skip body and arms\r\n              child.rotation.y += 15 * delta;\r\n            }\r\n          });\r\n        }\r\n      }\r\n\r\n      // Update controls and render\r\n      controls.update();\r\n      composer.render();\r\n    };\r\n    animate(0);\r\n\r\n    // Cleanup with improved resource disposal\r\n    return () => {\r\n      renderer.dispose();\r\n      composer.dispose();\r\n      controls.dispose();\r\n      envMap.dispose();\r\n      \r\n      Object.values(texturesRef.current).forEach(textures => {\r\n        Object.values(textures).forEach(texture => texture.dispose());\r\n      });\r\n      \r\n      scene.traverse((object) => {\r\n        if (object.geometry) object.geometry.dispose();\r\n        if (object.material) {\r\n          if (Array.isArray(object.material)) {\r\n            object.material.forEach(material => material.dispose());\r\n          } else {\r\n            object.material.dispose();\r\n          }\r\n        }\r\n      });\r\n    };\r\n  }, []);\r\n\r\n  // Update drone position when gameState changes\r\n  useEffect(() => {\r\n    if (droneRef.current && gameState.dronePosition) {\r\n      const targetPos = gameToScene(gameState.dronePosition.x, gameState.dronePosition.y);\r\n      droneRef.current.position.x = targetPos.x;\r\n      droneRef.current.position.z = targetPos.z;\r\n    }\r\n  }, [gameState.dronePosition]);\r\n\r\n  return (\r\n    <div style={{ \r\n      width: '600px', \r\n      height: '600px', \r\n      backgroundColor: '#000000',\r\n      margin: '0 auto',\r\n      borderRadius: '8px',\r\n      overflow: 'hidden',\r\n      boxShadow: '0 4px 6px rgba(0, 0, 0, 0.1)'\r\n    }}>\r\n      <canvas \r\n        ref={canvasRef}\r\n        style={{\r\n          width: '100%',\r\n          height: '100%'\r\n        }}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Game3D; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}