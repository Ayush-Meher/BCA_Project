{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\SPIDER\\\\Downloads\\\\Project\\\\Demo GPT\\\\Demo 1\\\\src\\\\components\\\\JavaScriptConsole.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport styled from 'styled-components';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ConsoleContainer = styled.div`\n  background-color: #1e1e1e;\n  border-radius: 5px;\n  padding: 10px;\n  margin: 10px;\n  height: 500px;\n  display: flex;\n  flex-direction: column;\n`;\n_c = ConsoleContainer;\nconst ConsoleOutput = styled.div`\n  color: #ffffff;\n  font-family: monospace;\n  flex-grow: 1;\n  overflow-y: auto;\n  padding: 10px;\n  white-space: pre-wrap;\n  background-color: #2d2d2d;\n  margin-bottom: 10px;\n  border-radius: 3px;\n`;\n_c2 = ConsoleOutput;\nconst ConsoleInput = styled.textarea`\n  background-color: #2d2d2d;\n  color: #ffffff;\n  font-family: monospace;\n  border: 1px solid #3f3f3f;\n  border-radius: 3px;\n  padding: 5px;\n  resize: none;\n  height: 150px;\n  margin-bottom: 5px;\n`;\n_c3 = ConsoleInput;\nconst ConsoleLine = styled.div`\n  color: ${props => props.error ? '#ff6b6b' : '#ffffff'};\n  margin: 2px 0;\n  font-family: monospace;\n  white-space: pre-wrap;\n  word-break: break-word;\n`;\n_c4 = ConsoleLine;\nconst ConsoleControls = styled.div`\n  display: flex;\n  justify-content: flex-end;\n  margin-top: 8px;\n  gap: 8px;\n`;\n_c5 = ConsoleControls;\nconst PlayButton = styled.button`\n  background-color: #4CAF50;\n  color: white;\n  padding: 8px;\n  border: none;\n  border-radius: 4px;\n  cursor: pointer;\n  width: 40px;\n  height: 40px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: 20px;\n  \n  &:hover {\n    background-color: #45a049;\n  }\n  \n  &:disabled {\n    background-color: #95a5a6;\n    cursor: not-allowed;\n  }\n`;\n_c6 = PlayButton;\nconst RunButton = styled.button`\n  background-color: #4CAF50;\n  color: white;\n  padding: 8px 15px;\n  border: none;\n  border-radius: 3px;\n  margin-top: 5px;\n  cursor: pointer;\n  &:hover {\n    background-color: #45a049;\n  }\n`;\nconst PlayPauseButton = styled.button`\n  background-color: #4CAF50;\n  color: white;\n  padding: 8px 15px;\n  border: none;\n  border-radius: 3px;\n  margin-top: 5px;\n  cursor: pointer;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 40px;\n  height: 40px;\n  \n  &:hover {\n    background-color: #45a049;\n  }\n  \n  &:disabled {\n    background-color: #95a5a6;\n    cursor: not-allowed;\n  }\n`;\nconst PlayIcon = styled.span`\n  display: inline-block;\n  width: 0;\n  height: 0;\n  border-style: solid;\n  border-width: 10px 0 10px 15px;\n  border-color: transparent transparent transparent white;\n  margin-left: 3px;\n`;\nconst PauseIcon = styled.span`\n  display: flex;\n  gap: 3px;\n  \n  &::before,\n  &::after {\n    content: '';\n    width: 5px;\n    height: 20px;\n    background-color: white;\n  }\n`;\n\n// Store console states globally\nconst consoleStates = {};\nconst JavaScriptConsole = ({\n  consoleId,\n  content,\n  onContentChange,\n  farm,\n  setPrintFunction\n}) => {\n  _s();\n  const [input, setInput] = useState(content || '');\n  const [output, setOutput] = useState([{\n    text: '🌟 Welcome to the JavaScript Console! 🌟\\n',\n    type: 'info'\n  }, {\n    text: '📝 Basic Commands:\\n',\n    type: 'info'\n  }, {\n    text: '  • move(x, y)         - Move to coordinates (x,y)\\n',\n    type: 'info'\n  }, {\n    text: '  • scan()             - Get info about current tile\\n',\n    type: 'info'\n  }, {\n    text: '  • position()         - Get current coordinates\\n\\n',\n    type: 'info'\n  }, {\n    text: '🚜 Farming Commands:\\n',\n    type: 'info'\n  }, {\n    text: '  • plow()            - Plow the current tile\\n',\n    type: 'info'\n  }, {\n    text: '  • plant(\"crop\")     - Plant a crop (wheat unlocked, others in Tech Tree)\\n',\n    type: 'info'\n  }, {\n    text: '  • harvest()         - Harvest ready crop at current tile\\n\\n',\n    type: 'info'\n  }, {\n    text: '🏗️ Farm Management:\\n',\n    type: 'info'\n  }, {\n    text: '  • expand()          - Expand farm size (max 5x5)\\n',\n    type: 'info'\n  }, {\n    text: '  • sell(\"type\", amount) - Sell harvested crops\\n',\n    type: 'info'\n  }, {\n    text: '  • buy(\"type\", amount)  - Buy seeds for planting\\n\\n',\n    type: 'info'\n  }, {\n    text: '💡 Tips:\\n',\n    type: 'info'\n  }, {\n    text: '  • Start with expand() to increase farm size\\n',\n    type: 'info'\n  }, {\n    text: '  • Use scan() to check tile status\\n',\n    type: 'info'\n  }, {\n    text: '  • Crops must be planted on plowed land\\n',\n    type: 'info'\n  }, {\n    text: '  • Unlock more crops in the Tech Tree\\n',\n    type: 'info'\n  }, {\n    text: '  • Buy seeds before planting\\n\\n',\n    type: 'info'\n  }, {\n    text: '⌨️ Usage:\\n',\n    type: 'info'\n  }, {\n    text: '  • Type your code and press Play (▶) or Ctrl+Enter\\n',\n    type: 'info'\n  }, {\n    text: '  • Each command runs once when executed\\n',\n    type: 'info'\n  }, {\n    text: '  • Multiple commands can be entered on separate lines\\n\\n',\n    type: 'info'\n  }]);\n  const outputRef = useRef(output);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [currentLine, setCurrentLine] = useState(0);\n  const codeLines = useRef([]);\n  const executionInterval = useRef(null);\n\n  // Keep outputRef in sync\n  useEffect(() => {\n    outputRef.current = output;\n  }, [output]);\n\n  // Set up print function for this console\n  useEffect(() => {\n    if (setPrintFunction) {\n      setPrintFunction(text => {\n        setOutput(prev => [...prev, {\n          text: text + '\\n',\n          type: 'normal'\n        }]);\n      });\n    }\n  }, [setPrintFunction]);\n\n  // Initialize or restore console state\n  useEffect(() => {\n    if (!consoleStates[consoleId]) {\n      consoleStates[consoleId] = {\n        input: '',\n        output: outputRef.current,\n        isPlaying: false,\n        currentLine: 0,\n        initialized: false\n      };\n    } else {\n      setInput(consoleStates[consoleId].input);\n      setOutput(consoleStates[consoleId].output);\n      setIsPlaying(consoleStates[consoleId].isPlaying);\n      setCurrentLine(consoleStates[consoleId].currentLine);\n    }\n\n    // Show initialization message only once per console\n    if (!consoleStates[consoleId].initialized && farm) {\n      setOutput(prev => [...prev, {\n        text: `Farm initialized: ${farm.toString()}\\n`,\n        type: 'info'\n      }]);\n      consoleStates[consoleId].initialized = true;\n    }\n  }, [consoleId, farm]);\n\n  // Save console state when it changes\n  useEffect(() => {\n    if (consoleStates[consoleId]) {\n      consoleStates[consoleId] = {\n        input,\n        output,\n        isPlaying,\n        currentLine,\n        initialized: true\n      };\n    }\n  }, [input, output, isPlaying, currentLine, consoleId]);\n\n  // Update parent when input changes\n  useEffect(() => {\n    onContentChange === null || onContentChange === void 0 ? void 0 : onContentChange(consoleId, input);\n  }, [input, consoleId, onContentChange]);\n\n  // Update local state when content prop changes\n  useEffect(() => {\n    if (content !== undefined && content !== input) {\n      setInput(content);\n    }\n  }, [content]);\n  const handleKeyDown = e => {\n    if (e.key === 'Enter' && e.ctrlKey) {\n      e.preventDefault();\n      togglePlayPause();\n    }\n  };\n  const executeLine = line => {\n    if (!farm) return;\n    try {\n      setOutput(prev => [...prev, {\n        text: '\\n>>> ' + line + '\\n',\n        type: 'command'\n      }]);\n\n      // Create a function that returns a Promise to handle async operations\n      const executeCode = new Function('farm', `\n        const move = farm.move.bind(farm);\n        const plow = farm.plow.bind(farm);\n        const plant = farm.plant.bind(farm);\n        const harvest = farm.harvest.bind(farm);\n        const scan = farm.scan.bind(farm);\n        const position = farm.position.bind(farm);\n        const expand = farm.expand.bind(farm);\n        const sell = farm.sell.bind(farm);\n        const buy = farm.buy.bind(farm);\n        \n        return new Promise((resolve, reject) => {\n          try {\n            const result = eval(${JSON.stringify(line)});\n            if (result instanceof Promise) {\n              result.then(resolve).catch(reject);\n            } else {\n              resolve(result);\n            }\n          } catch (error) {\n            farm.print('Error: ' + error.message);\n            reject(error);\n          }\n        });\n      `);\n      return executeCode(farm);\n    } catch (error) {\n      setOutput(prev => [...prev, {\n        text: 'Error: ' + error.message + '\\n',\n        type: 'error'\n      }]);\n      return Promise.reject(error);\n    }\n  };\n  const togglePlayPause = async () => {\n    if (!input.trim() || !farm) return;\n    if (!isPlaying) {\n      // Start playing\n      setIsPlaying(true);\n      try {\n        // Execute the entire code at once\n        const result = await executeLine(input);\n        if (result !== undefined) {\n          setOutput(prev => [...prev, {\n            text: result + '\\n',\n            type: 'normal'\n          }]);\n        }\n      } catch (error) {\n        console.error('Execution error:', error);\n      } finally {\n        setIsPlaying(false);\n      }\n    }\n  };\n\n  // Cleanup interval on unmount\n  useEffect(() => {\n    return () => {\n      if (executionInterval.current) {\n        clearInterval(executionInterval.current);\n      }\n    };\n  }, []);\n  const handleInputChange = e => {\n    setInput(e.target.value);\n  };\n  return /*#__PURE__*/_jsxDEV(ConsoleContainer, {\n    children: [/*#__PURE__*/_jsxDEV(ConsoleOutput, {\n      children: output.map((line, index) => /*#__PURE__*/_jsxDEV(ConsoleLine, {\n        error: line.type === 'error',\n        children: line.text\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 328,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 326,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ConsoleInput, {\n      id: `console-${consoleId}`,\n      value: input,\n      onChange: handleInputChange,\n      onKeyDown: handleKeyDown,\n      placeholder: \"Enter JavaScript code here...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 333,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ConsoleControls, {\n      children: /*#__PURE__*/_jsxDEV(PlayButton, {\n        onClick: togglePlayPause,\n        children: isPlaying ? '⏸️' : '▶️'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 341,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 340,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 325,\n    columnNumber: 5\n  }, this);\n};\n_s(JavaScriptConsole, \"U6wsvFLgYX7MWWjAGHwcY0tHeGc=\");\n_c7 = JavaScriptConsole;\nexport default JavaScriptConsole;\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7;\n$RefreshReg$(_c, \"ConsoleContainer\");\n$RefreshReg$(_c2, \"ConsoleOutput\");\n$RefreshReg$(_c3, \"ConsoleInput\");\n$RefreshReg$(_c4, \"ConsoleLine\");\n$RefreshReg$(_c5, \"ConsoleControls\");\n$RefreshReg$(_c6, \"PlayButton\");\n$RefreshReg$(_c7, \"JavaScriptConsole\");","map":{"version":3,"names":["React","useState","useEffect","useRef","styled","jsxDEV","_jsxDEV","ConsoleContainer","div","_c","ConsoleOutput","_c2","ConsoleInput","textarea","_c3","ConsoleLine","props","error","_c4","ConsoleControls","_c5","PlayButton","button","_c6","RunButton","PlayPauseButton","PlayIcon","span","PauseIcon","consoleStates","JavaScriptConsole","consoleId","content","onContentChange","farm","setPrintFunction","_s","input","setInput","output","setOutput","text","type","outputRef","isPlaying","setIsPlaying","currentLine","setCurrentLine","codeLines","executionInterval","current","prev","initialized","toString","undefined","handleKeyDown","e","key","ctrlKey","preventDefault","togglePlayPause","executeLine","line","executeCode","Function","JSON","stringify","message","Promise","reject","trim","result","console","clearInterval","handleInputChange","target","value","children","map","index","fileName","_jsxFileName","lineNumber","columnNumber","id","onChange","onKeyDown","placeholder","onClick","_c7","$RefreshReg$"],"sources":["C:/Users/SPIDER/Downloads/Project/Demo GPT/Demo 1/src/components/JavaScriptConsole.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst ConsoleContainer = styled.div`\r\n  background-color: #1e1e1e;\r\n  border-radius: 5px;\r\n  padding: 10px;\r\n  margin: 10px;\r\n  height: 500px;\r\n  display: flex;\r\n  flex-direction: column;\r\n`;\r\n\r\nconst ConsoleOutput = styled.div`\r\n  color: #ffffff;\r\n  font-family: monospace;\r\n  flex-grow: 1;\r\n  overflow-y: auto;\r\n  padding: 10px;\r\n  white-space: pre-wrap;\r\n  background-color: #2d2d2d;\r\n  margin-bottom: 10px;\r\n  border-radius: 3px;\r\n`;\r\n\r\nconst ConsoleInput = styled.textarea`\r\n  background-color: #2d2d2d;\r\n  color: #ffffff;\r\n  font-family: monospace;\r\n  border: 1px solid #3f3f3f;\r\n  border-radius: 3px;\r\n  padding: 5px;\r\n  resize: none;\r\n  height: 150px;\r\n  margin-bottom: 5px;\r\n`;\r\n\r\nconst ConsoleLine = styled.div`\r\n  color: ${props => props.error ? '#ff6b6b' : '#ffffff'};\r\n  margin: 2px 0;\r\n  font-family: monospace;\r\n  white-space: pre-wrap;\r\n  word-break: break-word;\r\n`;\r\n\r\nconst ConsoleControls = styled.div`\r\n  display: flex;\r\n  justify-content: flex-end;\r\n  margin-top: 8px;\r\n  gap: 8px;\r\n`;\r\n\r\nconst PlayButton = styled.button`\r\n  background-color: #4CAF50;\r\n  color: white;\r\n  padding: 8px;\r\n  border: none;\r\n  border-radius: 4px;\r\n  cursor: pointer;\r\n  width: 40px;\r\n  height: 40px;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  font-size: 20px;\r\n  \r\n  &:hover {\r\n    background-color: #45a049;\r\n  }\r\n  \r\n  &:disabled {\r\n    background-color: #95a5a6;\r\n    cursor: not-allowed;\r\n  }\r\n`;\r\n\r\nconst RunButton = styled.button`\r\n  background-color: #4CAF50;\r\n  color: white;\r\n  padding: 8px 15px;\r\n  border: none;\r\n  border-radius: 3px;\r\n  margin-top: 5px;\r\n  cursor: pointer;\r\n  &:hover {\r\n    background-color: #45a049;\r\n  }\r\n`;\r\n\r\nconst PlayPauseButton = styled.button`\r\n  background-color: #4CAF50;\r\n  color: white;\r\n  padding: 8px 15px;\r\n  border: none;\r\n  border-radius: 3px;\r\n  margin-top: 5px;\r\n  cursor: pointer;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  width: 40px;\r\n  height: 40px;\r\n  \r\n  &:hover {\r\n    background-color: #45a049;\r\n  }\r\n  \r\n  &:disabled {\r\n    background-color: #95a5a6;\r\n    cursor: not-allowed;\r\n  }\r\n`;\r\n\r\nconst PlayIcon = styled.span`\r\n  display: inline-block;\r\n  width: 0;\r\n  height: 0;\r\n  border-style: solid;\r\n  border-width: 10px 0 10px 15px;\r\n  border-color: transparent transparent transparent white;\r\n  margin-left: 3px;\r\n`;\r\n\r\nconst PauseIcon = styled.span`\r\n  display: flex;\r\n  gap: 3px;\r\n  \r\n  &::before,\r\n  &::after {\r\n    content: '';\r\n    width: 5px;\r\n    height: 20px;\r\n    background-color: white;\r\n  }\r\n`;\r\n\r\n// Store console states globally\r\nconst consoleStates = {};\r\n\r\nconst JavaScriptConsole = ({ \r\n  consoleId, \r\n  content, \r\n  onContentChange,\r\n  farm,\r\n  setPrintFunction\r\n}) => {\r\n  const [input, setInput] = useState(content || '');\r\n  const [output, setOutput] = useState([\r\n    { text: '🌟 Welcome to the JavaScript Console! 🌟\\n', type: 'info' },\r\n    { text: '📝 Basic Commands:\\n', type: 'info' },\r\n    { text: '  • move(x, y)         - Move to coordinates (x,y)\\n', type: 'info' },\r\n    { text: '  • scan()             - Get info about current tile\\n', type: 'info' },\r\n    { text: '  • position()         - Get current coordinates\\n\\n', type: 'info' },\r\n    { text: '🚜 Farming Commands:\\n', type: 'info' },\r\n    { text: '  • plow()            - Plow the current tile\\n', type: 'info' },\r\n    { text: '  • plant(\"crop\")     - Plant a crop (wheat unlocked, others in Tech Tree)\\n', type: 'info' },\r\n    { text: '  • harvest()         - Harvest ready crop at current tile\\n\\n', type: 'info' },\r\n    { text: '🏗️ Farm Management:\\n', type: 'info' },\r\n    { text: '  • expand()          - Expand farm size (max 5x5)\\n', type: 'info' },\r\n    { text: '  • sell(\"type\", amount) - Sell harvested crops\\n', type: 'info' },\r\n    { text: '  • buy(\"type\", amount)  - Buy seeds for planting\\n\\n', type: 'info' },\r\n    { text: '💡 Tips:\\n', type: 'info' },\r\n    { text: '  • Start with expand() to increase farm size\\n', type: 'info' },\r\n    { text: '  • Use scan() to check tile status\\n', type: 'info' },\r\n    { text: '  • Crops must be planted on plowed land\\n', type: 'info' },\r\n    { text: '  • Unlock more crops in the Tech Tree\\n', type: 'info' },\r\n    { text: '  • Buy seeds before planting\\n\\n', type: 'info' },\r\n    { text: '⌨️ Usage:\\n', type: 'info' },\r\n    { text: '  • Type your code and press Play (▶) or Ctrl+Enter\\n', type: 'info' },\r\n    { text: '  • Each command runs once when executed\\n', type: 'info' },\r\n    { text: '  • Multiple commands can be entered on separate lines\\n\\n', type: 'info' }\r\n  ]);\r\n  const outputRef = useRef(output);\r\n  const [isPlaying, setIsPlaying] = useState(false);\r\n  const [currentLine, setCurrentLine] = useState(0);\r\n  const codeLines = useRef([]);\r\n  const executionInterval = useRef(null);\r\n\r\n  // Keep outputRef in sync\r\n  useEffect(() => {\r\n    outputRef.current = output;\r\n  }, [output]);\r\n\r\n  // Set up print function for this console\r\n  useEffect(() => {\r\n    if (setPrintFunction) {\r\n      setPrintFunction((text) => {\r\n        setOutput(prev => [...prev, { text: text + '\\n', type: 'normal' }]);\r\n      });\r\n    }\r\n  }, [setPrintFunction]);\r\n\r\n  // Initialize or restore console state\r\n  useEffect(() => {\r\n    if (!consoleStates[consoleId]) {\r\n      consoleStates[consoleId] = {\r\n        input: '',\r\n        output: outputRef.current,\r\n        isPlaying: false,\r\n        currentLine: 0,\r\n        initialized: false\r\n      };\r\n    } else {\r\n      setInput(consoleStates[consoleId].input);\r\n      setOutput(consoleStates[consoleId].output);\r\n      setIsPlaying(consoleStates[consoleId].isPlaying);\r\n      setCurrentLine(consoleStates[consoleId].currentLine);\r\n    }\r\n\r\n    // Show initialization message only once per console\r\n    if (!consoleStates[consoleId].initialized && farm) {\r\n      setOutput(prev => [...prev, { text: `Farm initialized: ${farm.toString()}\\n`, type: 'info' }]);\r\n      consoleStates[consoleId].initialized = true;\r\n    }\r\n  }, [consoleId, farm]);\r\n\r\n  // Save console state when it changes\r\n  useEffect(() => {\r\n    if (consoleStates[consoleId]) {\r\n      consoleStates[consoleId] = {\r\n        input,\r\n        output,\r\n        isPlaying,\r\n        currentLine,\r\n        initialized: true\r\n      };\r\n    }\r\n  }, [input, output, isPlaying, currentLine, consoleId]);\r\n\r\n  // Update parent when input changes\r\n  useEffect(() => {\r\n    onContentChange?.(consoleId, input);\r\n  }, [input, consoleId, onContentChange]);\r\n\r\n  // Update local state when content prop changes\r\n  useEffect(() => {\r\n    if (content !== undefined && content !== input) {\r\n      setInput(content);\r\n    }\r\n  }, [content]);\r\n\r\n  const handleKeyDown = (e) => {\r\n    if (e.key === 'Enter' && e.ctrlKey) {\r\n      e.preventDefault();\r\n      togglePlayPause();\r\n    }\r\n  };\r\n\r\n  const executeLine = (line) => {\r\n    if (!farm) return;\r\n\r\n    try {\r\n      setOutput(prev => [...prev, { text: '\\n>>> ' + line + '\\n', type: 'command' }]);\r\n\r\n      // Create a function that returns a Promise to handle async operations\r\n      const executeCode = new Function(\r\n        'farm',\r\n        `\r\n        const move = farm.move.bind(farm);\r\n        const plow = farm.plow.bind(farm);\r\n        const plant = farm.plant.bind(farm);\r\n        const harvest = farm.harvest.bind(farm);\r\n        const scan = farm.scan.bind(farm);\r\n        const position = farm.position.bind(farm);\r\n        const expand = farm.expand.bind(farm);\r\n        const sell = farm.sell.bind(farm);\r\n        const buy = farm.buy.bind(farm);\r\n        \r\n        return new Promise((resolve, reject) => {\r\n          try {\r\n            const result = eval(${JSON.stringify(line)});\r\n            if (result instanceof Promise) {\r\n              result.then(resolve).catch(reject);\r\n            } else {\r\n              resolve(result);\r\n            }\r\n          } catch (error) {\r\n            farm.print('Error: ' + error.message);\r\n            reject(error);\r\n          }\r\n        });\r\n      `);\r\n\r\n      return executeCode(farm);\r\n    } catch (error) {\r\n      setOutput(prev => [...prev, { text: 'Error: ' + error.message + '\\n', type: 'error' }]);\r\n      return Promise.reject(error);\r\n    }\r\n  };\r\n\r\n  const togglePlayPause = async () => {\r\n    if (!input.trim() || !farm) return;\r\n\r\n    if (!isPlaying) {\r\n      // Start playing\r\n      setIsPlaying(true);\r\n      try {\r\n        // Execute the entire code at once\r\n        const result = await executeLine(input);\r\n        if (result !== undefined) {\r\n          setOutput(prev => [...prev, { text: result + '\\n', type: 'normal' }]);\r\n        }\r\n      } catch (error) {\r\n        console.error('Execution error:', error);\r\n      } finally {\r\n        setIsPlaying(false);\r\n      }\r\n    }\r\n  };\r\n\r\n  // Cleanup interval on unmount\r\n  useEffect(() => {\r\n    return () => {\r\n      if (executionInterval.current) {\r\n        clearInterval(executionInterval.current);\r\n      }\r\n    };\r\n  }, []);\r\n\r\n  const handleInputChange = (e) => {\r\n    setInput(e.target.value);\r\n  };\r\n\r\n  return (\r\n    <ConsoleContainer>\r\n      <ConsoleOutput>\r\n        {output.map((line, index) => (\r\n          <ConsoleLine key={index} error={line.type === 'error'}>\r\n            {line.text}\r\n          </ConsoleLine>\r\n        ))}\r\n      </ConsoleOutput>\r\n      <ConsoleInput\r\n        id={`console-${consoleId}`}\r\n        value={input}\r\n        onChange={handleInputChange}\r\n        onKeyDown={handleKeyDown}\r\n        placeholder=\"Enter JavaScript code here...\"\r\n      />\r\n      <ConsoleControls>\r\n        <PlayButton onClick={togglePlayPause}>\r\n          {isPlaying ? '⏸️' : '▶️'}\r\n        </PlayButton>\r\n      </ConsoleControls>\r\n    </ConsoleContainer>\r\n  );\r\n}\r\n\r\nexport default JavaScriptConsole; "],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAC1D,OAAOC,MAAM,MAAM,mBAAmB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEvC,MAAMC,gBAAgB,GAAGH,MAAM,CAACI,GAAG;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAACC,EAAA,GARIF,gBAAgB;AAUtB,MAAMG,aAAa,GAAGN,MAAM,CAACI,GAAG;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAACG,GAAA,GAVID,aAAa;AAYnB,MAAME,YAAY,GAAGR,MAAM,CAACS,QAAQ;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAACC,GAAA,GAVIF,YAAY;AAYlB,MAAMG,WAAW,GAAGX,MAAM,CAACI,GAAG;AAC9B,WAAWQ,KAAK,IAAIA,KAAK,CAACC,KAAK,GAAG,SAAS,GAAG,SAAS;AACvD;AACA;AACA;AACA;AACA,CAAC;AAACC,GAAA,GANIH,WAAW;AAQjB,MAAMI,eAAe,GAAGf,MAAM,CAACI,GAAG;AAClC;AACA;AACA;AACA;AACA,CAAC;AAACY,GAAA,GALID,eAAe;AAOrB,MAAME,UAAU,GAAGjB,MAAM,CAACkB,MAAM;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAACC,GAAA,GAtBIF,UAAU;AAwBhB,MAAMG,SAAS,GAAGpB,MAAM,CAACkB,MAAM;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAED,MAAMG,eAAe,GAAGrB,MAAM,CAACkB,MAAM;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAED,MAAMI,QAAQ,GAAGtB,MAAM,CAACuB,IAAI;AAC5B;AACA;AACA;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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}