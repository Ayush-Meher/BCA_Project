{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\SPIDER\\\\Downloads\\\\Project\\\\Demo GPT\\\\Demo 1\\\\src\\\\components\\\\PythonConsole.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport styled from 'styled-components';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ConsoleContainer = styled.div`\n  background-color: #1e1e1e;\n  padding: 15px;\n  border-radius: 5px;\n  margin-bottom: 20px;\n`;\n_c = ConsoleContainer;\nconst ConsoleHeader = styled.h3`\n  color: #fff;\n  margin-bottom: 10px;\n`;\n_c2 = ConsoleHeader;\nconst CodeInput = styled.textarea`\n  width: 100%;\n  height: 150px;\n  background-color: #2d2d2d;\n  color: #fff;\n  border: none;\n  padding: 10px;\n  font-family: 'Consolas', monospace;\n  margin-bottom: 10px;\n  resize: vertical;\n`;\n_c3 = CodeInput;\nconst ExecuteButton = styled.button`\n  background-color: #4CAF50;\n  color: white;\n  border: none;\n  padding: 8px 16px;\n  border-radius: 4px;\n  cursor: pointer;\n  margin-right: 10px;\n\n  &:hover {\n    background-color: #45a049;\n  }\n`;\n_c4 = ExecuteButton;\nconst OutputArea = styled.div`\n  background-color: #2d2d2d;\n  color: #fff;\n  padding: 10px;\n  min-height: 50px;\n  font-family: 'Consolas', monospace;\n  white-space: pre-wrap;\n  margin-top: 10px;\n`;\n_c5 = OutputArea;\nfunction PythonConsole() {\n  _s();\n  const [code, setCode] = useState('');\n  const [output, setOutput] = useState('');\n  const executePythonCode = async () => {\n    try {\n      // Initialize Brython\n      if (window.brython) {\n        const result = await window.brython.run(code);\n        setOutput(result || 'Code executed successfully');\n      } else {\n        setOutput('Brython not loaded. Please wait...');\n      }\n    } catch (error) {\n      setOutput(`Error: ${error.message}`);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(ConsoleContainer, {\n    children: [/*#__PURE__*/_jsxDEV(ConsoleHeader, {\n      children: \"Python Console\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CodeInput, {\n      value: code,\n      onChange: e => setCode(e.target.value),\n      placeholder: \"Enter Python code here...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ExecuteButton, {\n      onClick: executePythonCode,\n      children: \"Execute\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(OutputArea, {\n      children: output\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 5\n  }, this);\n}\n_s(PythonConsole, \"yvTiRczmJkR4IEPlmnfoRlxphYQ=\");\n_c6 = PythonConsole;\nexport default PythonConsole;\nvar _c, _c2, _c3, _c4, _c5, _c6;\n$RefreshReg$(_c, \"ConsoleContainer\");\n$RefreshReg$(_c2, \"ConsoleHeader\");\n$RefreshReg$(_c3, \"CodeInput\");\n$RefreshReg$(_c4, \"ExecuteButton\");\n$RefreshReg$(_c5, \"OutputArea\");\n$RefreshReg$(_c6, \"PythonConsole\");","map":{"version":3,"names":["React","useState","styled","jsxDEV","_jsxDEV","ConsoleContainer","div","_c","ConsoleHeader","h3","_c2","CodeInput","textarea","_c3","ExecuteButton","button","_c4","OutputArea","_c5","PythonConsole","_s","code","setCode","output","setOutput","executePythonCode","window","brython","result","run","error","message","children","fileName","_jsxFileName","lineNumber","columnNumber","value","onChange","e","target","placeholder","onClick","_c6","$RefreshReg$"],"sources":["C:/Users/SPIDER/Downloads/Project/Demo GPT/Demo 1/src/components/PythonConsole.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst ConsoleContainer = styled.div`\r\n  background-color: #1e1e1e;\r\n  padding: 15px;\r\n  border-radius: 5px;\r\n  margin-bottom: 20px;\r\n`;\r\n\r\nconst ConsoleHeader = styled.h3`\r\n  color: #fff;\r\n  margin-bottom: 10px;\r\n`;\r\n\r\nconst CodeInput = styled.textarea`\r\n  width: 100%;\r\n  height: 150px;\r\n  background-color: #2d2d2d;\r\n  color: #fff;\r\n  border: none;\r\n  padding: 10px;\r\n  font-family: 'Consolas', monospace;\r\n  margin-bottom: 10px;\r\n  resize: vertical;\r\n`;\r\n\r\nconst ExecuteButton = styled.button`\r\n  background-color: #4CAF50;\r\n  color: white;\r\n  border: none;\r\n  padding: 8px 16px;\r\n  border-radius: 4px;\r\n  cursor: pointer;\r\n  margin-right: 10px;\r\n\r\n  &:hover {\r\n    background-color: #45a049;\r\n  }\r\n`;\r\n\r\nconst OutputArea = styled.div`\r\n  background-color: #2d2d2d;\r\n  color: #fff;\r\n  padding: 10px;\r\n  min-height: 50px;\r\n  font-family: 'Consolas', monospace;\r\n  white-space: pre-wrap;\r\n  margin-top: 10px;\r\n`;\r\n\r\nfunction PythonConsole() {\r\n  const [code, setCode] = useState('');\r\n  const [output, setOutput] = useState('');\r\n\r\n  const executePythonCode = async () => {\r\n    try {\r\n      // Initialize Brython\r\n      if (window.brython) {\r\n        const result = await window.brython.run(code);\r\n        setOutput(result || 'Code executed successfully');\r\n      } else {\r\n        setOutput('Brython not loaded. Please wait...');\r\n      }\r\n    } catch (error) {\r\n      setOutput(`Error: ${error.message}`);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <ConsoleContainer>\r\n      <ConsoleHeader>Python Console</ConsoleHeader>\r\n      <CodeInput\r\n        value={code}\r\n        onChange={(e) => setCode(e.target.value)}\r\n        placeholder=\"Enter Python code here...\"\r\n      />\r\n      <ExecuteButton onClick={executePythonCode}>Execute</ExecuteButton>\r\n      <OutputArea>{output}</OutputArea>\r\n    </ConsoleContainer>\r\n  );\r\n}\r\n\r\nexport default PythonConsole; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}