{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\SPIDER\\\\Downloads\\\\Project\\\\Demo GPT\\\\Demo 1\\\\src\\\\components\\\\Game3D.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect } from 'react';\nimport * as THREE from 'three';\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Game3D = ({\n  gameState,\n  setGameState\n}) => {\n  _s();\n  const canvasRef = useRef(null);\n  const sceneRef = useRef(null);\n  const cameraRef = useRef(null);\n  const rendererRef = useRef(null);\n  const modelsRef = useRef({});\n  const droneRef = useRef(null);\n  useEffect(() => {\n    // Initialize Three.js scene\n    const scene = new THREE.Scene();\n    scene.background = new THREE.Color(0x87CEEB);\n    const camera = new THREE.PerspectiveCamera(75, 1, 0.1, 1000);\n    camera.position.set(5, 5, 5);\n    camera.lookAt(0, 0, 0);\n    const renderer = new THREE.WebGLRenderer({\n      antialias: true\n    });\n    renderer.setSize(600, 600);\n    canvasRef.current.appendChild(renderer.domElement);\n\n    // Add lights\n    const ambientLight = new THREE.AmbientLight(0xffffff, 0.5);\n    scene.add(ambientLight);\n    const directionalLight = new THREE.DirectionalLight(0xffffff, 0.8);\n    directionalLight.position.set(10, 10, 5);\n    scene.add(directionalLight);\n\n    // Create ground plane\n    const groundGeometry = new THREE.PlaneGeometry(5, 5);\n    const groundMaterial = new THREE.MeshStandardMaterial({\n      color: 0x8B4513,\n      roughness: 0.8,\n      metalness: 0.2\n    });\n    const ground = new THREE.Mesh(groundGeometry, groundMaterial);\n    ground.rotation.x = -Math.PI / 2;\n    scene.add(ground);\n\n    // Load 3D models\n    const loader = new GLTFLoader();\n    const models = {};\n\n    // Load drone model\n    loader.load('/models/drone.glb', gltf => {\n      const drone = gltf.scene;\n      drone.scale.set(0.5, 0.5, 0.5);\n      drone.position.set(0, 0.5, 0);\n      scene.add(drone);\n      droneRef.current = drone;\n      models.drone = drone;\n    });\n\n    // Load crop models\n    ['wheat', 'corn', 'potato'].forEach(crop => {\n      loader.load(`/models/${crop}.glb`, gltf => {\n        const model = gltf.scene;\n        model.scale.set(0.3, 0.3, 0.3);\n        model.visible = false;\n        scene.add(model);\n        models[crop] = model;\n      });\n    });\n\n    // Store references\n    sceneRef.current = scene;\n    cameraRef.current = camera;\n    rendererRef.current = renderer;\n    modelsRef.current = models;\n\n    // Animation loop\n    const animate = () => {\n      requestAnimationFrame(animate);\n\n      // Update drone rotation\n      if (droneRef.current) {\n        droneRef.current.rotation.y += 0.01;\n        droneRef.current.position.y = Math.sin(Date.now() * 0.001) * 0.1 + 0.5;\n      }\n      renderer.render(scene, camera);\n    };\n    animate();\n\n    // Cleanup\n    return () => {\n      canvasRef.current.removeChild(renderer.domElement);\n      renderer.dispose();\n    };\n  }, []);\n  useEffect(() => {\n    // Update drone position\n    if (droneRef.current) {\n      droneRef.current.position.set(gameState.dronePosition.x - 2, 0.5, gameState.dronePosition.y - 2);\n    }\n\n    // Update crop positions\n    gameState.grid.forEach((row, x) => {\n      row.forEach((cell, y) => {\n        if (cell && modelsRef.current[cell.type]) {\n          const model = modelsRef.current[cell.type];\n          model.position.set(x - 2, 0, y - 2);\n          model.visible = true;\n        }\n      });\n    });\n  }, [gameState]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: canvasRef,\n    style: {\n      width: '100%',\n      height: '100%'\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 120,\n    columnNumber: 5\n  }, this);\n};\n_s(Game3D, \"F3zkn5WSXeGvYW3boXJ+GVKyn8o=\");\n_c = Game3D;\nexport default Game3D;\nvar _c;\n$RefreshReg$(_c, \"Game3D\");","map":{"version":3,"names":["React","useRef","useEffect","THREE","GLTFLoader","jsxDEV","_jsxDEV","Game3D","gameState","setGameState","_s","canvasRef","sceneRef","cameraRef","rendererRef","modelsRef","droneRef","scene","Scene","background","Color","camera","PerspectiveCamera","position","set","lookAt","renderer","WebGLRenderer","antialias","setSize","current","appendChild","domElement","ambientLight","AmbientLight","add","directionalLight","DirectionalLight","groundGeometry","PlaneGeometry","groundMaterial","MeshStandardMaterial","color","roughness","metalness","ground","Mesh","rotation","x","Math","PI","loader","models","load","gltf","drone","scale","forEach","crop","model","visible","animate","requestAnimationFrame","y","sin","Date","now","render","removeChild","dispose","dronePosition","grid","row","cell","type","ref","style","width","height","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/SPIDER/Downloads/Project/Demo GPT/Demo 1/src/components/Game3D.js"],"sourcesContent":["import React, { useRef, useEffect } from 'react';\r\nimport * as THREE from 'three';\r\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader';\r\n\r\nconst Game3D = ({ gameState, setGameState }) => {\r\n  const canvasRef = useRef(null);\r\n  const sceneRef = useRef(null);\r\n  const cameraRef = useRef(null);\r\n  const rendererRef = useRef(null);\r\n  const modelsRef = useRef({});\r\n  const droneRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    // Initialize Three.js scene\r\n    const scene = new THREE.Scene();\r\n    scene.background = new THREE.Color(0x87CEEB);\r\n    \r\n    const camera = new THREE.PerspectiveCamera(75, 1, 0.1, 1000);\r\n    camera.position.set(5, 5, 5);\r\n    camera.lookAt(0, 0, 0);\r\n    \r\n    const renderer = new THREE.WebGLRenderer({ antialias: true });\r\n    renderer.setSize(600, 600);\r\n    canvasRef.current.appendChild(renderer.domElement);\r\n\r\n    // Add lights\r\n    const ambientLight = new THREE.AmbientLight(0xffffff, 0.5);\r\n    scene.add(ambientLight);\r\n    \r\n    const directionalLight = new THREE.DirectionalLight(0xffffff, 0.8);\r\n    directionalLight.position.set(10, 10, 5);\r\n    scene.add(directionalLight);\r\n\r\n    // Create ground plane\r\n    const groundGeometry = new THREE.PlaneGeometry(5, 5);\r\n    const groundMaterial = new THREE.MeshStandardMaterial({ \r\n      color: 0x8B4513,\r\n      roughness: 0.8,\r\n      metalness: 0.2\r\n    });\r\n    const ground = new THREE.Mesh(groundGeometry, groundMaterial);\r\n    ground.rotation.x = -Math.PI / 2;\r\n    scene.add(ground);\r\n\r\n    // Load 3D models\r\n    const loader = new GLTFLoader();\r\n    const models = {};\r\n\r\n    // Load drone model\r\n    loader.load('/models/drone.glb', (gltf) => {\r\n      const drone = gltf.scene;\r\n      drone.scale.set(0.5, 0.5, 0.5);\r\n      drone.position.set(0, 0.5, 0);\r\n      scene.add(drone);\r\n      droneRef.current = drone;\r\n      models.drone = drone;\r\n    });\r\n\r\n    // Load crop models\r\n    ['wheat', 'corn', 'potato'].forEach(crop => {\r\n      loader.load(`/models/${crop}.glb`, (gltf) => {\r\n        const model = gltf.scene;\r\n        model.scale.set(0.3, 0.3, 0.3);\r\n        model.visible = false;\r\n        scene.add(model);\r\n        models[crop] = model;\r\n      });\r\n    });\r\n\r\n    // Store references\r\n    sceneRef.current = scene;\r\n    cameraRef.current = camera;\r\n    rendererRef.current = renderer;\r\n    modelsRef.current = models;\r\n\r\n    // Animation loop\r\n    const animate = () => {\r\n      requestAnimationFrame(animate);\r\n      \r\n      // Update drone rotation\r\n      if (droneRef.current) {\r\n        droneRef.current.rotation.y += 0.01;\r\n        droneRef.current.position.y = Math.sin(Date.now() * 0.001) * 0.1 + 0.5;\r\n      }\r\n\r\n      renderer.render(scene, camera);\r\n    };\r\n    animate();\r\n\r\n    // Cleanup\r\n    return () => {\r\n      canvasRef.current.removeChild(renderer.domElement);\r\n      renderer.dispose();\r\n    };\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    // Update drone position\r\n    if (droneRef.current) {\r\n      droneRef.current.position.set(\r\n        gameState.dronePosition.x - 2,\r\n        0.5,\r\n        gameState.dronePosition.y - 2\r\n      );\r\n    }\r\n\r\n    // Update crop positions\r\n    gameState.grid.forEach((row, x) => {\r\n      row.forEach((cell, y) => {\r\n        if (cell && modelsRef.current[cell.type]) {\r\n          const model = modelsRef.current[cell.type];\r\n          model.position.set(x - 2, 0, y - 2);\r\n          model.visible = true;\r\n        }\r\n      });\r\n    });\r\n  }, [gameState]);\r\n\r\n  return (\r\n    <div ref={canvasRef} style={{ width: '100%', height: '100%' }} />\r\n  );\r\n};\r\n\r\nexport default Game3D; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}