{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\SPIDER\\\\Downloads\\\\Project\\\\Demo GPT\\\\Demo 1\\\\src\\\\components\\\\Game3D.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect } from 'react';\nimport * as THREE from 'three';\nimport { OrbitControls } from 'three/addons/controls/OrbitControls.js';\nimport { GLTFLoader } from 'three/addons/loaders/GLTFLoader.js';\nimport { OBJLoader } from 'three/addons/loaders/OBJLoader.js';\nimport { EffectComposer } from 'three/addons/postprocessing/EffectComposer.js';\nimport { RenderPass } from 'three/addons/postprocessing/RenderPass.js';\nimport { UnrealBloomPass } from 'three/addons/postprocessing/UnrealBloomPass.js';\nimport { SMAAPass } from 'three/addons/postprocessing/SMAAPass.js';\nimport { Sky } from 'three/addons/objects/Sky.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Game3D = ({\n  gameState\n}) => {\n  _s();\n  const canvasRef = useRef(null);\n  const sceneRef = useRef(null);\n  const droneRef = useRef(null);\n  const composerRef = useRef(null);\n  const modelsRef = useRef({});\n  const texturesRef = useRef({});\n\n  // Convert game coordinates to scene coordinates\n  const gameToScene = (x, y) => {\n    const size = Math.sqrt(gameState.land.length);\n    const offset = (size - 1) / 2;\n    return {\n      x: x - offset,\n      z: y - offset\n    };\n  };\n\n  // Calculate camera position based on grid size\n  const calculateCameraPosition = () => {\n    const size = Math.sqrt(gameState.land.length);\n    const distance = 2 + size * 1.5; // Base distance that scales with grid size\n    const height = 3 + size * 1.2; // Base height that scales with grid size\n    return {\n      position: new THREE.Vector3(distance, height, distance),\n      target: new THREE.Vector3(0, 0, 0)\n    };\n  };\n\n  // Load textures\n  const loadTextures = async () => {\n    const textureLoader = new THREE.TextureLoader();\n    const loadTexture = url => new Promise((resolve, reject) => {\n      textureLoader.load(url, resolve, undefined, reject);\n    });\n    try {\n      texturesRef.current = {\n        grass: {\n          diffuse: await loadTexture('/textures/grass.jpg')\n        },\n        soil: {\n          diffuse: await loadTexture('/textures/plowed_soil.jpg')\n        }\n      };\n\n      // Configure texture properties\n      Object.values(texturesRef.current).forEach(textures => {\n        Object.values(textures).forEach(texture => {\n          texture.wrapS = texture.wrapT = THREE.RepeatWrapping;\n          texture.repeat.set(2, 2);\n        });\n      });\n    } catch (error) {\n      console.error('Error loading textures:', error);\n    }\n  };\n\n  // Load models\n  const loadModels = async () => {\n    const gltfLoader = new GLTFLoader();\n    const objLoader = new OBJLoader();\n    const loadGLTF = url => new Promise((resolve, reject) => {\n      gltfLoader.load(url, resolve, undefined, reject);\n    });\n    const loadOBJ = url => new Promise((resolve, reject) => {\n      objLoader.load(url, resolve, undefined, reject);\n    });\n    try {\n      // Load drone model\n      const droneModel = await loadGLTF('/models/drone.glb');\n      modelsRef.current.drone = droneModel.scene;\n\n      // Load crop models\n      modelsRef.current.wheat = await loadOBJ('/models/wheat.obj');\n      modelsRef.current.corn = await loadOBJ('/models/corn.obj');\n      modelsRef.current.potato = await loadOBJ('/models/potato.obj');\n\n      // Configure models\n      Object.values(modelsRef.current).forEach(model => {\n        model.traverse(child => {\n          if (child.isMesh) {\n            child.castShadow = true;\n            child.receiveShadow = true;\n          }\n        });\n      });\n    } catch (error) {\n      console.error('Error loading models:', error);\n    }\n  };\n\n  // Create environment map\n  const createEnvironmentMap = renderer => {\n    const pmremGenerator = new THREE.PMREMGenerator(renderer);\n    pmremGenerator.compileEquirectangularShader();\n    const sky = new Sky();\n    sky.scale.setScalar(450000);\n    const sun = new THREE.Vector3();\n    const uniforms = sky.material.uniforms;\n    uniforms['turbidity'].value = 10;\n    uniforms['rayleigh'].value = 3;\n    uniforms['mieCoefficient'].value = 0.005;\n    uniforms['mieDirectionalG'].value = 0.7;\n    const phi = THREE.MathUtils.degToRad(90 - 2);\n    const theta = THREE.MathUtils.degToRad(180);\n    sun.setFromSphericalCoords(1, phi, theta);\n    uniforms['sunPosition'].value.copy(sun);\n    const renderTarget = pmremGenerator.fromScene(sky);\n    pmremGenerator.dispose();\n    return renderTarget.texture;\n  };\n\n  // Create fallback drone model\n  const createFallbackDrone = () => {\n    const droneGroup = new THREE.Group();\n\n    // Drone body\n    const bodyGeometry = new THREE.BoxGeometry(0.4, 0.1, 0.4);\n    const bodyMaterial = new THREE.MeshStandardMaterial({\n      color: 0x3498db,\n      metalness: 0.8,\n      roughness: 0.2\n    });\n    const body = new THREE.Mesh(bodyGeometry, bodyMaterial);\n    body.castShadow = true;\n    droneGroup.add(body);\n\n    // Drone arms\n    const armGeometry = new THREE.CylinderGeometry(0.02, 0.02, 0.3);\n    const armMaterial = new THREE.MeshStandardMaterial({\n      color: 0x2c3e50,\n      metalness: 0.5,\n      roughness: 0.5\n    });\n\n    // Create four arms\n    for (let i = 0; i < 4; i++) {\n      const arm = new THREE.Mesh(armGeometry, armMaterial);\n      arm.position.y = 0.05;\n      arm.rotation.z = Math.PI / 2;\n      arm.rotation.y = i * Math.PI / 2;\n      arm.position.x = Math.cos(arm.rotation.y) * 0.2;\n      arm.position.z = Math.sin(arm.rotation.y) * 0.2;\n      arm.castShadow = true;\n      droneGroup.add(arm);\n    }\n\n    // Propellers\n    const propGeometry = new THREE.BoxGeometry(0.05, 0.01, 0.3);\n    const propMaterial = new THREE.MeshStandardMaterial({\n      color: 0x95a5a6,\n      metalness: 0.3,\n      roughness: 0.7\n    });\n\n    // Create four propellers\n    for (let i = 0; i < 4; i++) {\n      const propeller = new THREE.Group();\n      const blade1 = new THREE.Mesh(propGeometry, propMaterial);\n      const blade2 = new THREE.Mesh(propGeometry, propMaterial);\n      blade2.rotation.y = Math.PI / 2;\n      propeller.add(blade1, blade2);\n      propeller.position.y = 0.1;\n      propeller.position.x = Math.cos(i * Math.PI / 2) * 0.2;\n      propeller.position.z = Math.sin(i * Math.PI / 2) * 0.2;\n      propeller.castShadow = true;\n      droneGroup.add(propeller);\n    }\n    return droneGroup;\n  };\n\n  // Create and update tiles\n  const updateTiles = () => {\n    if (!sceneRef.current) return;\n\n    // Remove old tiles\n    const oldTiles = sceneRef.current.children.filter(child => child.userData.isTile);\n    oldTiles.forEach(tile => {\n      sceneRef.current.remove(tile);\n      if (tile.geometry) tile.geometry.dispose();\n      if (tile.material) tile.material.dispose();\n    });\n\n    // Create new tiles based on gameState\n    const size = Math.sqrt(gameState.land.length);\n    const tileSize = 1;\n    const offset = (size - 1) / 2;\n    gameState.land.forEach((tile, index) => {\n      if (tile.isPlowed) {\n        var _texturesRef$current, _texturesRef$current$;\n        const x = Math.floor(index / size);\n        const z = index % size;\n        const geometry = new THREE.PlaneGeometry(tileSize * 0.9, tileSize * 0.9);\n        const material = new THREE.MeshStandardMaterial({\n          color: 0x8B4513,\n          // Default soil color\n          roughness: 0.8,\n          metalness: 0.2\n        });\n\n        // Apply texture if available\n        if ((_texturesRef$current = texturesRef.current) !== null && _texturesRef$current !== void 0 && (_texturesRef$current$ = _texturesRef$current.soil) !== null && _texturesRef$current$ !== void 0 && _texturesRef$current$.diffuse) {\n          material.map = texturesRef.current.soil.diffuse;\n          material.needsUpdate = true;\n        }\n        const mesh = new THREE.Mesh(geometry, material);\n        mesh.rotation.x = -Math.PI / 2;\n        mesh.position.set(x - offset, 0.01, z - offset); // Slightly above ground\n        mesh.receiveShadow = true;\n        mesh.userData.isTile = true;\n        sceneRef.current.add(mesh);\n      }\n    });\n  };\n  useEffect(() => {\n    if (!canvasRef.current) return;\n\n    // Create scene\n    const scene = new THREE.Scene();\n    scene.background = new THREE.Color(0x87CEEB);\n    scene.fog = new THREE.FogExp2(0x87CEEB, 0.01);\n    sceneRef.current = scene;\n\n    // Create camera with initial position\n    const camera = new THREE.PerspectiveCamera(60, 1, 0.1, 1000);\n    const initialCamera = calculateCameraPosition();\n    camera.position.copy(initialCamera.position);\n    camera.lookAt(initialCamera.target);\n\n    // Create renderer with improved settings\n    const renderer = new THREE.WebGLRenderer({\n      canvas: canvasRef.current,\n      antialias: true,\n      powerPreference: \"high-performance\",\n      stencil: false\n    });\n    renderer.setSize(600, 600);\n    renderer.shadowMap.enabled = true;\n    renderer.shadowMap.type = THREE.PCFSoftShadowMap;\n    renderer.outputColorSpace = THREE.SRGBColorSpace;\n    renderer.toneMapping = THREE.ACESFilmicToneMapping;\n    renderer.toneMappingExposure = 1.0;\n    renderer.setPixelRatio(window.devicePixelRatio);\n\n    // Create environment map\n    const envMap = createEnvironmentMap(renderer);\n    scene.environment = envMap;\n\n    // Add lights with improved settings\n    const ambientLight = new THREE.AmbientLight(0xffffff, 0.5);\n    scene.add(ambientLight);\n    const sunLight = new THREE.DirectionalLight(0xffffff, 2.0);\n    sunLight.position.set(10, 10, 5);\n    sunLight.castShadow = true;\n    sunLight.shadow.mapSize.width = 2048;\n    sunLight.shadow.mapSize.height = 2048;\n    sunLight.shadow.camera.near = 0.5;\n    sunLight.shadow.camera.far = 50;\n    sunLight.shadow.camera.left = -10;\n    sunLight.shadow.camera.right = 10;\n    sunLight.shadow.camera.top = 10;\n    sunLight.shadow.camera.bottom = -10;\n    sunLight.shadow.bias = -0.001;\n    scene.add(sunLight);\n\n    // Add subtle point lights for better ambiance\n    const pointLight1 = new THREE.PointLight(0xffd700, 0.5, 10);\n    pointLight1.position.set(2, 2, 2);\n    scene.add(pointLight1);\n    const pointLight2 = new THREE.PointLight(0x00ffff, 0.3, 10);\n    pointLight2.position.set(-2, 3, -2);\n    scene.add(pointLight2);\n\n    // Create ground with dynamic size\n    const size = Math.sqrt(gameState.land.length);\n    const groundSize = Math.max(size * 1.5, 2); // At least 2 units, scales with grid\n    const groundGeometry = new THREE.PlaneGeometry(groundSize, groundSize);\n    const groundMaterial = new THREE.MeshStandardMaterial({\n      color: 0x90EE90,\n      // Default grass color until texture loads\n      roughness: 0.8,\n      metalness: 0.2\n    });\n    const ground = new THREE.Mesh(groundGeometry, groundMaterial);\n    ground.rotation.x = -Math.PI / 2;\n    ground.receiveShadow = true;\n    scene.add(ground);\n\n    // Add grid helper with dynamic size\n    const gridHelper = new THREE.GridHelper(size, size, 0x000000, 0x000000);\n    gridHelper.position.y = 0.01;\n    gridHelper.material.opacity = 0.2;\n    gridHelper.material.transparent = true;\n    scene.add(gridHelper);\n\n    // Setup post-processing with improved settings\n    const composer = new EffectComposer(renderer);\n    composerRef.current = composer;\n    const renderPass = new RenderPass(scene, camera);\n    composer.addPass(renderPass);\n    const bloomPass = new UnrealBloomPass(new THREE.Vector2(600, 600), 0.5,\n    // strength\n    0.4,\n    // radius\n    0.85 // threshold\n    );\n    composer.addPass(bloomPass);\n    const smaaPass = new SMAAPass(600, 600);\n    composer.addPass(smaaPass);\n\n    // Add OrbitControls with dynamic limits\n    const controls = new OrbitControls(camera, renderer.domElement);\n    controls.enableDamping = true;\n    controls.dampingFactor = 0.05;\n    controls.screenSpacePanning = false;\n    controls.minDistance = 2;\n    controls.maxDistance = 20;\n    controls.maxPolarAngle = Math.PI / 2.1;\n    controls.minPolarAngle = Math.PI / 6;\n    controls.enableZoom = true;\n    controls.zoomSpeed = 0.5;\n    controls.rotateSpeed = 0.5;\n\n    // Set initial camera position\n    camera.position.copy(initialCamera.position);\n    controls.target.copy(initialCamera.target);\n    controls.update();\n\n    // Load assets with improved error handling\n    Promise.all([loadTextures(), loadModels()]).then(() => {\n      var _texturesRef$current2, _texturesRef$current3;\n      // Update ground material with loaded textures\n      if ((_texturesRef$current2 = texturesRef.current) !== null && _texturesRef$current2 !== void 0 && (_texturesRef$current3 = _texturesRef$current2.grass) !== null && _texturesRef$current3 !== void 0 && _texturesRef$current3.diffuse) {\n        ground.material.map = texturesRef.current.grass.diffuse;\n        ground.material.needsUpdate = true;\n      }\n\n      // Add drone to scene with improved fallback handling\n      if (modelsRef.current.drone) {\n        const drone = modelsRef.current.drone.clone();\n        drone.scale.set(0.5, 0.5, 0.5);\n        drone.traverse(child => {\n          if (child.isMesh) {\n            child.castShadow = true;\n            child.material.envMapIntensity = 1;\n          }\n        });\n        scene.add(drone);\n        droneRef.current = drone;\n      } else {\n        console.log('Using fallback drone model');\n        const fallbackDrone = createFallbackDrone();\n        scene.add(fallbackDrone);\n        droneRef.current = fallbackDrone;\n      }\n    }).catch(error => {\n      console.error('Error loading assets:', error);\n      const fallbackDrone = createFallbackDrone();\n      scene.add(fallbackDrone);\n      droneRef.current = fallbackDrone;\n    });\n\n    // Animation loop with improved timing\n    let lastTime = 0;\n    const animate = time => {\n      requestAnimationFrame(animate);\n      const delta = (time - lastTime) / 1000;\n      lastTime = time;\n\n      // Update drone position and animation with smooth interpolation\n      if (droneRef.current) {\n        const targetPos = gameToScene(gameState.dronePosition.x, gameState.dronePosition.y);\n        droneRef.current.position.x = THREE.MathUtils.lerp(droneRef.current.position.x, targetPos.x, 5 * delta);\n        droneRef.current.position.z = THREE.MathUtils.lerp(droneRef.current.position.z, targetPos.z, 5 * delta);\n        droneRef.current.position.y = 0.5 + Math.sin(time * 0.002) * 0.1;\n\n        // Rotate propellers if using fallback model\n        if (!modelsRef.current.drone) {\n          droneRef.current.children.forEach((child, index) => {\n            if (index > 4) {\n              // Skip body and arms\n              child.rotation.y += 15 * delta;\n            }\n          });\n        }\n      }\n\n      // Update controls and render\n      controls.update();\n      composer.render();\n    };\n    animate(0);\n\n    // Cleanup with improved resource disposal\n    return () => {\n      renderer.dispose();\n      composer.dispose();\n      controls.dispose();\n      envMap.dispose();\n      Object.values(texturesRef.current).forEach(textures => {\n        Object.values(textures).forEach(texture => texture.dispose());\n      });\n      scene.traverse(object => {\n        if (object.geometry) object.geometry.dispose();\n        if (object.material) {\n          if (Array.isArray(object.material)) {\n            object.material.forEach(material => material.dispose());\n          } else {\n            object.material.dispose();\n          }\n        }\n      });\n    };\n  }, []);\n\n  // Update drone position when gameState changes\n  useEffect(() => {\n    if (droneRef.current && gameState.dronePosition) {\n      const targetPos = gameToScene(gameState.dronePosition.x, gameState.dronePosition.y);\n      droneRef.current.position.x = targetPos.x;\n      droneRef.current.position.z = targetPos.z;\n    }\n  }, [gameState.dronePosition]);\n\n  // Update tiles when gameState changes\n  useEffect(() => {\n    updateTiles();\n  }, [gameState.land]);\n\n  // Add new effect to handle camera position updates when grid size changes\n  useEffect(() => {\n    if (!canvasRef.current) return;\n    const camera = new THREE.PerspectiveCamera(60, 1, 0.1, 1000);\n    const newCamera = calculateCameraPosition();\n\n    // Get the orbit controls instance\n    const canvas = canvasRef.current;\n    const controls = canvas.__controls;\n    if (controls) {\n      // Smoothly animate to new position\n      const duration = 1000; // 1 second\n      const startPosition = controls.object.position.clone();\n      const startTarget = controls.target.clone();\n      const startTime = Date.now();\n      const animate = () => {\n        const elapsed = Date.now() - startTime;\n        const progress = Math.min(elapsed / duration, 1);\n\n        // Smooth easing\n        const t = progress < 0.5 ? 4 * progress * progress * progress : 1 - Math.pow(-2 * progress + 2, 3) / 2;\n\n        // Update camera position\n        controls.object.position.lerpVectors(startPosition, newCamera.position, t);\n        controls.target.lerpVectors(startTarget, newCamera.target, t);\n        controls.update();\n        if (progress < 1) {\n          requestAnimationFrame(animate);\n        }\n      };\n      animate();\n    }\n  }, [gameState.land.length]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      width: '600px',\n      height: '600px',\n      backgroundColor: '#000000',\n      margin: '0 auto',\n      borderRadius: '8px',\n      overflow: 'hidden',\n      boxShadow: '0 4px 6px rgba(0, 0, 0, 0.1)'\n    },\n    children: /*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: canvasRef,\n      style: {\n        width: '100%',\n        height: '100%'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 521,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 512,\n    columnNumber: 5\n  }, this);\n};\n_s(Game3D, \"3FBZdgTMUVIh/h1xei9p8nqjX7E=\");\n_c = Game3D;\nexport default Game3D;\nvar _c;\n$RefreshReg$(_c, \"Game3D\");","map":{"version":3,"names":["React","useRef","useEffect","THREE","OrbitControls","GLTFLoader","OBJLoader","EffectComposer","RenderPass","UnrealBloomPass","SMAAPass","Sky","jsxDEV","_jsxDEV","Game3D","gameState","_s","canvasRef","sceneRef","droneRef","composerRef","modelsRef","texturesRef","gameToScene","x","y","size","Math","sqrt","land","length","offset","z","calculateCameraPosition","distance","height","position","Vector3","target","loadTextures","textureLoader","TextureLoader","loadTexture","url","Promise","resolve","reject","load","undefined","current","grass","diffuse","soil","Object","values","forEach","textures","texture","wrapS","wrapT","RepeatWrapping","repeat","set","error","console","loadModels","gltfLoader","objLoader","loadGLTF","loadOBJ","droneModel","drone","scene","wheat","corn","potato","model","traverse","child","isMesh","castShadow","receiveShadow","createEnvironmentMap","renderer","pmremGenerator","PMREMGenerator","compileEquirectangularShader","sky","scale","setScalar","sun","uniforms","material","value","phi","MathUtils","degToRad","theta","setFromSphericalCoords","copy","renderTarget","fromScene","dispose","createFallbackDrone","droneGroup","Group","bodyGeometry","BoxGeometry","bodyMaterial","MeshStandardMaterial","color","metalness","roughness","body","Mesh","add","armGeometry","CylinderGeometry","armMaterial","i","arm","rotation","PI","cos","sin","propGeometry","propMaterial","propeller","blade1","blade2","updateTiles","oldTiles","children","filter","userData","isTile","tile","remove","geometry","tileSize","index","isPlowed","_texturesRef$current","_texturesRef$current$","floor","PlaneGeometry","map","needsUpdate","mesh","Scene","background","Color","fog","FogExp2","camera","PerspectiveCamera","initialCamera","lookAt","WebGLRenderer","canvas","antialias","powerPreference","stencil","setSize","shadowMap","enabled","type","PCFSoftShadowMap","outputColorSpace","SRGBColorSpace","toneMapping","ACESFilmicToneMapping","toneMappingExposure","setPixelRatio","window","devicePixelRatio","envMap","environment","ambientLight","AmbientLight","sunLight","DirectionalLight","shadow","mapSize","width","near","far","left","right","top","bottom","bias","pointLight1","PointLight","pointLight2","groundSize","max","groundGeometry","groundMaterial","ground","gridHelper","GridHelper","opacity","transparent","composer","renderPass","addPass","bloomPass","Vector2","smaaPass","controls","domElement","enableDamping","dampingFactor","screenSpacePanning","minDistance","maxDistance","maxPolarAngle","minPolarAngle","enableZoom","zoomSpeed","rotateSpeed","update","all","then","_texturesRef$current2","_texturesRef$current3","clone","envMapIntensity","log","fallbackDrone","catch","lastTime","animate","time","requestAnimationFrame","delta","targetPos","dronePosition","lerp","render","object","Array","isArray","newCamera","__controls","duration","startPosition","startTarget","startTime","Date","now","elapsed","progress","min","t","pow","lerpVectors","style","backgroundColor","margin","borderRadius","overflow","boxShadow","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/SPIDER/Downloads/Project/Demo GPT/Demo 1/src/components/Game3D.js"],"sourcesContent":["import React, { useRef, useEffect } from 'react';\r\nimport * as THREE from 'three';\r\nimport { OrbitControls } from 'three/addons/controls/OrbitControls.js';\r\nimport { GLTFLoader } from 'three/addons/loaders/GLTFLoader.js';\r\nimport { OBJLoader } from 'three/addons/loaders/OBJLoader.js';\r\nimport { EffectComposer } from 'three/addons/postprocessing/EffectComposer.js';\r\nimport { RenderPass } from 'three/addons/postprocessing/RenderPass.js';\r\nimport { UnrealBloomPass } from 'three/addons/postprocessing/UnrealBloomPass.js';\r\nimport { SMAAPass } from 'three/addons/postprocessing/SMAAPass.js';\r\nimport { Sky } from 'three/addons/objects/Sky.js';\r\n\r\nconst Game3D = ({ gameState }) => {\r\n  const canvasRef = useRef(null);\r\n  const sceneRef = useRef(null);\r\n  const droneRef = useRef(null);\r\n  const composerRef = useRef(null);\r\n  const modelsRef = useRef({});\r\n  const texturesRef = useRef({});\r\n\r\n  // Convert game coordinates to scene coordinates\r\n  const gameToScene = (x, y) => {\r\n    const size = Math.sqrt(gameState.land.length);\r\n    const offset = (size - 1) / 2;\r\n    return {\r\n      x: x - offset,\r\n      z: y - offset\r\n    };\r\n  };\r\n\r\n  // Calculate camera position based on grid size\r\n  const calculateCameraPosition = () => {\r\n    const size = Math.sqrt(gameState.land.length);\r\n    const distance = 2 + size * 1.5; // Base distance that scales with grid size\r\n    const height = 3 + size * 1.2;   // Base height that scales with grid size\r\n    return {\r\n      position: new THREE.Vector3(distance, height, distance),\r\n      target: new THREE.Vector3(0, 0, 0)\r\n    };\r\n  };\r\n\r\n  // Load textures\r\n  const loadTextures = async () => {\r\n    const textureLoader = new THREE.TextureLoader();\r\n    const loadTexture = (url) => new Promise((resolve, reject) => {\r\n      textureLoader.load(url, resolve, undefined, reject);\r\n    });\r\n\r\n    try {\r\n      texturesRef.current = {\r\n        grass: {\r\n          diffuse: await loadTexture('/textures/grass.jpg')\r\n        },\r\n        soil: {\r\n          diffuse: await loadTexture('/textures/plowed_soil.jpg')\r\n        }\r\n      };\r\n\r\n      // Configure texture properties\r\n      Object.values(texturesRef.current).forEach(textures => {\r\n        Object.values(textures).forEach(texture => {\r\n          texture.wrapS = texture.wrapT = THREE.RepeatWrapping;\r\n          texture.repeat.set(2, 2);\r\n        });\r\n      });\r\n    } catch (error) {\r\n      console.error('Error loading textures:', error);\r\n    }\r\n  };\r\n\r\n  // Load models\r\n  const loadModels = async () => {\r\n    const gltfLoader = new GLTFLoader();\r\n    const objLoader = new OBJLoader();\r\n\r\n    const loadGLTF = (url) => new Promise((resolve, reject) => {\r\n      gltfLoader.load(url, resolve, undefined, reject);\r\n    });\r\n\r\n    const loadOBJ = (url) => new Promise((resolve, reject) => {\r\n      objLoader.load(url, resolve, undefined, reject);\r\n    });\r\n\r\n    try {\r\n      // Load drone model\r\n      const droneModel = await loadGLTF('/models/drone.glb');\r\n      modelsRef.current.drone = droneModel.scene;\r\n\r\n      // Load crop models\r\n      modelsRef.current.wheat = await loadOBJ('/models/wheat.obj');\r\n      modelsRef.current.corn = await loadOBJ('/models/corn.obj');\r\n      modelsRef.current.potato = await loadOBJ('/models/potato.obj');\r\n\r\n      // Configure models\r\n      Object.values(modelsRef.current).forEach(model => {\r\n        model.traverse(child => {\r\n          if (child.isMesh) {\r\n            child.castShadow = true;\r\n            child.receiveShadow = true;\r\n          }\r\n        });\r\n      });\r\n    } catch (error) {\r\n      console.error('Error loading models:', error);\r\n    }\r\n  };\r\n\r\n  // Create environment map\r\n  const createEnvironmentMap = (renderer) => {\r\n    const pmremGenerator = new THREE.PMREMGenerator(renderer);\r\n    pmremGenerator.compileEquirectangularShader();\r\n\r\n    const sky = new Sky();\r\n    sky.scale.setScalar(450000);\r\n    \r\n    const sun = new THREE.Vector3();\r\n    const uniforms = sky.material.uniforms;\r\n    uniforms['turbidity'].value = 10;\r\n    uniforms['rayleigh'].value = 3;\r\n    uniforms['mieCoefficient'].value = 0.005;\r\n    uniforms['mieDirectionalG'].value = 0.7;\r\n\r\n    const phi = THREE.MathUtils.degToRad(90 - 2);\r\n    const theta = THREE.MathUtils.degToRad(180);\r\n    sun.setFromSphericalCoords(1, phi, theta);\r\n    uniforms['sunPosition'].value.copy(sun);\r\n\r\n    const renderTarget = pmremGenerator.fromScene(sky);\r\n    pmremGenerator.dispose();\r\n\r\n    return renderTarget.texture;\r\n  };\r\n\r\n  // Create fallback drone model\r\n  const createFallbackDrone = () => {\r\n    const droneGroup = new THREE.Group();\r\n\r\n    // Drone body\r\n    const bodyGeometry = new THREE.BoxGeometry(0.4, 0.1, 0.4);\r\n    const bodyMaterial = new THREE.MeshStandardMaterial({\r\n      color: 0x3498db,\r\n      metalness: 0.8,\r\n      roughness: 0.2\r\n    });\r\n    const body = new THREE.Mesh(bodyGeometry, bodyMaterial);\r\n    body.castShadow = true;\r\n    droneGroup.add(body);\r\n\r\n    // Drone arms\r\n    const armGeometry = new THREE.CylinderGeometry(0.02, 0.02, 0.3);\r\n    const armMaterial = new THREE.MeshStandardMaterial({\r\n      color: 0x2c3e50,\r\n      metalness: 0.5,\r\n      roughness: 0.5\r\n    });\r\n\r\n    // Create four arms\r\n    for (let i = 0; i < 4; i++) {\r\n      const arm = new THREE.Mesh(armGeometry, armMaterial);\r\n      arm.position.y = 0.05;\r\n      arm.rotation.z = Math.PI / 2;\r\n      arm.rotation.y = (i * Math.PI) / 2;\r\n      arm.position.x = Math.cos(arm.rotation.y) * 0.2;\r\n      arm.position.z = Math.sin(arm.rotation.y) * 0.2;\r\n      arm.castShadow = true;\r\n      droneGroup.add(arm);\r\n    }\r\n\r\n    // Propellers\r\n    const propGeometry = new THREE.BoxGeometry(0.05, 0.01, 0.3);\r\n    const propMaterial = new THREE.MeshStandardMaterial({\r\n      color: 0x95a5a6,\r\n      metalness: 0.3,\r\n      roughness: 0.7\r\n    });\r\n\r\n    // Create four propellers\r\n    for (let i = 0; i < 4; i++) {\r\n      const propeller = new THREE.Group();\r\n      \r\n      const blade1 = new THREE.Mesh(propGeometry, propMaterial);\r\n      const blade2 = new THREE.Mesh(propGeometry, propMaterial);\r\n      blade2.rotation.y = Math.PI / 2;\r\n      \r\n      propeller.add(blade1, blade2);\r\n      propeller.position.y = 0.1;\r\n      propeller.position.x = Math.cos(i * Math.PI / 2) * 0.2;\r\n      propeller.position.z = Math.sin(i * Math.PI / 2) * 0.2;\r\n      propeller.castShadow = true;\r\n      \r\n      droneGroup.add(propeller);\r\n    }\r\n\r\n    return droneGroup;\r\n  };\r\n\r\n  // Create and update tiles\r\n  const updateTiles = () => {\r\n    if (!sceneRef.current) return;\r\n\r\n    // Remove old tiles\r\n    const oldTiles = sceneRef.current.children.filter(child => child.userData.isTile);\r\n    oldTiles.forEach(tile => {\r\n      sceneRef.current.remove(tile);\r\n      if (tile.geometry) tile.geometry.dispose();\r\n      if (tile.material) tile.material.dispose();\r\n    });\r\n\r\n    // Create new tiles based on gameState\r\n    const size = Math.sqrt(gameState.land.length);\r\n    const tileSize = 1;\r\n    const offset = (size - 1) / 2;\r\n\r\n    gameState.land.forEach((tile, index) => {\r\n      if (tile.isPlowed) {\r\n        const x = Math.floor(index / size);\r\n        const z = index % size;\r\n        \r\n        const geometry = new THREE.PlaneGeometry(tileSize * 0.9, tileSize * 0.9);\r\n        const material = new THREE.MeshStandardMaterial({\r\n          color: 0x8B4513, // Default soil color\r\n          roughness: 0.8,\r\n          metalness: 0.2\r\n        });\r\n\r\n        // Apply texture if available\r\n        if (texturesRef.current?.soil?.diffuse) {\r\n          material.map = texturesRef.current.soil.diffuse;\r\n          material.needsUpdate = true;\r\n        }\r\n        \r\n        const mesh = new THREE.Mesh(geometry, material);\r\n        mesh.rotation.x = -Math.PI / 2;\r\n        mesh.position.set(x - offset, 0.01, z - offset); // Slightly above ground\r\n        mesh.receiveShadow = true;\r\n        mesh.userData.isTile = true;\r\n        \r\n        sceneRef.current.add(mesh);\r\n      }\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (!canvasRef.current) return;\r\n\r\n    // Create scene\r\n    const scene = new THREE.Scene();\r\n    scene.background = new THREE.Color(0x87CEEB);\r\n    scene.fog = new THREE.FogExp2(0x87CEEB, 0.01);\r\n    sceneRef.current = scene;\r\n\r\n    // Create camera with initial position\r\n    const camera = new THREE.PerspectiveCamera(60, 1, 0.1, 1000);\r\n    const initialCamera = calculateCameraPosition();\r\n    camera.position.copy(initialCamera.position);\r\n    camera.lookAt(initialCamera.target);\r\n\r\n    // Create renderer with improved settings\r\n    const renderer = new THREE.WebGLRenderer({\r\n      canvas: canvasRef.current,\r\n      antialias: true,\r\n      powerPreference: \"high-performance\",\r\n      stencil: false\r\n    });\r\n    renderer.setSize(600, 600);\r\n    renderer.shadowMap.enabled = true;\r\n    renderer.shadowMap.type = THREE.PCFSoftShadowMap;\r\n    renderer.outputColorSpace = THREE.SRGBColorSpace;\r\n    renderer.toneMapping = THREE.ACESFilmicToneMapping;\r\n    renderer.toneMappingExposure = 1.0;\r\n    renderer.setPixelRatio(window.devicePixelRatio);\r\n\r\n    // Create environment map\r\n    const envMap = createEnvironmentMap(renderer);\r\n    scene.environment = envMap;\r\n\r\n    // Add lights with improved settings\r\n    const ambientLight = new THREE.AmbientLight(0xffffff, 0.5);\r\n    scene.add(ambientLight);\r\n\r\n    const sunLight = new THREE.DirectionalLight(0xffffff, 2.0);\r\n    sunLight.position.set(10, 10, 5);\r\n    sunLight.castShadow = true;\r\n    sunLight.shadow.mapSize.width = 2048;\r\n    sunLight.shadow.mapSize.height = 2048;\r\n    sunLight.shadow.camera.near = 0.5;\r\n    sunLight.shadow.camera.far = 50;\r\n    sunLight.shadow.camera.left = -10;\r\n    sunLight.shadow.camera.right = 10;\r\n    sunLight.shadow.camera.top = 10;\r\n    sunLight.shadow.camera.bottom = -10;\r\n    sunLight.shadow.bias = -0.001;\r\n    scene.add(sunLight);\r\n\r\n    // Add subtle point lights for better ambiance\r\n    const pointLight1 = new THREE.PointLight(0xffd700, 0.5, 10);\r\n    pointLight1.position.set(2, 2, 2);\r\n    scene.add(pointLight1);\r\n\r\n    const pointLight2 = new THREE.PointLight(0x00ffff, 0.3, 10);\r\n    pointLight2.position.set(-2, 3, -2);\r\n    scene.add(pointLight2);\r\n\r\n    // Create ground with dynamic size\r\n    const size = Math.sqrt(gameState.land.length);\r\n    const groundSize = Math.max(size * 1.5, 2); // At least 2 units, scales with grid\r\n    const groundGeometry = new THREE.PlaneGeometry(groundSize, groundSize);\r\n    const groundMaterial = new THREE.MeshStandardMaterial({\r\n      color: 0x90EE90, // Default grass color until texture loads\r\n      roughness: 0.8,\r\n      metalness: 0.2\r\n    });\r\n    const ground = new THREE.Mesh(groundGeometry, groundMaterial);\r\n    ground.rotation.x = -Math.PI / 2;\r\n    ground.receiveShadow = true;\r\n    scene.add(ground);\r\n\r\n    // Add grid helper with dynamic size\r\n    const gridHelper = new THREE.GridHelper(size, size, 0x000000, 0x000000);\r\n    gridHelper.position.y = 0.01;\r\n    gridHelper.material.opacity = 0.2;\r\n    gridHelper.material.transparent = true;\r\n    scene.add(gridHelper);\r\n\r\n    // Setup post-processing with improved settings\r\n    const composer = new EffectComposer(renderer);\r\n    composerRef.current = composer;\r\n\r\n    const renderPass = new RenderPass(scene, camera);\r\n    composer.addPass(renderPass);\r\n\r\n    const bloomPass = new UnrealBloomPass(\r\n      new THREE.Vector2(600, 600),\r\n      0.5,  // strength\r\n      0.4,  // radius\r\n      0.85  // threshold\r\n    );\r\n    composer.addPass(bloomPass);\r\n\r\n    const smaaPass = new SMAAPass(600, 600);\r\n    composer.addPass(smaaPass);\r\n\r\n    // Add OrbitControls with dynamic limits\r\n    const controls = new OrbitControls(camera, renderer.domElement);\r\n    controls.enableDamping = true;\r\n    controls.dampingFactor = 0.05;\r\n    controls.screenSpacePanning = false;\r\n    controls.minDistance = 2;\r\n    controls.maxDistance = 20;\r\n    controls.maxPolarAngle = Math.PI / 2.1;\r\n    controls.minPolarAngle = Math.PI / 6;\r\n    controls.enableZoom = true;\r\n    controls.zoomSpeed = 0.5;\r\n    controls.rotateSpeed = 0.5;\r\n\r\n    // Set initial camera position\r\n    camera.position.copy(initialCamera.position);\r\n    controls.target.copy(initialCamera.target);\r\n    controls.update();\r\n\r\n    // Load assets with improved error handling\r\n    Promise.all([loadTextures(), loadModels()]).then(() => {\r\n      // Update ground material with loaded textures\r\n      if (texturesRef.current?.grass?.diffuse) {\r\n        ground.material.map = texturesRef.current.grass.diffuse;\r\n        ground.material.needsUpdate = true;\r\n      }\r\n\r\n      // Add drone to scene with improved fallback handling\r\n      if (modelsRef.current.drone) {\r\n        const drone = modelsRef.current.drone.clone();\r\n        drone.scale.set(0.5, 0.5, 0.5);\r\n        drone.traverse((child) => {\r\n          if (child.isMesh) {\r\n            child.castShadow = true;\r\n            child.material.envMapIntensity = 1;\r\n          }\r\n        });\r\n        scene.add(drone);\r\n        droneRef.current = drone;\r\n      } else {\r\n        console.log('Using fallback drone model');\r\n        const fallbackDrone = createFallbackDrone();\r\n        scene.add(fallbackDrone);\r\n        droneRef.current = fallbackDrone;\r\n      }\r\n    }).catch(error => {\r\n      console.error('Error loading assets:', error);\r\n      const fallbackDrone = createFallbackDrone();\r\n      scene.add(fallbackDrone);\r\n      droneRef.current = fallbackDrone;\r\n    });\r\n\r\n    // Animation loop with improved timing\r\n    let lastTime = 0;\r\n    const animate = (time) => {\r\n      requestAnimationFrame(animate);\r\n\r\n      const delta = (time - lastTime) / 1000;\r\n      lastTime = time;\r\n\r\n      // Update drone position and animation with smooth interpolation\r\n      if (droneRef.current) {\r\n        const targetPos = gameToScene(gameState.dronePosition.x, gameState.dronePosition.y);\r\n        droneRef.current.position.x = THREE.MathUtils.lerp(\r\n          droneRef.current.position.x,\r\n          targetPos.x,\r\n          5 * delta\r\n        );\r\n        droneRef.current.position.z = THREE.MathUtils.lerp(\r\n          droneRef.current.position.z,\r\n          targetPos.z,\r\n          5 * delta\r\n        );\r\n        droneRef.current.position.y = 0.5 + Math.sin(time * 0.002) * 0.1;\r\n        \r\n        // Rotate propellers if using fallback model\r\n        if (!modelsRef.current.drone) {\r\n          droneRef.current.children.forEach((child, index) => {\r\n            if (index > 4) { // Skip body and arms\r\n              child.rotation.y += 15 * delta;\r\n            }\r\n          });\r\n        }\r\n      }\r\n\r\n      // Update controls and render\r\n      controls.update();\r\n      composer.render();\r\n    };\r\n    animate(0);\r\n\r\n    // Cleanup with improved resource disposal\r\n    return () => {\r\n      renderer.dispose();\r\n      composer.dispose();\r\n      controls.dispose();\r\n      envMap.dispose();\r\n      \r\n      Object.values(texturesRef.current).forEach(textures => {\r\n        Object.values(textures).forEach(texture => texture.dispose());\r\n      });\r\n      \r\n      scene.traverse((object) => {\r\n        if (object.geometry) object.geometry.dispose();\r\n        if (object.material) {\r\n          if (Array.isArray(object.material)) {\r\n            object.material.forEach(material => material.dispose());\r\n          } else {\r\n            object.material.dispose();\r\n          }\r\n        }\r\n      });\r\n    };\r\n  }, []);\r\n\r\n  // Update drone position when gameState changes\r\n  useEffect(() => {\r\n    if (droneRef.current && gameState.dronePosition) {\r\n      const targetPos = gameToScene(gameState.dronePosition.x, gameState.dronePosition.y);\r\n      droneRef.current.position.x = targetPos.x;\r\n      droneRef.current.position.z = targetPos.z;\r\n    }\r\n  }, [gameState.dronePosition]);\r\n\r\n  // Update tiles when gameState changes\r\n  useEffect(() => {\r\n    updateTiles();\r\n  }, [gameState.land]);\r\n\r\n  // Add new effect to handle camera position updates when grid size changes\r\n  useEffect(() => {\r\n    if (!canvasRef.current) return;\r\n    \r\n    const camera = new THREE.PerspectiveCamera(60, 1, 0.1, 1000);\r\n    const newCamera = calculateCameraPosition();\r\n    \r\n    // Get the orbit controls instance\r\n    const canvas = canvasRef.current;\r\n    const controls = canvas.__controls;\r\n    \r\n    if (controls) {\r\n      // Smoothly animate to new position\r\n      const duration = 1000; // 1 second\r\n      const startPosition = controls.object.position.clone();\r\n      const startTarget = controls.target.clone();\r\n      const startTime = Date.now();\r\n\r\n      const animate = () => {\r\n        const elapsed = Date.now() - startTime;\r\n        const progress = Math.min(elapsed / duration, 1);\r\n        \r\n        // Smooth easing\r\n        const t = progress < 0.5 \r\n          ? 4 * progress * progress * progress \r\n          : 1 - Math.pow(-2 * progress + 2, 3) / 2;\r\n\r\n        // Update camera position\r\n        controls.object.position.lerpVectors(startPosition, newCamera.position, t);\r\n        controls.target.lerpVectors(startTarget, newCamera.target, t);\r\n        controls.update();\r\n\r\n        if (progress < 1) {\r\n          requestAnimationFrame(animate);\r\n        }\r\n      };\r\n\r\n      animate();\r\n    }\r\n  }, [gameState.land.length]);\r\n\r\n  return (\r\n    <div style={{ \r\n      width: '600px', \r\n      height: '600px', \r\n      backgroundColor: '#000000',\r\n      margin: '0 auto',\r\n      borderRadius: '8px',\r\n      overflow: 'hidden',\r\n      boxShadow: '0 4px 6px rgba(0, 0, 0, 0.1)'\r\n    }}>\r\n      <canvas \r\n        ref={canvasRef}\r\n        style={{\r\n          width: '100%',\r\n          height: '100%'\r\n        }}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Game3D; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}