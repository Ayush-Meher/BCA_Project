{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\SPIDER\\\\Downloads\\\\Project\\\\Demo GPT\\\\Demo 1\\\\src\\\\components\\\\JavaScriptConsole.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport styled from 'styled-components';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ConsoleContainer = styled.div`\n  background-color: #1e1e1e;\n  border-radius: 5px;\n  padding: 10px;\n  margin: 10px;\n  height: 300px;\n  display: flex;\n  flex-direction: column;\n`;\n_c = ConsoleContainer;\nconst ConsoleOutput = styled.div`\n  color: #ffffff;\n  font-family: monospace;\n  flex-grow: 1;\n  overflow-y: auto;\n  padding: 10px;\n  white-space: pre-wrap;\n  background-color: #2d2d2d;\n  margin-bottom: 10px;\n  border-radius: 3px;\n`;\n_c2 = ConsoleOutput;\nconst ConsoleInput = styled.textarea`\n  background-color: #2d2d2d;\n  color: #ffffff;\n  font-family: monospace;\n  border: 1px solid #3f3f3f;\n  border-radius: 3px;\n  padding: 5px;\n  resize: none;\n  height: 60px;\n`;\n_c3 = ConsoleInput;\nconst RunButton = styled.button`\n  background-color: #4CAF50;\n  color: white;\n  padding: 8px 15px;\n  border: none;\n  border-radius: 3px;\n  margin-top: 5px;\n  cursor: pointer;\n  &:hover {\n    background-color: #45a049;\n  }\n`;\nconst PlayPauseButton = styled.button`\n  background-color: #4CAF50;\n  color: white;\n  padding: 8px 15px;\n  border: none;\n  border-radius: 3px;\n  margin-top: 5px;\n  cursor: pointer;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 40px;\n  height: 40px;\n  \n  &:hover {\n    background-color: #45a049;\n  }\n  \n  &:disabled {\n    background-color: #95a5a6;\n    cursor: not-allowed;\n  }\n`;\n_c4 = PlayPauseButton;\nconst PlayIcon = styled.span`\n  display: inline-block;\n  width: 0;\n  height: 0;\n  border-style: solid;\n  border-width: 10px 0 10px 15px;\n  border-color: transparent transparent transparent white;\n  margin-left: 3px;\n`;\n_c5 = PlayIcon;\nconst PauseIcon = styled.span`\n  display: flex;\n  gap: 3px;\n  \n  &::before,\n  &::after {\n    content: '';\n    width: 5px;\n    height: 20px;\n    background-color: white;\n  }\n`;\n\n// Store console states globally\n_c6 = PauseIcon;\nconst consoleStates = {};\nfunction JavaScriptConsole({\n  gameState,\n  setGameState,\n  consoleId\n}) {\n  _s();\n  const [input, setInput] = useState('');\n  const [output, setOutput] = useState('Welcome to the JavaScript Console!\\n\\n' + 'Available commands:\\n' + '- farm.plow(x, y) - Plow a tile at coordinates (x,y)\\n' + '- farm.plant(x, y, \"cropType\") - Plant a crop. Types: \"wheat\", \"corn\", \"potato\"\\n' + '- farm.harvest(x, y) - Harvest a crop at coordinates\\n' + '- farm.move_drone(x, y) - Move drone to coordinates\\n' + '- farm.drone_plow() - Plow tile at drone location\\n' + '- farm.drone_plant(\"cropType\") - Plant crop at drone location\\n' + '- farm.drone_harvest() - Harvest crop at drone location\\n' + '- farm.drone_scan() - Get info about tile at drone location\\n' + '- farm.get_drone_position() - Get current drone coordinates\\n\\n' + 'Type your JavaScript code and press Play or Ctrl+Enter\\n');\n  const [farm, setFarm] = useState(null);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [currentLine, setCurrentLine] = useState(0);\n  const codeLines = useRef([]);\n  const executionInterval = useRef(null);\n\n  // Initialize or restore console state\n  useEffect(() => {\n    if (!consoleStates[consoleId]) {\n      consoleStates[consoleId] = {\n        input: '',\n        output: output,\n        farm: null,\n        isPlaying: false,\n        currentLine: 0\n      };\n    } else {\n      setInput(consoleStates[consoleId].input);\n      setOutput(consoleStates[consoleId].output);\n      setFarm(consoleStates[consoleId].farm);\n      setIsPlaying(consoleStates[consoleId].isPlaying);\n      setCurrentLine(consoleStates[consoleId].currentLine);\n    }\n\n    // Initialize farm when component mounts\n    const newFarm = {\n      money: gameState.money,\n      inventory: gameState.inventory,\n      land: gameState.land,\n      size: Math.sqrt(gameState.land.length),\n      maxSize: 5,\n      drone: gameState.drone,\n      expand: function () {\n        if (this.size >= this.maxSize) {\n          this.print(`Farm is already at maximum size (${this.maxSize}x${this.maxSize})`);\n          return false;\n        }\n        const newSize = this.size + 1;\n        const newLand = Array(newSize * newSize).fill().map((_, index) => {\n          if (index < this.land.length) {\n            return this.land[index];\n          }\n          return {\n            isPlowed: false,\n            hasCrop: false,\n            cropType: null,\n            cropState: null,\n            plantedTime: null\n          };\n        });\n        setGameState(prev => ({\n          ...prev,\n          land: newLand\n        }));\n        this.land = newLand;\n        this.size = newSize;\n        this.print(`Farm expanded to ${newSize}x${newSize}`);\n        return true;\n      },\n      plow: function (x, y) {\n        if (x >= 0 && x < this.size && y >= 0 && y < this.size) {\n          const newLand = [...this.land];\n          newLand[y * this.size + x] = {\n            ...newLand[y * this.size + x],\n            isPlowed: true\n          };\n          setGameState(prev => ({\n            ...prev,\n            land: newLand\n          }));\n          this.land = newLand;\n          this.print(`Successfully plowed tile at (${x}, ${y})`);\n          return true;\n        }\n        this.print(`Failed to plow tile at (${x}, ${y}) - coordinates out of bounds`);\n        return false;\n      },\n      plant: function (x, y, cropType) {\n        if (x >= 0 && x < this.size && y >= 0 && y < this.size) {\n          const index = y * this.size + x;\n          if (this.land[index].isPlowed && !this.land[index].hasCrop) {\n            const newLand = [...this.land];\n            newLand[index] = {\n              ...newLand[index],\n              hasCrop: true,\n              cropType: cropType,\n              cropState: 'growing',\n              plantedTime: Date.now()\n            };\n            setGameState(prev => ({\n              ...prev,\n              land: newLand\n            }));\n            this.land = newLand;\n            this.print(`Successfully planted ${cropType} at (${x}, ${y})`);\n            return true;\n          }\n        }\n        this.print(`Failed to plant ${cropType} at (${x}, ${y})`);\n        return false;\n      },\n      harvest: function (x, y) {\n        if (x >= 0 && x < this.size && y >= 0 && y < this.size) {\n          const index = y * this.size + x;\n          if (this.land[index].hasCrop && this.land[index].cropState === 'ready') {\n            const cropType = this.land[index].cropType;\n            const newLand = [...this.land];\n            newLand[index] = {\n              ...newLand[index],\n              hasCrop: false,\n              cropType: null,\n              cropState: null,\n              plantedTime: null\n            };\n            const newInventory = {\n              ...this.inventory,\n              [cropType]: (this.inventory[cropType] || 0) + 1\n            };\n            setGameState(prev => ({\n              ...prev,\n              land: newLand,\n              inventory: newInventory\n            }));\n            this.land = newLand;\n            this.inventory = newInventory;\n            this.print(`Successfully harvested crop at (${x}, ${y})`);\n            return true;\n          }\n        }\n        this.print(`Failed to harvest crop at (${x}, ${y})`);\n        return false;\n      },\n      isCropReady: function (x, y) {\n        if (x >= 0 && x < this.size && y >= 0 && y < this.size) {\n          const tile = this.land[y * this.size + x];\n          return tile.hasCrop && tile.cropState === 'ready';\n        }\n        return false;\n      },\n      sellCrop: function (cropType, amount) {\n        const available = this.inventory[cropType] || 0;\n        if (available >= amount) {\n          const prices = {\n            wheat: 20,\n            corn: 30,\n            potato: 40\n          };\n          const price = prices[cropType] || 0;\n          const newMoney = this.money + price * amount;\n          const newInventory = {\n            ...this.inventory,\n            [cropType]: this.inventory[cropType] - amount\n          };\n          setGameState(prev => ({\n            ...prev,\n            money: newMoney,\n            inventory: newInventory\n          }));\n          this.money = newMoney;\n          this.inventory = newInventory;\n          this.print(`Successfully sold ${amount} ${cropType}`);\n          return true;\n        }\n        this.print(`Failed to sell ${amount} ${cropType}`);\n        return false;\n      },\n      buySeeds: function (cropType, amount) {\n        const prices = {\n          wheat: 10,\n          corn: 15,\n          potato: 20\n        };\n        const price = (prices[cropType] || 0) * amount;\n        if (this.money >= price) {\n          const newMoney = this.money - price;\n          const newInventory = {\n            ...this.inventory,\n            [`${cropType}_seeds`]: (this.inventory[`${cropType}_seeds`] || 0) + amount\n          };\n          setGameState(prev => ({\n            ...prev,\n            money: newMoney,\n            inventory: newInventory\n          }));\n          this.money = newMoney;\n          this.inventory = newInventory;\n          this.print(`Successfully bought ${amount} ${cropType} seeds`);\n          return true;\n        }\n        this.print(`Failed to buy ${amount} ${cropType} seeds`);\n        return false;\n      },\n      print: function (text) {\n        setOutput(prev => prev + text + '\\n');\n      },\n      toString: function () {\n        return `Farm(money=$${this.money}, size=${this.size}x${this.size}, inventory=${JSON.stringify(this.inventory)})`;\n      },\n      move_drone: function (x, y) {\n        if (0 <= x && x < this.size && 0 <= y && y < this.size) {\n          setGameState(prev => ({\n            ...prev,\n            dronePosition: {\n              x,\n              y\n            },\n            drone: {\n              x,\n              y\n            }\n          }));\n          this.drone = {\n            x,\n            y\n          };\n          this.print(`Moved drone to (${x}, ${y})`);\n          return true;\n        }\n        this.print(\"Invalid coordinates\");\n        return false;\n      },\n      drone_plow: function () {\n        return this.plow(this.drone.x, this.drone.y);\n      },\n      drone_plant: function (cropType) {\n        return this.plant(this.drone.x, this.drone.y, cropType);\n      },\n      drone_harvest: function () {\n        return this.harvest(this.drone.x, this.drone.y);\n      },\n      drone_scan: function () {\n        const x = this.drone.x;\n        const y = this.drone.y;\n        const index = y * this.size + x;\n        const tile = this.land[index];\n        let status = \"empty\";\n        if (tile.isPlowed) {\n          status = \"plowed\";\n        }\n        if (tile.hasCrop) {\n          status = `${tile.cropState} ${tile.cropType}`;\n        }\n        this.print(`Scan results at (${x}, ${y}): ${status}`);\n        return status;\n      },\n      get_drone_position: function () {\n        return {\n          x: this.drone.x,\n          y: this.drone.y\n        };\n      }\n    };\n    setFarm(newFarm);\n    setOutput(prev => prev + `Farm initialized: ${newFarm.toString()}\\n`);\n  }, [gameState, setGameState, consoleId]);\n\n  // Save console state when it changes\n  useEffect(() => {\n    consoleStates[consoleId] = {\n      input,\n      output,\n      farm,\n      isPlaying,\n      currentLine\n    };\n  }, [input, output, farm, isPlaying, currentLine, consoleId]);\n  const handleKeyDown = e => {\n    if (e.key === 'Enter' && e.ctrlKey) {\n      e.preventDefault();\n      togglePlayPause();\n    }\n  };\n  const executeLine = line => {\n    if (!farm) return;\n    try {\n      setOutput(prev => prev + '\\n>>> ' + line + '\\n');\n\n      // Create a function that returns a Promise to handle async operations\n      const executeCode = new Function('farm', `\n        return new Promise((resolve, reject) => {\n          try {\n            const result = eval(${JSON.stringify(line)});\n            if (result instanceof Promise) {\n              result.then(resolve).catch(reject);\n            } else {\n              resolve(result);\n            }\n          } catch (error) {\n            farm.print('Error: ' + error.message);\n            reject(error);\n          }\n        });\n      `);\n      return executeCode(farm);\n    } catch (error) {\n      setOutput(prev => prev + 'Error: ' + error.message + '\\n');\n      return Promise.reject(error);\n    }\n  };\n  const togglePlayPause = async () => {\n    if (!input.trim() || !farm) return;\n    if (!isPlaying) {\n      // Start playing\n      setIsPlaying(true);\n      try {\n        // Execute the entire code at once\n        const result = await executeLine(input);\n        if (result !== undefined) {\n          setOutput(prev => prev + result + '\\n');\n        }\n      } catch (error) {\n        console.error('Execution error:', error);\n      } finally {\n        setIsPlaying(false);\n      }\n    }\n  };\n\n  // Cleanup interval on unmount\n  useEffect(() => {\n    return () => {\n      if (executionInterval.current) {\n        clearInterval(executionInterval.current);\n      }\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(ConsoleContainer, {\n    children: [/*#__PURE__*/_jsxDEV(ConsoleOutput, {\n      children: output\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 433,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ConsoleInput, {\n      value: input,\n      onChange: e => setInput(e.target.value),\n      onKeyDown: handleKeyDown,\n      placeholder: \"Enter JavaScript code here...\",\n      disabled: !farm || isPlaying\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 436,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(PlayPauseButton, {\n      onClick: togglePlayPause,\n      disabled: !farm || !input.trim(),\n      children: isPlaying ? /*#__PURE__*/_jsxDEV(PauseIcon, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 447,\n        columnNumber: 22\n      }, this) : /*#__PURE__*/_jsxDEV(PlayIcon, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 447,\n        columnNumber: 38\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 443,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 432,\n    columnNumber: 5\n  }, this);\n}\n_s(JavaScriptConsole, \"dqQIfk3s/+jWQ7gMpS/lym3sN5w=\");\n_c7 = JavaScriptConsole;\nexport default JavaScriptConsole;\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7;\n$RefreshReg$(_c, \"ConsoleContainer\");\n$RefreshReg$(_c2, \"ConsoleOutput\");\n$RefreshReg$(_c3, \"ConsoleInput\");\n$RefreshReg$(_c4, \"PlayPauseButton\");\n$RefreshReg$(_c5, \"PlayIcon\");\n$RefreshReg$(_c6, \"PauseIcon\");\n$RefreshReg$(_c7, \"JavaScriptConsole\");","map":{"version":3,"names":["React","useState","useEffect","useRef","styled","jsxDEV","_jsxDEV","ConsoleContainer","div","_c","ConsoleOutput","_c2","ConsoleInput","textarea","_c3","RunButton","button","PlayPauseButton","_c4","PlayIcon","span","_c5","PauseIcon","_c6","consoleStates","JavaScriptConsole","gameState","setGameState","consoleId","_s","input","setInput","output","setOutput","farm","setFarm","isPlaying","setIsPlaying","currentLine","setCurrentLine","codeLines","executionInterval","newFarm","money","inventory","land","size","Math","sqrt","length","maxSize","drone","expand","print","newSize","newLand","Array","fill","map","_","index","isPlowed","hasCrop","cropType","cropState","plantedTime","prev","plow","x","y","plant","Date","now","harvest","newInventory","isCropReady","tile","sellCrop","amount","available","prices","wheat","corn","potato","price","newMoney","buySeeds","text","toString","JSON","stringify","move_drone","dronePosition","drone_plow","drone_plant","drone_harvest","drone_scan","status","get_drone_position","handleKeyDown","e","key","ctrlKey","preventDefault","togglePlayPause","executeLine","line","executeCode","Function","error","message","Promise","reject","trim","result","undefined","console","current","clearInterval","children","fileName","_jsxFileName","lineNumber","columnNumber","value","onChange","target","onKeyDown","placeholder","disabled","onClick","_c7","$RefreshReg$"],"sources":["C:/Users/SPIDER/Downloads/Project/Demo GPT/Demo 1/src/components/JavaScriptConsole.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst ConsoleContainer = styled.div`\r\n  background-color: #1e1e1e;\r\n  border-radius: 5px;\r\n  padding: 10px;\r\n  margin: 10px;\r\n  height: 300px;\r\n  display: flex;\r\n  flex-direction: column;\r\n`;\r\n\r\nconst ConsoleOutput = styled.div`\r\n  color: #ffffff;\r\n  font-family: monospace;\r\n  flex-grow: 1;\r\n  overflow-y: auto;\r\n  padding: 10px;\r\n  white-space: pre-wrap;\r\n  background-color: #2d2d2d;\r\n  margin-bottom: 10px;\r\n  border-radius: 3px;\r\n`;\r\n\r\nconst ConsoleInput = styled.textarea`\r\n  background-color: #2d2d2d;\r\n  color: #ffffff;\r\n  font-family: monospace;\r\n  border: 1px solid #3f3f3f;\r\n  border-radius: 3px;\r\n  padding: 5px;\r\n  resize: none;\r\n  height: 60px;\r\n`;\r\n\r\nconst RunButton = styled.button`\r\n  background-color: #4CAF50;\r\n  color: white;\r\n  padding: 8px 15px;\r\n  border: none;\r\n  border-radius: 3px;\r\n  margin-top: 5px;\r\n  cursor: pointer;\r\n  &:hover {\r\n    background-color: #45a049;\r\n  }\r\n`;\r\n\r\nconst PlayPauseButton = styled.button`\r\n  background-color: #4CAF50;\r\n  color: white;\r\n  padding: 8px 15px;\r\n  border: none;\r\n  border-radius: 3px;\r\n  margin-top: 5px;\r\n  cursor: pointer;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  width: 40px;\r\n  height: 40px;\r\n  \r\n  &:hover {\r\n    background-color: #45a049;\r\n  }\r\n  \r\n  &:disabled {\r\n    background-color: #95a5a6;\r\n    cursor: not-allowed;\r\n  }\r\n`;\r\n\r\nconst PlayIcon = styled.span`\r\n  display: inline-block;\r\n  width: 0;\r\n  height: 0;\r\n  border-style: solid;\r\n  border-width: 10px 0 10px 15px;\r\n  border-color: transparent transparent transparent white;\r\n  margin-left: 3px;\r\n`;\r\n\r\nconst PauseIcon = styled.span`\r\n  display: flex;\r\n  gap: 3px;\r\n  \r\n  &::before,\r\n  &::after {\r\n    content: '';\r\n    width: 5px;\r\n    height: 20px;\r\n    background-color: white;\r\n  }\r\n`;\r\n\r\n// Store console states globally\r\nconst consoleStates = {};\r\n\r\nfunction JavaScriptConsole({ gameState, setGameState, consoleId }) {\r\n  const [input, setInput] = useState('');\r\n  const [output, setOutput] = useState(\r\n    'Welcome to the JavaScript Console!\\n\\n' +\r\n    'Available commands:\\n' +\r\n    '- farm.plow(x, y) - Plow a tile at coordinates (x,y)\\n' +\r\n    '- farm.plant(x, y, \"cropType\") - Plant a crop. Types: \"wheat\", \"corn\", \"potato\"\\n' +\r\n    '- farm.harvest(x, y) - Harvest a crop at coordinates\\n' +\r\n    '- farm.move_drone(x, y) - Move drone to coordinates\\n' +\r\n    '- farm.drone_plow() - Plow tile at drone location\\n' +\r\n    '- farm.drone_plant(\"cropType\") - Plant crop at drone location\\n' +\r\n    '- farm.drone_harvest() - Harvest crop at drone location\\n' +\r\n    '- farm.drone_scan() - Get info about tile at drone location\\n' +\r\n    '- farm.get_drone_position() - Get current drone coordinates\\n\\n' +\r\n    'Type your JavaScript code and press Play or Ctrl+Enter\\n'\r\n  );\r\n  const [farm, setFarm] = useState(null);\r\n  const [isPlaying, setIsPlaying] = useState(false);\r\n  const [currentLine, setCurrentLine] = useState(0);\r\n  const codeLines = useRef([]);\r\n  const executionInterval = useRef(null);\r\n\r\n  // Initialize or restore console state\r\n  useEffect(() => {\r\n    if (!consoleStates[consoleId]) {\r\n      consoleStates[consoleId] = {\r\n        input: '',\r\n        output: output,\r\n        farm: null,\r\n        isPlaying: false,\r\n        currentLine: 0\r\n      };\r\n    } else {\r\n      setInput(consoleStates[consoleId].input);\r\n      setOutput(consoleStates[consoleId].output);\r\n      setFarm(consoleStates[consoleId].farm);\r\n      setIsPlaying(consoleStates[consoleId].isPlaying);\r\n      setCurrentLine(consoleStates[consoleId].currentLine);\r\n    }\r\n\r\n    // Initialize farm when component mounts\r\n    const newFarm = {\r\n      money: gameState.money,\r\n      inventory: gameState.inventory,\r\n      land: gameState.land,\r\n      size: Math.sqrt(gameState.land.length),\r\n      maxSize: 5,\r\n      drone: gameState.drone,\r\n      \r\n      expand: function() {\r\n        if (this.size >= this.maxSize) {\r\n          this.print(`Farm is already at maximum size (${this.maxSize}x${this.maxSize})`);\r\n          return false;\r\n        }\r\n\r\n        const newSize = this.size + 1;\r\n        const newLand = Array(newSize * newSize).fill().map((_, index) => {\r\n          if (index < this.land.length) {\r\n            return this.land[index];\r\n          }\r\n          return {\r\n            isPlowed: false,\r\n            hasCrop: false,\r\n            cropType: null,\r\n            cropState: null,\r\n            plantedTime: null\r\n          };\r\n        });\r\n\r\n        setGameState(prev => ({ ...prev, land: newLand }));\r\n        this.land = newLand;\r\n        this.size = newSize;\r\n        this.print(`Farm expanded to ${newSize}x${newSize}`);\r\n        return true;\r\n      },\r\n      \r\n      plow: function(x, y) {\r\n        if (x >= 0 && x < this.size && y >= 0 && y < this.size) {\r\n          const newLand = [...this.land];\r\n          newLand[y * this.size + x] = { ...newLand[y * this.size + x], isPlowed: true };\r\n          setGameState(prev => ({ ...prev, land: newLand }));\r\n          this.land = newLand;\r\n          this.print(`Successfully plowed tile at (${x}, ${y})`);\r\n          return true;\r\n        }\r\n        this.print(`Failed to plow tile at (${x}, ${y}) - coordinates out of bounds`);\r\n        return false;\r\n      },\r\n      \r\n      plant: function(x, y, cropType) {\r\n        if (x >= 0 && x < this.size && y >= 0 && y < this.size) {\r\n          const index = y * this.size + x;\r\n          if (this.land[index].isPlowed && !this.land[index].hasCrop) {\r\n            const newLand = [...this.land];\r\n            newLand[index] = {\r\n              ...newLand[index],\r\n              hasCrop: true,\r\n              cropType: cropType,\r\n              cropState: 'growing',\r\n              plantedTime: Date.now()\r\n            };\r\n            setGameState(prev => ({ ...prev, land: newLand }));\r\n            this.land = newLand;\r\n            this.print(`Successfully planted ${cropType} at (${x}, ${y})`);\r\n            return true;\r\n          }\r\n        }\r\n        this.print(`Failed to plant ${cropType} at (${x}, ${y})`);\r\n        return false;\r\n      },\r\n      \r\n      harvest: function(x, y) {\r\n        if (x >= 0 && x < this.size && y >= 0 && y < this.size) {\r\n          const index = y * this.size + x;\r\n          if (this.land[index].hasCrop && this.land[index].cropState === 'ready') {\r\n            const cropType = this.land[index].cropType;\r\n            const newLand = [...this.land];\r\n            newLand[index] = {\r\n              ...newLand[index],\r\n              hasCrop: false,\r\n              cropType: null,\r\n              cropState: null,\r\n              plantedTime: null\r\n            };\r\n            const newInventory = { ...this.inventory, [cropType]: (this.inventory[cropType] || 0) + 1 };\r\n            setGameState(prev => ({\r\n              ...prev,\r\n              land: newLand,\r\n              inventory: newInventory\r\n            }));\r\n            this.land = newLand;\r\n            this.inventory = newInventory;\r\n            this.print(`Successfully harvested crop at (${x}, ${y})`);\r\n            return true;\r\n          }\r\n        }\r\n        this.print(`Failed to harvest crop at (${x}, ${y})`);\r\n        return false;\r\n      },\r\n      \r\n      isCropReady: function(x, y) {\r\n        if (x >= 0 && x < this.size && y >= 0 && y < this.size) {\r\n          const tile = this.land[y * this.size + x];\r\n          return tile.hasCrop && tile.cropState === 'ready';\r\n        }\r\n        return false;\r\n      },\r\n      \r\n      sellCrop: function(cropType, amount) {\r\n        const available = this.inventory[cropType] || 0;\r\n        if (available >= amount) {\r\n          const prices = { wheat: 20, corn: 30, potato: 40 };\r\n          const price = prices[cropType] || 0;\r\n          const newMoney = this.money + (price * amount);\r\n          const newInventory = { ...this.inventory, [cropType]: this.inventory[cropType] - amount };\r\n          setGameState(prev => ({\r\n            ...prev,\r\n            money: newMoney,\r\n            inventory: newInventory\r\n          }));\r\n          this.money = newMoney;\r\n          this.inventory = newInventory;\r\n          this.print(`Successfully sold ${amount} ${cropType}`);\r\n          return true;\r\n        }\r\n        this.print(`Failed to sell ${amount} ${cropType}`);\r\n        return false;\r\n      },\r\n      \r\n      buySeeds: function(cropType, amount) {\r\n        const prices = { wheat: 10, corn: 15, potato: 20 };\r\n        const price = (prices[cropType] || 0) * amount;\r\n        if (this.money >= price) {\r\n          const newMoney = this.money - price;\r\n          const newInventory = {\r\n            ...this.inventory,\r\n            [`${cropType}_seeds`]: (this.inventory[`${cropType}_seeds`] || 0) + amount\r\n          };\r\n          setGameState(prev => ({\r\n            ...prev,\r\n            money: newMoney,\r\n            inventory: newInventory\r\n          }));\r\n          this.money = newMoney;\r\n          this.inventory = newInventory;\r\n          this.print(`Successfully bought ${amount} ${cropType} seeds`);\r\n          return true;\r\n        }\r\n        this.print(`Failed to buy ${amount} ${cropType} seeds`);\r\n        return false;\r\n      },\r\n      \r\n      print: function(text) {\r\n        setOutput(prev => prev + text + '\\n');\r\n      },\r\n      \r\n      toString: function() {\r\n        return `Farm(money=$${this.money}, size=${this.size}x${this.size}, inventory=${JSON.stringify(this.inventory)})`;\r\n      },\r\n\r\n      move_drone: function(x, y) {\r\n        if (0 <= x && x < this.size && 0 <= y && y < this.size) {\r\n          setGameState(prev => ({\r\n            ...prev,\r\n            dronePosition: { x, y },\r\n            drone: { x, y }\r\n          }));\r\n          this.drone = { x, y };\r\n          this.print(`Moved drone to (${x}, ${y})`);\r\n          return true;\r\n        }\r\n        this.print(\"Invalid coordinates\");\r\n        return false;\r\n      },\r\n\r\n      drone_plow: function() {\r\n        return this.plow(this.drone.x, this.drone.y);\r\n      },\r\n\r\n      drone_plant: function(cropType) {\r\n        return this.plant(this.drone.x, this.drone.y, cropType);\r\n      },\r\n\r\n      drone_harvest: function() {\r\n        return this.harvest(this.drone.x, this.drone.y);\r\n      },\r\n\r\n      drone_scan: function() {\r\n        const x = this.drone.x;\r\n        const y = this.drone.y;\r\n        const index = y * this.size + x;\r\n        const tile = this.land[index];\r\n        \r\n        let status = \"empty\";\r\n        if (tile.isPlowed) {\r\n          status = \"plowed\";\r\n        }\r\n        if (tile.hasCrop) {\r\n          status = `${tile.cropState} ${tile.cropType}`;\r\n        }\r\n        \r\n        this.print(`Scan results at (${x}, ${y}): ${status}`);\r\n        return status;\r\n      },\r\n\r\n      get_drone_position: function() {\r\n        return { x: this.drone.x, y: this.drone.y };\r\n      }\r\n    };\r\n    \r\n    setFarm(newFarm);\r\n    setOutput(prev => prev + `Farm initialized: ${newFarm.toString()}\\n`);\r\n  }, [gameState, setGameState, consoleId]);\r\n\r\n  // Save console state when it changes\r\n  useEffect(() => {\r\n    consoleStates[consoleId] = {\r\n      input,\r\n      output,\r\n      farm,\r\n      isPlaying,\r\n      currentLine\r\n    };\r\n  }, [input, output, farm, isPlaying, currentLine, consoleId]);\r\n\r\n  const handleKeyDown = (e) => {\r\n    if (e.key === 'Enter' && e.ctrlKey) {\r\n      e.preventDefault();\r\n      togglePlayPause();\r\n    }\r\n  };\r\n\r\n  const executeLine = (line) => {\r\n    if (!farm) return;\r\n\r\n    try {\r\n      setOutput(prev => prev + '\\n>>> ' + line + '\\n');\r\n\r\n      // Create a function that returns a Promise to handle async operations\r\n      const executeCode = new Function('farm', `\r\n        return new Promise((resolve, reject) => {\r\n          try {\r\n            const result = eval(${JSON.stringify(line)});\r\n            if (result instanceof Promise) {\r\n              result.then(resolve).catch(reject);\r\n            } else {\r\n              resolve(result);\r\n            }\r\n          } catch (error) {\r\n            farm.print('Error: ' + error.message);\r\n            reject(error);\r\n          }\r\n        });\r\n      `);\r\n\r\n      return executeCode(farm);\r\n    } catch (error) {\r\n      setOutput(prev => prev + 'Error: ' + error.message + '\\n');\r\n      return Promise.reject(error);\r\n    }\r\n  };\r\n\r\n  const togglePlayPause = async () => {\r\n    if (!input.trim() || !farm) return;\r\n\r\n    if (!isPlaying) {\r\n      // Start playing\r\n      setIsPlaying(true);\r\n      try {\r\n        // Execute the entire code at once\r\n        const result = await executeLine(input);\r\n        if (result !== undefined) {\r\n          setOutput(prev => prev + result + '\\n');\r\n        }\r\n      } catch (error) {\r\n        console.error('Execution error:', error);\r\n      } finally {\r\n        setIsPlaying(false);\r\n      }\r\n    }\r\n  };\r\n\r\n  // Cleanup interval on unmount\r\n  useEffect(() => {\r\n    return () => {\r\n      if (executionInterval.current) {\r\n        clearInterval(executionInterval.current);\r\n      }\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <ConsoleContainer>\r\n      <ConsoleOutput>\r\n        {output}\r\n      </ConsoleOutput>\r\n      <ConsoleInput\r\n        value={input}\r\n        onChange={(e) => setInput(e.target.value)}\r\n        onKeyDown={handleKeyDown}\r\n        placeholder=\"Enter JavaScript code here...\"\r\n        disabled={!farm || isPlaying}\r\n      />\r\n      <PlayPauseButton \r\n        onClick={togglePlayPause} \r\n        disabled={!farm || !input.trim()}\r\n      >\r\n        {isPlaying ? <PauseIcon /> : <PlayIcon />}\r\n      </PlayPauseButton>\r\n    </ConsoleContainer>\r\n  );\r\n}\r\n\r\nexport default JavaScriptConsole; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}