{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\SPIDER\\\\Downloads\\\\Project\\\\Demo GPT\\\\Demo 1\\\\src\\\\components\\\\PythonConsole.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport styled from 'styled-components';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ConsoleContainer = styled.div`\n  background-color: #1e1e1e;\n  border-radius: 5px;\n  padding: 10px;\n  margin: 10px;\n  height: 300px;\n  display: flex;\n  flex-direction: column;\n`;\n_c = ConsoleContainer;\nconst ConsoleOutput = styled.div`\n  color: #ffffff;\n  font-family: monospace;\n  flex-grow: 1;\n  overflow-y: auto;\n  padding: 10px;\n  white-space: pre-wrap;\n  background-color: #2d2d2d;\n  margin-bottom: 10px;\n  border-radius: 3px;\n`;\n_c2 = ConsoleOutput;\nconst ConsoleInput = styled.textarea`\n  background-color: #2d2d2d;\n  color: #ffffff;\n  font-family: monospace;\n  border: 1px solid #3f3f3f;\n  border-radius: 3px;\n  padding: 5px;\n  resize: none;\n  height: 60px;\n`;\n_c3 = ConsoleInput;\nconst RunButton = styled.button`\n  background-color: #4CAF50;\n  color: white;\n  padding: 8px 15px;\n  border: none;\n  border-radius: 3px;\n  margin-top: 5px;\n  cursor: pointer;\n  &:hover {\n    background-color: #45a049;\n  }\n`;\n_c4 = RunButton;\nfunction PythonConsole({\n  gameState,\n  setGameState\n}) {\n  _s();\n  const [input, setInput] = useState('');\n  const [output, setOutput] = useState('Welcome to the Python Console!\\nType your Python code and press Run or Ctrl+Enter\\n');\n  const [isInitialized, setIsInitialized] = useState(false);\n  const initScriptRef = useRef(null);\n\n  // Initialize Brython when component mounts\n  useEffect(() => {\n    const initBrython = () => {\n      if (window.brython && !isInitialized) {\n        try {\n          window.brython({\n            debug: 1\n          });\n          setIsInitialized(true);\n        } catch (error) {\n          console.error('Error initializing Brython:', error);\n        }\n      }\n    };\n\n    // Try to initialize immediately if Brython is already loaded\n    initBrython();\n\n    // If not loaded, check periodically\n    const interval = setInterval(initBrython, 100);\n\n    // Stop checking after 5 seconds\n    const timeout = setTimeout(() => {\n      clearInterval(interval);\n      if (!isInitialized) {\n        setOutput(prev => prev + '\\nError: Failed to initialize Python environment\\n');\n      }\n    }, 5000);\n    return () => {\n      clearInterval(interval);\n      clearTimeout(timeout);\n    };\n  }, [isInitialized]);\n\n  // Set up game state and Python environment\n  useEffect(() => {\n    if (!isInitialized) return;\n\n    // Add the farm actions to the window object\n    window.farm_action = (action, ...args) => {\n      console.log('farm_action called:', action, args);\n      try {\n        switch (action) {\n          case 'plow':\n            const [x, y] = args;\n            if (x >= 0 && x < 5 && y >= 0 && y < 5) {\n              const newLand = [...gameState.land];\n              newLand[y * 5 + x] = {\n                ...newLand[y * 5 + x],\n                isPlowed: true\n              };\n              setGameState(prev => ({\n                ...prev,\n                land: newLand\n              }));\n              console.log('Plowed tile:', x, y);\n              return true;\n            }\n            return false;\n          case 'plant':\n            const [plantX, plantY, cropType] = args;\n            if (plantX >= 0 && plantX < 5 && plantY >= 0 && plantY < 5) {\n              const index = plantY * 5 + plantX;\n              if (gameState.land[index].isPlowed && !gameState.land[index].hasCrop) {\n                const newLand = [...gameState.land];\n                newLand[index] = {\n                  ...newLand[index],\n                  hasCrop: true,\n                  cropType: cropType,\n                  cropState: 'growing',\n                  plantedTime: Date.now()\n                };\n                setGameState(prev => ({\n                  ...prev,\n                  land: newLand\n                }));\n                console.log('Planted crop:', cropType, 'at', plantX, plantY);\n                return true;\n              }\n            }\n            return false;\n          case 'harvest':\n            const [harvestX, harvestY] = args;\n            if (harvestX >= 0 && harvestX < 5 && harvestY >= 0 && harvestY < 5) {\n              const index = harvestY * 5 + harvestX;\n              if (gameState.land[index].hasCrop && gameState.land[index].cropState === 'ready') {\n                const cropType = gameState.land[index].cropType;\n                const newLand = [...gameState.land];\n                newLand[index] = {\n                  ...newLand[index],\n                  hasCrop: false,\n                  cropType: null,\n                  cropState: null,\n                  plantedTime: null\n                };\n                setGameState(prev => ({\n                  ...prev,\n                  land: newLand,\n                  inventory: {\n                    ...prev.inventory,\n                    [cropType]: (prev.inventory[cropType] || 0) + 1\n                  }\n                }));\n                console.log('Harvested crop at:', harvestX, harvestY);\n                return true;\n              }\n            }\n            return false;\n          case 'is_crop_ready':\n            const [checkX, checkY] = args;\n            if (checkX >= 0 && checkX < 5 && checkY >= 0 && checkY < 5) {\n              const tile = gameState.land[checkY * 5 + checkX];\n              return tile.hasCrop && tile.cropState === 'ready';\n            }\n            return false;\n          case 'sell_crop':\n            const [sellCropType, amount] = args;\n            const available = gameState.inventory[sellCropType] || 0;\n            if (available >= amount) {\n              const prices = {\n                wheat: 20,\n                corn: 30,\n                potato: 40\n              };\n              const price = prices[sellCropType] || 0;\n              setGameState(prev => ({\n                ...prev,\n                money: prev.money + price * amount,\n                inventory: {\n                  ...prev.inventory,\n                  [sellCropType]: prev.inventory[sellCropType] - amount\n                }\n              }));\n              console.log('Sold crop:', sellCropType, 'amount:', amount);\n              return true;\n            }\n            return false;\n          case 'buy_seeds':\n            const [buyCropType, buyAmount] = args;\n            const prices = {\n              wheat: 10,\n              corn: 15,\n              potato: 20\n            };\n            const price = (prices[buyCropType] || 0) * buyAmount;\n            if (gameState.money >= price) {\n              setGameState(prev => ({\n                ...prev,\n                money: prev.money - price,\n                inventory: {\n                  ...prev.inventory,\n                  [`${buyCropType}_seeds`]: (prev.inventory[`${buyCropType}_seeds`] || 0) + buyAmount\n                }\n              }));\n              console.log('Bought seeds:', buyCropType, 'amount:', buyAmount);\n              return true;\n            }\n            return false;\n          default:\n            return false;\n        }\n      } catch (error) {\n        console.error('Error in farm_action:', error);\n        return false;\n      }\n    };\n\n    // Add the console update function to the window object\n    window.update_console = text => {\n      setOutput(prev => prev + text);\n    };\n\n    // Remove old initialization script if it exists\n    if (initScriptRef.current) {\n      document.body.removeChild(initScriptRef.current);\n    }\n\n    // Create a script element to initialize Python environment\n    const script = document.createElement('script');\n    script.type = 'text/python';\n    script.id = 'python-init';\n    script.innerHTML = /* python */`\nfrom browser import window, console\nimport sys\n\n# Create the Farm class\nclass Farm:\n    def __init__(self):\n        self.money = ${gameState.money}\n        self.inventory = ${JSON.stringify(gameState.inventory)}\n        self.land = ${JSON.stringify(gameState.land)}\n        self.land_size = 5\n    \n    def plow(self, x, y):\n        console.log(\"Calling plow\", x, y)\n        result = window.farm_action(\"plow\", x, y)\n        if result:\n            print(f\"Successfully plowed tile at ({x}, {y})\")\n        else:\n            print(f\"Failed to plow tile at ({x}, {y})\")\n        return result\n    \n    def plant(self, x, y, crop_type):\n        console.log(\"Calling plant\", x, y, crop_type)\n        result = window.farm_action(\"plant\", x, y, crop_type)\n        if result:\n            print(f\"Successfully planted {crop_type} at ({x}, {y})\")\n        else:\n            print(f\"Failed to plant {crop_type} at ({x}, {y})\")\n        return result\n    \n    def harvest(self, x, y):\n        result = window.farm_action(\"harvest\", x, y)\n        if result:\n            print(f\"Successfully harvested crop at ({x}, {y})\")\n        else:\n            print(f\"Failed to harvest crop at ({x}, {y})\")\n        return result\n    \n    def is_crop_ready(self, x, y):\n        return window.farm_action(\"is_crop_ready\", x, y)\n    \n    def sell_crop(self, crop_type, amount):\n        result = window.farm_action(\"sell_crop\", crop_type, amount)\n        if result:\n            print(f\"Successfully sold {amount} {crop_type}\")\n        else:\n            print(f\"Failed to sell {amount} {crop_type}\")\n        return result\n    \n    def buy_seeds(self, crop_type, amount):\n        result = window.farm_action(\"buy_seeds\", crop_type, amount)\n        if result:\n            print(f\"Successfully bought {amount} {crop_type} seeds\")\n        else:\n            print(f\"Failed to buy {amount} {crop_type} seeds\")\n        return result\n    \n    def __str__(self):\n        return \"Farm(money=$%d, inventory=%s)\" % (self.money, str(self.inventory))\n\n# Create global farm instance\nfarm = Farm()\nprint(\"Farm initialized:\", farm)\n\n# Override print function\ndef print(*args, sep=\" \", end=\"\\\\n\"):\n    text = sep.join(str(arg) for arg in args) + end\n    window.update_console(text)\n\n# Make our print function global\n__builtins__.print = print\n`;\n\n    // Add the script to the document\n    document.body.appendChild(script);\n    initScriptRef.current = script;\n\n    // Clean up\n    return () => {\n      if (initScriptRef.current) {\n        document.body.removeChild(initScriptRef.current);\n      }\n    };\n  }, [gameState, setGameState, isInitialized]);\n  const handleKeyDown = e => {\n    if (e.key === 'Enter' && e.ctrlKey) {\n      e.preventDefault();\n      handleRun();\n    }\n  };\n  const handleRun = () => {\n    if (!input.trim() || !isInitialized) return;\n    try {\n      // Add the input to the output history\n      setOutput(prev => prev + '\\n>>> ' + input + '\\n');\n\n      // Create a script element for the input code\n      const script = document.createElement('script');\n      script.type = 'text/python';\n      script.innerHTML = input;\n      document.body.appendChild(script);\n\n      // Remove the script element after a short delay to ensure execution\n      setTimeout(() => {\n        document.body.removeChild(script);\n      }, 100);\n\n      // Clear the input\n      setInput('');\n    } catch (error) {\n      setOutput(prev => prev + 'Error: ' + error + '\\n');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(ConsoleContainer, {\n    children: [/*#__PURE__*/_jsxDEV(ConsoleOutput, {\n      children: output\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 344,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ConsoleInput, {\n      value: input,\n      onChange: e => setInput(e.target.value),\n      onKeyDown: handleKeyDown,\n      placeholder: \"Enter Python code here...\",\n      disabled: !isInitialized\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 347,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(RunButton, {\n      onClick: handleRun,\n      disabled: !isInitialized,\n      children: \"Run\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 354,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 343,\n    columnNumber: 5\n  }, this);\n}\n_s(PythonConsole, \"V5KjtZsnSOcOu1IctLx7DMbWF18=\");\n_c5 = PythonConsole;\nexport default PythonConsole;\nvar _c, _c2, _c3, _c4, _c5;\n$RefreshReg$(_c, \"ConsoleContainer\");\n$RefreshReg$(_c2, \"ConsoleOutput\");\n$RefreshReg$(_c3, \"ConsoleInput\");\n$RefreshReg$(_c4, \"RunButton\");\n$RefreshReg$(_c5, \"PythonConsole\");","map":{"version":3,"names":["React","useState","useEffect","useRef","styled","jsxDEV","_jsxDEV","ConsoleContainer","div","_c","ConsoleOutput","_c2","ConsoleInput","textarea","_c3","RunButton","button","_c4","PythonConsole","gameState","setGameState","_s","input","setInput","output","setOutput","isInitialized","setIsInitialized","initScriptRef","initBrython","window","brython","debug","error","console","interval","setInterval","timeout","setTimeout","clearInterval","prev","clearTimeout","farm_action","action","args","log","x","y","newLand","land","isPlowed","plantX","plantY","cropType","index","hasCrop","cropState","plantedTime","Date","now","harvestX","harvestY","inventory","checkX","checkY","tile","sellCropType","amount","available","prices","wheat","corn","potato","price","money","buyCropType","buyAmount","update_console","text","current","document","body","removeChild","script","createElement","type","id","innerHTML","JSON","stringify","appendChild","handleKeyDown","e","key","ctrlKey","preventDefault","handleRun","trim","children","fileName","_jsxFileName","lineNumber","columnNumber","value","onChange","target","onKeyDown","placeholder","disabled","onClick","_c5","$RefreshReg$"],"sources":["C:/Users/SPIDER/Downloads/Project/Demo GPT/Demo 1/src/components/PythonConsole.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst ConsoleContainer = styled.div`\r\n  background-color: #1e1e1e;\r\n  border-radius: 5px;\r\n  padding: 10px;\r\n  margin: 10px;\r\n  height: 300px;\r\n  display: flex;\r\n  flex-direction: column;\r\n`;\r\n\r\nconst ConsoleOutput = styled.div`\r\n  color: #ffffff;\r\n  font-family: monospace;\r\n  flex-grow: 1;\r\n  overflow-y: auto;\r\n  padding: 10px;\r\n  white-space: pre-wrap;\r\n  background-color: #2d2d2d;\r\n  margin-bottom: 10px;\r\n  border-radius: 3px;\r\n`;\r\n\r\nconst ConsoleInput = styled.textarea`\r\n  background-color: #2d2d2d;\r\n  color: #ffffff;\r\n  font-family: monospace;\r\n  border: 1px solid #3f3f3f;\r\n  border-radius: 3px;\r\n  padding: 5px;\r\n  resize: none;\r\n  height: 60px;\r\n`;\r\n\r\nconst RunButton = styled.button`\r\n  background-color: #4CAF50;\r\n  color: white;\r\n  padding: 8px 15px;\r\n  border: none;\r\n  border-radius: 3px;\r\n  margin-top: 5px;\r\n  cursor: pointer;\r\n  &:hover {\r\n    background-color: #45a049;\r\n  }\r\n`;\r\n\r\nfunction PythonConsole({ gameState, setGameState }) {\r\n  const [input, setInput] = useState('');\r\n  const [output, setOutput] = useState('Welcome to the Python Console!\\nType your Python code and press Run or Ctrl+Enter\\n');\r\n  const [isInitialized, setIsInitialized] = useState(false);\r\n  const initScriptRef = useRef(null);\r\n\r\n  // Initialize Brython when component mounts\r\n  useEffect(() => {\r\n    const initBrython = () => {\r\n      if (window.brython && !isInitialized) {\r\n        try {\r\n          window.brython({debug: 1});\r\n          setIsInitialized(true);\r\n        } catch (error) {\r\n          console.error('Error initializing Brython:', error);\r\n        }\r\n      }\r\n    };\r\n\r\n    // Try to initialize immediately if Brython is already loaded\r\n    initBrython();\r\n\r\n    // If not loaded, check periodically\r\n    const interval = setInterval(initBrython, 100);\r\n\r\n    // Stop checking after 5 seconds\r\n    const timeout = setTimeout(() => {\r\n      clearInterval(interval);\r\n      if (!isInitialized) {\r\n        setOutput(prev => prev + '\\nError: Failed to initialize Python environment\\n');\r\n      }\r\n    }, 5000);\r\n\r\n    return () => {\r\n      clearInterval(interval);\r\n      clearTimeout(timeout);\r\n    };\r\n  }, [isInitialized]);\r\n\r\n  // Set up game state and Python environment\r\n  useEffect(() => {\r\n    if (!isInitialized) return;\r\n\r\n    // Add the farm actions to the window object\r\n    window.farm_action = (action, ...args) => {\r\n      console.log('farm_action called:', action, args);\r\n      try {\r\n        switch (action) {\r\n          case 'plow':\r\n            const [x, y] = args;\r\n            if (x >= 0 && x < 5 && y >= 0 && y < 5) {\r\n              const newLand = [...gameState.land];\r\n              newLand[y * 5 + x] = { ...newLand[y * 5 + x], isPlowed: true };\r\n              setGameState(prev => ({ ...prev, land: newLand }));\r\n              console.log('Plowed tile:', x, y);\r\n              return true;\r\n            }\r\n            return false;\r\n\r\n          case 'plant':\r\n            const [plantX, plantY, cropType] = args;\r\n            if (plantX >= 0 && plantX < 5 && plantY >= 0 && plantY < 5) {\r\n              const index = plantY * 5 + plantX;\r\n              if (gameState.land[index].isPlowed && !gameState.land[index].hasCrop) {\r\n                const newLand = [...gameState.land];\r\n                newLand[index] = {\r\n                  ...newLand[index],\r\n                  hasCrop: true,\r\n                  cropType: cropType,\r\n                  cropState: 'growing',\r\n                  plantedTime: Date.now()\r\n                };\r\n                setGameState(prev => ({ ...prev, land: newLand }));\r\n                console.log('Planted crop:', cropType, 'at', plantX, plantY);\r\n                return true;\r\n              }\r\n            }\r\n            return false;\r\n\r\n          case 'harvest':\r\n            const [harvestX, harvestY] = args;\r\n            if (harvestX >= 0 && harvestX < 5 && harvestY >= 0 && harvestY < 5) {\r\n              const index = harvestY * 5 + harvestX;\r\n              if (gameState.land[index].hasCrop && gameState.land[index].cropState === 'ready') {\r\n                const cropType = gameState.land[index].cropType;\r\n                const newLand = [...gameState.land];\r\n                newLand[index] = {\r\n                  ...newLand[index],\r\n                  hasCrop: false,\r\n                  cropType: null,\r\n                  cropState: null,\r\n                  plantedTime: null\r\n                };\r\n                setGameState(prev => ({\r\n                  ...prev,\r\n                  land: newLand,\r\n                  inventory: {\r\n                    ...prev.inventory,\r\n                    [cropType]: (prev.inventory[cropType] || 0) + 1\r\n                  }\r\n                }));\r\n                console.log('Harvested crop at:', harvestX, harvestY);\r\n                return true;\r\n              }\r\n            }\r\n            return false;\r\n\r\n          case 'is_crop_ready':\r\n            const [checkX, checkY] = args;\r\n            if (checkX >= 0 && checkX < 5 && checkY >= 0 && checkY < 5) {\r\n              const tile = gameState.land[checkY * 5 + checkX];\r\n              return tile.hasCrop && tile.cropState === 'ready';\r\n            }\r\n            return false;\r\n\r\n          case 'sell_crop':\r\n            const [sellCropType, amount] = args;\r\n            const available = gameState.inventory[sellCropType] || 0;\r\n            if (available >= amount) {\r\n              const prices = { wheat: 20, corn: 30, potato: 40 };\r\n              const price = prices[sellCropType] || 0;\r\n              setGameState(prev => ({\r\n                ...prev,\r\n                money: prev.money + (price * amount),\r\n                inventory: {\r\n                  ...prev.inventory,\r\n                  [sellCropType]: prev.inventory[sellCropType] - amount\r\n                }\r\n              }));\r\n              console.log('Sold crop:', sellCropType, 'amount:', amount);\r\n              return true;\r\n            }\r\n            return false;\r\n\r\n          case 'buy_seeds':\r\n            const [buyCropType, buyAmount] = args;\r\n            const prices = { wheat: 10, corn: 15, potato: 20 };\r\n            const price = (prices[buyCropType] || 0) * buyAmount;\r\n            if (gameState.money >= price) {\r\n              setGameState(prev => ({\r\n                ...prev,\r\n                money: prev.money - price,\r\n                inventory: {\r\n                  ...prev.inventory,\r\n                  [`${buyCropType}_seeds`]: (prev.inventory[`${buyCropType}_seeds`] || 0) + buyAmount\r\n                }\r\n              }));\r\n              console.log('Bought seeds:', buyCropType, 'amount:', buyAmount);\r\n              return true;\r\n            }\r\n            return false;\r\n\r\n          default:\r\n            return false;\r\n        }\r\n      } catch (error) {\r\n        console.error('Error in farm_action:', error);\r\n        return false;\r\n      }\r\n    };\r\n\r\n    // Add the console update function to the window object\r\n    window.update_console = (text) => {\r\n      setOutput(prev => prev + text);\r\n    };\r\n\r\n    // Remove old initialization script if it exists\r\n    if (initScriptRef.current) {\r\n      document.body.removeChild(initScriptRef.current);\r\n    }\r\n\r\n    // Create a script element to initialize Python environment\r\n    const script = document.createElement('script');\r\n    script.type = 'text/python';\r\n    script.id = 'python-init';\r\n    script.innerHTML = /* python */`\r\nfrom browser import window, console\r\nimport sys\r\n\r\n# Create the Farm class\r\nclass Farm:\r\n    def __init__(self):\r\n        self.money = ${gameState.money}\r\n        self.inventory = ${JSON.stringify(gameState.inventory)}\r\n        self.land = ${JSON.stringify(gameState.land)}\r\n        self.land_size = 5\r\n    \r\n    def plow(self, x, y):\r\n        console.log(\"Calling plow\", x, y)\r\n        result = window.farm_action(\"plow\", x, y)\r\n        if result:\r\n            print(f\"Successfully plowed tile at ({x}, {y})\")\r\n        else:\r\n            print(f\"Failed to plow tile at ({x}, {y})\")\r\n        return result\r\n    \r\n    def plant(self, x, y, crop_type):\r\n        console.log(\"Calling plant\", x, y, crop_type)\r\n        result = window.farm_action(\"plant\", x, y, crop_type)\r\n        if result:\r\n            print(f\"Successfully planted {crop_type} at ({x}, {y})\")\r\n        else:\r\n            print(f\"Failed to plant {crop_type} at ({x}, {y})\")\r\n        return result\r\n    \r\n    def harvest(self, x, y):\r\n        result = window.farm_action(\"harvest\", x, y)\r\n        if result:\r\n            print(f\"Successfully harvested crop at ({x}, {y})\")\r\n        else:\r\n            print(f\"Failed to harvest crop at ({x}, {y})\")\r\n        return result\r\n    \r\n    def is_crop_ready(self, x, y):\r\n        return window.farm_action(\"is_crop_ready\", x, y)\r\n    \r\n    def sell_crop(self, crop_type, amount):\r\n        result = window.farm_action(\"sell_crop\", crop_type, amount)\r\n        if result:\r\n            print(f\"Successfully sold {amount} {crop_type}\")\r\n        else:\r\n            print(f\"Failed to sell {amount} {crop_type}\")\r\n        return result\r\n    \r\n    def buy_seeds(self, crop_type, amount):\r\n        result = window.farm_action(\"buy_seeds\", crop_type, amount)\r\n        if result:\r\n            print(f\"Successfully bought {amount} {crop_type} seeds\")\r\n        else:\r\n            print(f\"Failed to buy {amount} {crop_type} seeds\")\r\n        return result\r\n    \r\n    def __str__(self):\r\n        return \"Farm(money=$%d, inventory=%s)\" % (self.money, str(self.inventory))\r\n\r\n# Create global farm instance\r\nfarm = Farm()\r\nprint(\"Farm initialized:\", farm)\r\n\r\n# Override print function\r\ndef print(*args, sep=\" \", end=\"\\\\n\"):\r\n    text = sep.join(str(arg) for arg in args) + end\r\n    window.update_console(text)\r\n\r\n# Make our print function global\r\n__builtins__.print = print\r\n`;\r\n\r\n    // Add the script to the document\r\n    document.body.appendChild(script);\r\n    initScriptRef.current = script;\r\n\r\n    // Clean up\r\n    return () => {\r\n      if (initScriptRef.current) {\r\n        document.body.removeChild(initScriptRef.current);\r\n      }\r\n    };\r\n  }, [gameState, setGameState, isInitialized]);\r\n\r\n  const handleKeyDown = (e) => {\r\n    if (e.key === 'Enter' && e.ctrlKey) {\r\n      e.preventDefault();\r\n      handleRun();\r\n    }\r\n  };\r\n\r\n  const handleRun = () => {\r\n    if (!input.trim() || !isInitialized) return;\r\n\r\n    try {\r\n      // Add the input to the output history\r\n      setOutput(prev => prev + '\\n>>> ' + input + '\\n');\r\n\r\n      // Create a script element for the input code\r\n      const script = document.createElement('script');\r\n      script.type = 'text/python';\r\n      script.innerHTML = input;\r\n      document.body.appendChild(script);\r\n\r\n      // Remove the script element after a short delay to ensure execution\r\n      setTimeout(() => {\r\n        document.body.removeChild(script);\r\n      }, 100);\r\n      \r\n      // Clear the input\r\n      setInput('');\r\n    } catch (error) {\r\n      setOutput(prev => prev + 'Error: ' + error + '\\n');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <ConsoleContainer>\r\n      <ConsoleOutput>\r\n        {output}\r\n      </ConsoleOutput>\r\n      <ConsoleInput\r\n        value={input}\r\n        onChange={(e) => setInput(e.target.value)}\r\n        onKeyDown={handleKeyDown}\r\n        placeholder=\"Enter Python code here...\"\r\n        disabled={!isInitialized}\r\n      />\r\n      <RunButton onClick={handleRun} disabled={!isInitialized}>\r\n        Run\r\n      </RunButton>\r\n    </ConsoleContainer>\r\n  );\r\n}\r\n\r\nexport default PythonConsole; "],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAC1D,OAAOC,MAAM,MAAM,mBAAmB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEvC,MAAMC,gBAAgB,GAAGH,MAAM,CAACI,GAAG;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAACC,EAAA,GARIF,gBAAgB;AAUtB,MAAMG,aAAa,GAAGN,MAAM,CAACI,GAAG;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAACG,GAAA,GAVID,aAAa;AAYnB,MAAME,YAAY,GAAGR,MAAM,CAACS,QAAQ;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAACC,GAAA,GATIF,YAAY;AAWlB,MAAMG,SAAS,GAAGX,MAAM,CAACY,MAAM;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAACC,GAAA,GAXIF,SAAS;AAaf,SAASG,aAAaA,CAAC;EAAEC,SAAS;EAAEC;AAAa,CAAC,EAAE;EAAAC,EAAA;EAClD,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGtB,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACuB,MAAM,EAAEC,SAAS,CAAC,GAAGxB,QAAQ,CAAC,qFAAqF,CAAC;EAC3H,MAAM,CAACyB,aAAa,EAAEC,gBAAgB,CAAC,GAAG1B,QAAQ,CAAC,KAAK,CAAC;EACzD,MAAM2B,aAAa,GAAGzB,MAAM,CAAC,IAAI,CAAC;;EAElC;EACAD,SAAS,CAAC,MAAM;IACd,MAAM2B,WAAW,GAAGA,CAAA,KAAM;MACxB,IAAIC,MAAM,CAACC,OAAO,IAAI,CAACL,aAAa,EAAE;QACpC,IAAI;UACFI,MAAM,CAACC,OAAO,CAAC;YAACC,KAAK,EAAE;UAAC,CAAC,CAAC;UAC1BL,gBAAgB,CAAC,IAAI,CAAC;QACxB,CAAC,CAAC,OAAOM,KAAK,EAAE;UACdC,OAAO,CAACD,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;QACrD;MACF;IACF,CAAC;;IAED;IACAJ,WAAW,CAAC,CAAC;;IAEb;IACA,MAAMM,QAAQ,GAAGC,WAAW,CAACP,WAAW,EAAE,GAAG,CAAC;;IAE9C;IACA,MAAMQ,OAAO,GAAGC,UAAU,CAAC,MAAM;MAC/BC,aAAa,CAACJ,QAAQ,CAAC;MACvB,IAAI,CAACT,aAAa,EAAE;QAClBD,SAAS,CAACe,IAAI,IAAIA,IAAI,GAAG,oDAAoD,CAAC;MAChF;IACF,CAAC,EAAE,IAAI,CAAC;IAER,OAAO,MAAM;MACXD,aAAa,CAACJ,QAAQ,CAAC;MACvBM,YAAY,CAACJ,OAAO,CAAC;IACvB,CAAC;EACH,CAAC,EAAE,CAACX,aAAa,CAAC,CAAC;;EAEnB;EACAxB,SAAS,CAAC,MAAM;IACd,IAAI,CAACwB,aAAa,EAAE;;IAEpB;IACAI,MAAM,CAACY,WAAW,GAAG,CAACC,MAAM,EAAE,GAAGC,IAAI,KAAK;MACxCV,OAAO,CAACW,GAAG,CAAC,qBAAqB,EAAEF,MAAM,EAAEC,IAAI,CAAC;MAChD,IAAI;QACF,QAAQD,MAAM;UACZ,KAAK,MAAM;YACT,MAAM,CAACG,CAAC,EAAEC,CAAC,CAAC,GAAGH,IAAI;YACnB,IAAIE,CAAC,IAAI,CAAC,IAAIA,CAAC,GAAG,CAAC,IAAIC,CAAC,IAAI,CAAC,IAAIA,CAAC,GAAG,CAAC,EAAE;cACtC,MAAMC,OAAO,GAAG,CAAC,GAAG7B,SAAS,CAAC8B,IAAI,CAAC;cACnCD,OAAO,CAACD,CAAC,GAAG,CAAC,GAAGD,CAAC,CAAC,GAAG;gBAAE,GAAGE,OAAO,CAACD,CAAC,GAAG,CAAC,GAAGD,CAAC,CAAC;gBAAEI,QAAQ,EAAE;cAAK,CAAC;cAC9D9B,YAAY,CAACoB,IAAI,KAAK;gBAAE,GAAGA,IAAI;gBAAES,IAAI,EAAED;cAAQ,CAAC,CAAC,CAAC;cAClDd,OAAO,CAACW,GAAG,CAAC,cAAc,EAAEC,CAAC,EAAEC,CAAC,CAAC;cACjC,OAAO,IAAI;YACb;YACA,OAAO,KAAK;UAEd,KAAK,OAAO;YACV,MAAM,CAACI,MAAM,EAAEC,MAAM,EAAEC,QAAQ,CAAC,GAAGT,IAAI;YACvC,IAAIO,MAAM,IAAI,CAAC,IAAIA,MAAM,GAAG,CAAC,IAAIC,MAAM,IAAI,CAAC,IAAIA,MAAM,GAAG,CAAC,EAAE;cAC1D,MAAME,KAAK,GAAGF,MAAM,GAAG,CAAC,GAAGD,MAAM;cACjC,IAAIhC,SAAS,CAAC8B,IAAI,CAACK,KAAK,CAAC,CAACJ,QAAQ,IAAI,CAAC/B,SAAS,CAAC8B,IAAI,CAACK,KAAK,CAAC,CAACC,OAAO,EAAE;gBACpE,MAAMP,OAAO,GAAG,CAAC,GAAG7B,SAAS,CAAC8B,IAAI,CAAC;gBACnCD,OAAO,CAACM,KAAK,CAAC,GAAG;kBACf,GAAGN,OAAO,CAACM,KAAK,CAAC;kBACjBC,OAAO,EAAE,IAAI;kBACbF,QAAQ,EAAEA,QAAQ;kBAClBG,SAAS,EAAE,SAAS;kBACpBC,WAAW,EAAEC,IAAI,CAACC,GAAG,CAAC;gBACxB,CAAC;gBACDvC,YAAY,CAACoB,IAAI,KAAK;kBAAE,GAAGA,IAAI;kBAAES,IAAI,EAAED;gBAAQ,CAAC,CAAC,CAAC;gBAClDd,OAAO,CAACW,GAAG,CAAC,eAAe,EAAEQ,QAAQ,EAAE,IAAI,EAAEF,MAAM,EAAEC,MAAM,CAAC;gBAC5D,OAAO,IAAI;cACb;YACF;YACA,OAAO,KAAK;UAEd,KAAK,SAAS;YACZ,MAAM,CAACQ,QAAQ,EAAEC,QAAQ,CAAC,GAAGjB,IAAI;YACjC,IAAIgB,QAAQ,IAAI,CAAC,IAAIA,QAAQ,GAAG,CAAC,IAAIC,QAAQ,IAAI,CAAC,IAAIA,QAAQ,GAAG,CAAC,EAAE;cAClE,MAAMP,KAAK,GAAGO,QAAQ,GAAG,CAAC,GAAGD,QAAQ;cACrC,IAAIzC,SAAS,CAAC8B,IAAI,CAACK,KAAK,CAAC,CAACC,OAAO,IAAIpC,SAAS,CAAC8B,IAAI,CAACK,KAAK,CAAC,CAACE,SAAS,KAAK,OAAO,EAAE;gBAChF,MAAMH,QAAQ,GAAGlC,SAAS,CAAC8B,IAAI,CAACK,KAAK,CAAC,CAACD,QAAQ;gBAC/C,MAAML,OAAO,GAAG,CAAC,GAAG7B,SAAS,CAAC8B,IAAI,CAAC;gBACnCD,OAAO,CAACM,KAAK,CAAC,GAAG;kBACf,GAAGN,OAAO,CAACM,KAAK,CAAC;kBACjBC,OAAO,EAAE,KAAK;kBACdF,QAAQ,EAAE,IAAI;kBACdG,SAAS,EAAE,IAAI;kBACfC,WAAW,EAAE;gBACf,CAAC;gBACDrC,YAAY,CAACoB,IAAI,KAAK;kBACpB,GAAGA,IAAI;kBACPS,IAAI,EAAED,OAAO;kBACbc,SAAS,EAAE;oBACT,GAAGtB,IAAI,CAACsB,SAAS;oBACjB,CAACT,QAAQ,GAAG,CAACb,IAAI,CAACsB,SAAS,CAACT,QAAQ,CAAC,IAAI,CAAC,IAAI;kBAChD;gBACF,CAAC,CAAC,CAAC;gBACHnB,OAAO,CAACW,GAAG,CAAC,oBAAoB,EAAEe,QAAQ,EAAEC,QAAQ,CAAC;gBACrD,OAAO,IAAI;cACb;YACF;YACA,OAAO,KAAK;UAEd,KAAK,eAAe;YAClB,MAAM,CAACE,MAAM,EAAEC,MAAM,CAAC,GAAGpB,IAAI;YAC7B,IAAImB,MAAM,IAAI,CAAC,IAAIA,MAAM,GAAG,CAAC,IAAIC,MAAM,IAAI,CAAC,IAAIA,MAAM,GAAG,CAAC,EAAE;cAC1D,MAAMC,IAAI,GAAG9C,SAAS,CAAC8B,IAAI,CAACe,MAAM,GAAG,CAAC,GAAGD,MAAM,CAAC;cAChD,OAAOE,IAAI,CAACV,OAAO,IAAIU,IAAI,CAACT,SAAS,KAAK,OAAO;YACnD;YACA,OAAO,KAAK;UAEd,KAAK,WAAW;YACd,MAAM,CAACU,YAAY,EAAEC,MAAM,CAAC,GAAGvB,IAAI;YACnC,MAAMwB,SAAS,GAAGjD,SAAS,CAAC2C,SAAS,CAACI,YAAY,CAAC,IAAI,CAAC;YACxD,IAAIE,SAAS,IAAID,MAAM,EAAE;cACvB,MAAME,MAAM,GAAG;gBAAEC,KAAK,EAAE,EAAE;gBAAEC,IAAI,EAAE,EAAE;gBAAEC,MAAM,EAAE;cAAG,CAAC;cAClD,MAAMC,KAAK,GAAGJ,MAAM,CAACH,YAAY,CAAC,IAAI,CAAC;cACvC9C,YAAY,CAACoB,IAAI,KAAK;gBACpB,GAAGA,IAAI;gBACPkC,KAAK,EAAElC,IAAI,CAACkC,KAAK,GAAID,KAAK,GAAGN,MAAO;gBACpCL,SAAS,EAAE;kBACT,GAAGtB,IAAI,CAACsB,SAAS;kBACjB,CAACI,YAAY,GAAG1B,IAAI,CAACsB,SAAS,CAACI,YAAY,CAAC,GAAGC;gBACjD;cACF,CAAC,CAAC,CAAC;cACHjC,OAAO,CAACW,GAAG,CAAC,YAAY,EAAEqB,YAAY,EAAE,SAAS,EAAEC,MAAM,CAAC;cAC1D,OAAO,IAAI;YACb;YACA,OAAO,KAAK;UAEd,KAAK,WAAW;YACd,MAAM,CAACQ,WAAW,EAAEC,SAAS,CAAC,GAAGhC,IAAI;YACrC,MAAMyB,MAAM,GAAG;cAAEC,KAAK,EAAE,EAAE;cAAEC,IAAI,EAAE,EAAE;cAAEC,MAAM,EAAE;YAAG,CAAC;YAClD,MAAMC,KAAK,GAAG,CAACJ,MAAM,CAACM,WAAW,CAAC,IAAI,CAAC,IAAIC,SAAS;YACpD,IAAIzD,SAAS,CAACuD,KAAK,IAAID,KAAK,EAAE;cAC5BrD,YAAY,CAACoB,IAAI,KAAK;gBACpB,GAAGA,IAAI;gBACPkC,KAAK,EAAElC,IAAI,CAACkC,KAAK,GAAGD,KAAK;gBACzBX,SAAS,EAAE;kBACT,GAAGtB,IAAI,CAACsB,SAAS;kBACjB,CAAC,GAAGa,WAAW,QAAQ,GAAG,CAACnC,IAAI,CAACsB,SAAS,CAAC,GAAGa,WAAW,QAAQ,CAAC,IAAI,CAAC,IAAIC;gBAC5E;cACF,CAAC,CAAC,CAAC;cACH1C,OAAO,CAACW,GAAG,CAAC,eAAe,EAAE8B,WAAW,EAAE,SAAS,EAAEC,SAAS,CAAC;cAC/D,OAAO,IAAI;YACb;YACA,OAAO,KAAK;UAEd;YACE,OAAO,KAAK;QAChB;MACF,CAAC,CAAC,OAAO3C,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;QAC7C,OAAO,KAAK;MACd;IACF,CAAC;;IAED;IACAH,MAAM,CAAC+C,cAAc,GAAIC,IAAI,IAAK;MAChCrD,SAAS,CAACe,IAAI,IAAIA,IAAI,GAAGsC,IAAI,CAAC;IAChC,CAAC;;IAED;IACA,IAAIlD,aAAa,CAACmD,OAAO,EAAE;MACzBC,QAAQ,CAACC,IAAI,CAACC,WAAW,CAACtD,aAAa,CAACmD,OAAO,CAAC;IAClD;;IAEA;IACA,MAAMI,MAAM,GAAGH,QAAQ,CAACI,aAAa,CAAC,QAAQ,CAAC;IAC/CD,MAAM,CAACE,IAAI,GAAG,aAAa;IAC3BF,MAAM,CAACG,EAAE,GAAG,aAAa;IACzBH,MAAM,CAACI,SAAS,GAAG,YAAY;AACnC;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuBpE,SAAS,CAACuD,KAAK;AACtC,2BAA2Bc,IAAI,CAACC,SAAS,CAACtE,SAAS,CAAC2C,SAAS,CAAC;AAC9D,sBAAsB0B,IAAI,CAACC,SAAS,CAACtE,SAAS,CAAC8B,IAAI,CAAC;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;IAEG;IACA+B,QAAQ,CAACC,IAAI,CAACS,WAAW,CAACP,MAAM,CAAC;IACjCvD,aAAa,CAACmD,OAAO,GAAGI,MAAM;;IAE9B;IACA,OAAO,MAAM;MACX,IAAIvD,aAAa,CAACmD,OAAO,EAAE;QACzBC,QAAQ,CAACC,IAAI,CAACC,WAAW,CAACtD,aAAa,CAACmD,OAAO,CAAC;MAClD;IACF,CAAC;EACH,CAAC,EAAE,CAAC5D,SAAS,EAAEC,YAAY,EAAEM,aAAa,CAAC,CAAC;EAE5C,MAAMiE,aAAa,GAAIC,CAAC,IAAK;IAC3B,IAAIA,CAAC,CAACC,GAAG,KAAK,OAAO,IAAID,CAAC,CAACE,OAAO,EAAE;MAClCF,CAAC,CAACG,cAAc,CAAC,CAAC;MAClBC,SAAS,CAAC,CAAC;IACb;EACF,CAAC;EAED,MAAMA,SAAS,GAAGA,CAAA,KAAM;IACtB,IAAI,CAAC1E,KAAK,CAAC2E,IAAI,CAAC,CAAC,IAAI,CAACvE,aAAa,EAAE;IAErC,IAAI;MACF;MACAD,SAAS,CAACe,IAAI,IAAIA,IAAI,GAAG,QAAQ,GAAGlB,KAAK,GAAG,IAAI,CAAC;;MAEjD;MACA,MAAM6D,MAAM,GAAGH,QAAQ,CAACI,aAAa,CAAC,QAAQ,CAAC;MAC/CD,MAAM,CAACE,IAAI,GAAG,aAAa;MAC3BF,MAAM,CAACI,SAAS,GAAGjE,KAAK;MACxB0D,QAAQ,CAACC,IAAI,CAACS,WAAW,CAACP,MAAM,CAAC;;MAEjC;MACA7C,UAAU,CAAC,MAAM;QACf0C,QAAQ,CAACC,IAAI,CAACC,WAAW,CAACC,MAAM,CAAC;MACnC,CAAC,EAAE,GAAG,CAAC;;MAEP;MACA5D,QAAQ,CAAC,EAAE,CAAC;IACd,CAAC,CAAC,OAAOU,KAAK,EAAE;MACdR,SAAS,CAACe,IAAI,IAAIA,IAAI,GAAG,SAAS,GAAGP,KAAK,GAAG,IAAI,CAAC;IACpD;EACF,CAAC;EAED,oBACE3B,OAAA,CAACC,gBAAgB;IAAA2F,QAAA,gBACf5F,OAAA,CAACI,aAAa;MAAAwF,QAAA,EACX1E;IAAM;MAAA2E,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACM,CAAC,eAChBhG,OAAA,CAACM,YAAY;MACX2F,KAAK,EAAEjF,KAAM;MACbkF,QAAQ,EAAGZ,CAAC,IAAKrE,QAAQ,CAACqE,CAAC,CAACa,MAAM,CAACF,KAAK,CAAE;MAC1CG,SAAS,EAAEf,aAAc;MACzBgB,WAAW,EAAC,2BAA2B;MACvCC,QAAQ,EAAE,CAAClF;IAAc;MAAAyE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC1B,CAAC,eACFhG,OAAA,CAACS,SAAS;MAAC8F,OAAO,EAAEb,SAAU;MAACY,QAAQ,EAAE,CAAClF,aAAc;MAAAwE,QAAA,EAAC;IAEzD;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAW,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACI,CAAC;AAEvB;AAACjF,EAAA,CArTQH,aAAa;AAAA4F,GAAA,GAAb5F,aAAa;AAuTtB,eAAeA,aAAa;AAAC,IAAAT,EAAA,EAAAE,GAAA,EAAAG,GAAA,EAAAG,GAAA,EAAA6F,GAAA;AAAAC,YAAA,CAAAtG,EAAA;AAAAsG,YAAA,CAAApG,GAAA;AAAAoG,YAAA,CAAAjG,GAAA;AAAAiG,YAAA,CAAA9F,GAAA;AAAA8F,YAAA,CAAAD,GAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}