{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\SPIDER\\\\Downloads\\\\Project\\\\Demo GPT\\\\Demo 1\\\\src\\\\components\\\\Game.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport styled from 'styled-components';\nimport { useNavigate } from 'react-router-dom';\nimport JavaScriptConsole from './JavaScriptConsole';\nimport TechTree from './TechTree';\nimport Game3D from './Game3D';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GameLayout = styled.div`\n  display: flex;\n  flex-direction: column;\n  height: 100vh;\n  background-color: #1a1a1a;\n  color: white;\n`;\nconst MainArea = styled.div`\n  display: flex;\n  flex-direction: column;\n  flex-grow: 1;\n  padding: 20px;\n  gap: 20px;\n`;\nconst GameHeader = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding: 10px;\n  background-color: #2c3e50;\n  border-radius: 5px;\n`;\n_c = GameHeader;\nconst GameInfo = styled.div`\n  display: flex;\n  gap: 20px;\n`;\n_c2 = GameInfo;\nconst InfoItem = styled.div`\n  display: flex;\n  align-items: center;\n  gap: 5px;\n`;\n_c3 = InfoItem;\nconst GameContent = styled.div`\n  display: flex;\n  gap: 20px;\n  width: 100%;\n  max-width: 1200px;\n  height: calc(100vh - 100px);\n`;\nconst GameScene = styled.div`\n  flex-grow: 1;\n  background-color: #2c3e50;\n  border-radius: 5px;\n  overflow: hidden;\n  height: 500px;\n`;\nconst ConsoleArea = styled.div`\n  width: 400px;\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n`;\nconst MoneyDisplay = styled.div`\n  font-size: 1.5em;\n  font-weight: bold;\n  color: #f1c40f;\n  text-align: center;\n  padding: 10px;\n  background-color: #34495e;\n  border-radius: 5px;\n`;\nconst GameGrid = styled.div`\n  display: grid;\n  grid-template-columns: repeat(${props => props.size}, 1fr);\n  grid-template-rows: repeat(${props => props.size}, 1fr);\n  gap: 5px;\n  width: 300px;\n  height: 300px;\n  background-color: #8B4513;\n  padding: 10px;\n  border-radius: 5px;\n`;\n_c4 = GameGrid;\nconst LandTile = styled.div`\n  width: 100%;\n  aspect-ratio: 1;\n  background-color: ${props => {\n  if (props.isPlowed) return '#8B4513';\n  if (props.hasCrop && props.cropState === 'growing') return '#90EE90';\n  if (props.hasCrop && props.cropState === 'ready') return '#228B22';\n  return '#90EE90';\n}};\n  border: 1px solid #2c3e50;\n  cursor: pointer;\n  position: relative;\n  transition: all 0.3s ease;\n\n  &:hover {\n    transform: scale(1.05);\n  }\n`;\n_c5 = LandTile;\nconst CropIndicator = styled.div`\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  width: 80%;\n  height: 80%;\n  background-color: ${props => props.color};\n  border-radius: 50%;\n`;\n_c6 = CropIndicator;\nconst StyledGameStats = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 12px;\n  padding: 16px;\n  background: #232323;\n  border-radius: 8px;\n  font-size: 14px;\n  color: #E0E0E0;\n\n  div {\n    display: flex;\n    justify-content: space-between;\n    padding: 8px;\n    background: rgba(255, 255, 255, 0.05);\n    border-radius: 4px;\n  }\n`;\n_c7 = StyledGameStats;\nconst ToolBar = styled.div`\n  display: flex;\n  margin-bottom: 20px;\n  flex-wrap: wrap;\n`;\nconst ToolButton = styled.button`\n  background-color: ${props => props.selected ? '#2980b9' : '#3498db'};\n  border: ${props => props.selected ? '2px solid #fff' : 'none'};\n  padding: ${props => props.selected ? '6px 14px' : '8px 16px'};\n`;\nconst CropSelector = styled.div`\n  margin-top: 10px;\n  display: flex;\n  flex-wrap: wrap;\n`;\nconst CropButton = styled.button`\n  background-color: ${props => props.selected ? '#27ae60' : '#2ecc71'};\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  \n  &:disabled {\n    background-color: #95a5a6;\n    cursor: not-allowed;\n  }\n`;\nconst CropIcon = styled.span`\n  display: inline-block;\n  width: 12px;\n  height: 12px;\n  border-radius: 50%;\n  background-color: ${props => props.color};\n  margin-right: 5px;\n`;\nconst StyledDroneSprite = styled.div`\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  width: 60%;\n  height: 60%;\n  transform: translate(-50%, -50%);\n  z-index: 2;\n  filter: drop-shadow(0 2px 4px rgba(0, 0, 0, 0.3));\n  \n  &::before {\n    content: 'ðŸ›¸';\n    position: absolute;\n    top: 50%;\n    left: 50%;\n    transform: translate(-50%, -50%);\n    font-size: 24px;\n  }\n`;\n_c8 = StyledDroneSprite;\nconst ConsoleContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  height: 100%;\n`;\nconst ConsoleTabs = styled.div`\n  display: flex;\n  gap: 5px;\n  margin-bottom: 10px;\n`;\nconst ConsoleTab = styled.button`\n  background-color: ${props => props.active ? '#3498db' : '#2c3e50'};\n  color: white;\n  border: none;\n  padding: 5px 10px;\n  border-radius: 3px;\n  cursor: pointer;\n  \n  &:hover {\n    background-color: ${props => props.active ? '#2980b9' : '#34495e'};\n  }\n`;\nconst AddConsoleButton = styled.button`\n  background-color: #27ae60;\n  color: white;\n  border: none;\n  padding: 5px 10px;\n  border-radius: 3px;\n  cursor: pointer;\n  \n  &:hover {\n    background-color: #219653;\n  }\n`;\nconst ConsoleWrapper = styled.div`\n  display: ${props => props.active ? 'block' : 'none'};\n  height: 100%;\n`;\nconst GameContainer = styled.div`\n  display: grid;\n  grid-template-areas:\n    \"header header header\"\n    \"grid view console\";\n  grid-template-columns: minmax(300px, 25%) minmax(400px, 45%) minmax(300px, 30%);\n  grid-template-rows: 60px 1fr;\n  gap: 16px;\n  padding: 16px;\n  height: 100vh;\n  background-color: #1E1E1E;\n  box-sizing: border-box;\n`;\n_c9 = GameContainer;\nconst GameGridContainer = styled.div`\n  grid-area: grid;\n  display: flex;\n  flex-direction: column;\n  gap: 16px;\n  background: #2A2A2A;\n  border-radius: 12px;\n  padding: 20px;\n  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\n`;\n_c10 = GameGridContainer;\nconst GameTitle = styled.h1`\n  color: #2c3e50;\n  margin: 0;\n`;\nconst GameCanvas = styled.div`\n  flex: 1;\n  height: 600px;\n  background-color: white;\n  border-radius: 5px;\n  box-shadow: 0 2px 4px rgba(0,0,0,0.1);\n  position: relative;\n`;\nconst GameControls = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  width: 300px;\n`;\nconst Button = styled.button`\n  padding: 10px 15px;\n  background-color: #3498db;\n  color: white;\n  border: none;\n  border-radius: 5px;\n  cursor: pointer;\n  font-size: 16px;\n  transition: background-color 0.2s;\n\n  &:hover {\n    background-color: #2980b9;\n  }\n`;\nconst ThreeDViewContainer = styled.div`\n  grid-area: view;\n  background: #2A2A2A;\n  border-radius: 12px;\n  overflow: hidden;\n  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\n`;\n_c11 = ThreeDViewContainer;\nconst StyledConsoleContainer = styled.div`\n  grid-area: console;\n  display: flex;\n  flex-direction: column;\n  gap: 16px;\n  background: #2A2A2A;\n  border-radius: 12px;\n  padding: 20px;\n  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\n`;\n_c12 = StyledConsoleContainer;\nconst TechTreeButton = styled.button`\n  padding: 8px 16px;\n  background: linear-gradient(180deg, #3498DB 0%, #2980B9 100%);\n  border: none;\n  border-radius: 6px;\n  color: white;\n  font-weight: 500;\n  cursor: pointer;\n  transition: all 0.2s ease;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n\n  &:hover {\n    transform: translateY(-1px);\n    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.2);\n  }\n`;\n_c13 = TechTreeButton;\nexport const Game = ({\n  inventory,\n  setInventory,\n  money,\n  setMoney,\n  onOpenTechTree,\n  unlockedCrops\n}) => {\n  _s();\n  const navigate = useNavigate();\n  const [gameState, setGameState] = useState({\n    grid: Array(1).fill().map(() => Array(1).fill(null)),\n    money: money,\n    inventory: {\n      wheat_seeds: 5,\n      // Start with some wheat seeds\n      corn_seeds: 0,\n      // No corn seeds initially\n      potato_seeds: 0,\n      // No potato seeds initially\n      wheat: 0,\n      corn: 0,\n      potato: 0\n    },\n    dronePosition: {\n      x: 0,\n      y: 0\n    },\n    droneInventory: [],\n    land: Array(1).fill().map(() => ({\n      isPlowed: false,\n      hasCrop: false,\n      cropType: null,\n      cropState: null\n    })),\n    drone: {\n      x: 0,\n      y: 0\n    },\n    unlockedCrops: ['wheat'] // Only wheat is unlocked initially\n  });\n\n  // Add crop growth system\n  useEffect(() => {\n    const growthInterval = setInterval(() => {\n      setGameState(prevState => {\n        const newLand = [...prevState.land];\n        let hasChanges = false;\n        newLand.forEach((tile, index) => {\n          if (tile.hasCrop && tile.cropState === 'growing') {\n            const growthTime = {\n              wheat: 1000,\n              // 1 second for wheat\n              corn: 2000,\n              // 2 seconds for corn\n              potato: 3000 // 3 seconds for potato\n            };\n            const currentTime = Date.now();\n            const elapsedTime = currentTime - tile.plantedTime;\n            if (elapsedTime >= growthTime[tile.cropType]) {\n              newLand[index] = {\n                ...tile,\n                cropState: 'ready'\n              };\n              hasChanges = true;\n            }\n          }\n        });\n        return hasChanges ? {\n          ...prevState,\n          land: newLand\n        } : prevState;\n      });\n    }, 1000); // Check every second\n\n    return () => clearInterval(growthInterval);\n  }, []);\n\n  // Add visual feedback for crop state\n  const getCropColor = (cropType, cropState) => {\n    if (cropState === 'growing') {\n      return {\n        wheat: '#F4D03F80',\n        // Semi-transparent yellow\n        corn: '#F39C1280',\n        // Semi-transparent orange\n        potato: '#93511680' // Semi-transparent brown\n      }[cropType] || '#90EE90';\n    } else if (cropState === 'ready') {\n      return {\n        wheat: '#F4D03F',\n        // Bright yellow\n        corn: '#F39C12',\n        // Bright orange\n        potato: '#935116' // Rich brown\n      }[cropType] || '#228B22';\n    }\n    return '#90EE90';\n  };\n  const saveGame = () => {\n    localStorage.setItem('farmGame', JSON.stringify(gameState));\n    alert('Game saved!');\n  };\n  const loadGame = () => {\n    const savedGame = localStorage.getItem('farmGame');\n    if (savedGame) {\n      setGameState(JSON.parse(savedGame));\n      alert('Game loaded!');\n    } else {\n      alert('No saved game found!');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(GameContainer, {\n    children: [/*#__PURE__*/_jsxDEV(GameHeader, {\n      children: [/*#__PURE__*/_jsxDEV(GameInfo, {\n        children: [/*#__PURE__*/_jsxDEV(InfoItem, {\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            children: \"\\uD83D\\uDCB0\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 439,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: [\"$\", money.toLocaleString()]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 440,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 438,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(InfoItem, {\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            children: \"\\uD83C\\uDF31\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 443,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: [Object.entries(inventory).filter(([key]) => key.endsWith('_seeds')).length, \" Seeds\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 444,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 442,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(InfoItem, {\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            children: \"\\uD83C\\uDF3E\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 447,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: [Object.entries(inventory).filter(([key]) => !key.endsWith('_seeds')).length, \" Crops\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 448,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 446,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 437,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TechTreeButton, {\n        onClick: onOpenTechTree,\n        children: \"Tech Tree\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 451,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 436,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(GameGridContainer, {\n      children: [/*#__PURE__*/_jsxDEV(GameGrid, {\n        size: Math.sqrt(gameState.land.length),\n        children: gameState.land.map((tile, index) => {\n          const x = Math.floor(index / Math.sqrt(gameState.land.length));\n          const y = index % Math.sqrt(gameState.land.length);\n          const isDroneHere = gameState.dronePosition.x === x && gameState.dronePosition.y === y;\n          return /*#__PURE__*/_jsxDEV(LandTile, {\n            isPlowed: tile.isPlowed,\n            hasCrop: tile.hasCrop,\n            cropState: tile.cropState,\n            children: [tile.hasCrop && /*#__PURE__*/_jsxDEV(CropIndicator, {\n              color: getCropColor(tile.cropType, tile.cropState)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 469,\n              columnNumber: 19\n            }, this), isDroneHere && /*#__PURE__*/_jsxDEV(StyledDroneSprite, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 473,\n              columnNumber: 33\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 462,\n            columnNumber: 15\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 455,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(StyledGameStats, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            children: \"Drone Position:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 480,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: [\"(\", gameState.dronePosition.x, \", \", gameState.dronePosition.y, \")\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 481,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 479,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            children: \"Status:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 484,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: gameState.land[gameState.dronePosition.y * Math.sqrt(gameState.land.length) + gameState.dronePosition.x].isPlowed ? 'Plowed' : 'Unplowed'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 485,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 483,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 478,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 454,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ThreeDViewContainer, {\n      children: /*#__PURE__*/_jsxDEV(Game3D, {\n        gameState: gameState,\n        setGameState: setGameState\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 491,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 490,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(StyledConsoleContainer, {\n      children: /*#__PURE__*/_jsxDEV(JavaScriptConsole, {\n        gameState: gameState,\n        setGameState: setGameState\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 495,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 494,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 435,\n    columnNumber: 5\n  }, this);\n};\n_s(Game, \"wC69mw9N3NW5EHTtQcZbqbOx0o0=\", false, function () {\n  return [useNavigate];\n});\n_c14 = Game;\nexport default Game;\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7, _c8, _c9, _c10, _c11, _c12, _c13, _c14;\n$RefreshReg$(_c, \"GameHeader\");\n$RefreshReg$(_c2, \"GameInfo\");\n$RefreshReg$(_c3, \"InfoItem\");\n$RefreshReg$(_c4, \"GameGrid\");\n$RefreshReg$(_c5, \"LandTile\");\n$RefreshReg$(_c6, \"CropIndicator\");\n$RefreshReg$(_c7, \"StyledGameStats\");\n$RefreshReg$(_c8, \"StyledDroneSprite\");\n$RefreshReg$(_c9, \"GameContainer\");\n$RefreshReg$(_c10, \"GameGridContainer\");\n$RefreshReg$(_c11, \"ThreeDViewContainer\");\n$RefreshReg$(_c12, \"StyledConsoleContainer\");\n$RefreshReg$(_c13, \"TechTreeButton\");\n$RefreshReg$(_c14, \"Game\");","map":{"version":3,"names":["React","useState","useEffect","styled","useNavigate","JavaScriptConsole","TechTree","Game3D","jsxDEV","_jsxDEV","GameLayout","div","MainArea","GameHeader","_c","GameInfo","_c2","InfoItem","_c3","GameContent","GameScene","ConsoleArea","MoneyDisplay","GameGrid","props","size","_c4","LandTile","isPlowed","hasCrop","cropState","_c5","CropIndicator","color","_c6","StyledGameStats","_c7","ToolBar","ToolButton","button","selected","CropSelector","CropButton","CropIcon","span","StyledDroneSprite","_c8","ConsoleContainer","ConsoleTabs","ConsoleTab","active","AddConsoleButton","ConsoleWrapper","GameContainer","_c9","GameGridContainer","_c10","GameTitle","h1","GameCanvas","GameControls","Button","ThreeDViewContainer","_c11","StyledConsoleContainer","_c12","TechTreeButton","_c13","Game","inventory","setInventory","money","setMoney","onOpenTechTree","unlockedCrops","_s","navigate","gameState","setGameState","grid","Array","fill","map","wheat_seeds","corn_seeds","potato_seeds","wheat","corn","potato","dronePosition","x","y","droneInventory","land","cropType","drone","growthInterval","setInterval","prevState","newLand","hasChanges","forEach","tile","index","growthTime","currentTime","Date","now","elapsedTime","plantedTime","clearInterval","getCropColor","saveGame","localStorage","setItem","JSON","stringify","alert","loadGame","savedGame","getItem","parse","children","fileName","_jsxFileName","lineNumber","columnNumber","toLocaleString","Object","entries","filter","key","endsWith","length","onClick","Math","sqrt","floor","isDroneHere","_c14","$RefreshReg$"],"sources":["C:/Users/SPIDER/Downloads/Project/Demo GPT/Demo 1/src/components/Game.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport styled from 'styled-components';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport JavaScriptConsole from './JavaScriptConsole';\r\nimport TechTree from './TechTree';\r\nimport Game3D from './Game3D';\r\n\r\nconst GameLayout = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  height: 100vh;\r\n  background-color: #1a1a1a;\r\n  color: white;\r\n`;\r\n\r\nconst MainArea = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  flex-grow: 1;\r\n  padding: 20px;\r\n  gap: 20px;\r\n`;\r\n\r\nconst GameHeader = styled.div`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  padding: 10px;\r\n  background-color: #2c3e50;\r\n  border-radius: 5px;\r\n`;\r\n\r\nconst GameInfo = styled.div`\r\n  display: flex;\r\n  gap: 20px;\r\n`;\r\n\r\nconst InfoItem = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 5px;\r\n`;\r\n\r\nconst GameContent = styled.div`\r\n  display: flex;\r\n  gap: 20px;\r\n  width: 100%;\r\n  max-width: 1200px;\r\n  height: calc(100vh - 100px);\r\n`;\r\n\r\nconst GameScene = styled.div`\r\n  flex-grow: 1;\r\n  background-color: #2c3e50;\r\n  border-radius: 5px;\r\n  overflow: hidden;\r\n  height: 500px;\r\n`;\r\n\r\nconst ConsoleArea = styled.div`\r\n  width: 400px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 10px;\r\n`;\r\n\r\nconst MoneyDisplay = styled.div`\r\n  font-size: 1.5em;\r\n  font-weight: bold;\r\n  color: #f1c40f;\r\n  text-align: center;\r\n  padding: 10px;\r\n  background-color: #34495e;\r\n  border-radius: 5px;\r\n`;\r\n\r\nconst GameGrid = styled.div`\r\n  display: grid;\r\n  grid-template-columns: repeat(${props => props.size}, 1fr);\r\n  grid-template-rows: repeat(${props => props.size}, 1fr);\r\n  gap: 5px;\r\n  width: 300px;\r\n  height: 300px;\r\n  background-color: #8B4513;\r\n  padding: 10px;\r\n  border-radius: 5px;\r\n`;\r\n\r\nconst LandTile = styled.div`\r\n  width: 100%;\r\n  aspect-ratio: 1;\r\n  background-color: ${props => {\r\n    if (props.isPlowed) return '#8B4513';\r\n    if (props.hasCrop && props.cropState === 'growing') return '#90EE90';\r\n    if (props.hasCrop && props.cropState === 'ready') return '#228B22';\r\n    return '#90EE90';\r\n  }};\r\n  border: 1px solid #2c3e50;\r\n  cursor: pointer;\r\n  position: relative;\r\n  transition: all 0.3s ease;\r\n\r\n  &:hover {\r\n    transform: scale(1.05);\r\n  }\r\n`;\r\n\r\nconst CropIndicator = styled.div`\r\n  position: absolute;\r\n  top: 50%;\r\n  left: 50%;\r\n  transform: translate(-50%, -50%);\r\n  width: 80%;\r\n  height: 80%;\r\n  background-color: ${props => props.color};\r\n  border-radius: 50%;\r\n`;\r\n\r\nconst StyledGameStats = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 12px;\r\n  padding: 16px;\r\n  background: #232323;\r\n  border-radius: 8px;\r\n  font-size: 14px;\r\n  color: #E0E0E0;\r\n\r\n  div {\r\n    display: flex;\r\n    justify-content: space-between;\r\n    padding: 8px;\r\n    background: rgba(255, 255, 255, 0.05);\r\n    border-radius: 4px;\r\n  }\r\n`;\r\n\r\nconst ToolBar = styled.div`\r\n  display: flex;\r\n  margin-bottom: 20px;\r\n  flex-wrap: wrap;\r\n`;\r\n\r\nconst ToolButton = styled.button`\r\n  background-color: ${props => props.selected ? '#2980b9' : '#3498db'};\r\n  border: ${props => props.selected ? '2px solid #fff' : 'none'};\r\n  padding: ${props => props.selected ? '6px 14px' : '8px 16px'};\r\n`;\r\n\r\nconst CropSelector = styled.div`\r\n  margin-top: 10px;\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n`;\r\n\r\nconst CropButton = styled.button`\r\n  background-color: ${props => props.selected ? '#27ae60' : '#2ecc71'};\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n  \r\n  &:disabled {\r\n    background-color: #95a5a6;\r\n    cursor: not-allowed;\r\n  }\r\n`;\r\n\r\nconst CropIcon = styled.span`\r\n  display: inline-block;\r\n  width: 12px;\r\n  height: 12px;\r\n  border-radius: 50%;\r\n  background-color: ${props => props.color};\r\n  margin-right: 5px;\r\n`;\r\n\r\nconst StyledDroneSprite = styled.div`\r\n  position: absolute;\r\n  top: 50%;\r\n  left: 50%;\r\n  width: 60%;\r\n  height: 60%;\r\n  transform: translate(-50%, -50%);\r\n  z-index: 2;\r\n  filter: drop-shadow(0 2px 4px rgba(0, 0, 0, 0.3));\r\n  \r\n  &::before {\r\n    content: 'ðŸ›¸';\r\n    position: absolute;\r\n    top: 50%;\r\n    left: 50%;\r\n    transform: translate(-50%, -50%);\r\n    font-size: 24px;\r\n  }\r\n`;\r\n\r\nconst ConsoleContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 10px;\r\n  height: 100%;\r\n`;\r\n\r\nconst ConsoleTabs = styled.div`\r\n  display: flex;\r\n  gap: 5px;\r\n  margin-bottom: 10px;\r\n`;\r\n\r\nconst ConsoleTab = styled.button`\r\n  background-color: ${props => props.active ? '#3498db' : '#2c3e50'};\r\n  color: white;\r\n  border: none;\r\n  padding: 5px 10px;\r\n  border-radius: 3px;\r\n  cursor: pointer;\r\n  \r\n  &:hover {\r\n    background-color: ${props => props.active ? '#2980b9' : '#34495e'};\r\n  }\r\n`;\r\n\r\nconst AddConsoleButton = styled.button`\r\n  background-color: #27ae60;\r\n  color: white;\r\n  border: none;\r\n  padding: 5px 10px;\r\n  border-radius: 3px;\r\n  cursor: pointer;\r\n  \r\n  &:hover {\r\n    background-color: #219653;\r\n  }\r\n`;\r\n\r\nconst ConsoleWrapper = styled.div`\r\n  display: ${props => props.active ? 'block' : 'none'};\r\n  height: 100%;\r\n`;\r\n\r\nconst GameContainer = styled.div`\r\n  display: grid;\r\n  grid-template-areas:\r\n    \"header header header\"\r\n    \"grid view console\";\r\n  grid-template-columns: minmax(300px, 25%) minmax(400px, 45%) minmax(300px, 30%);\r\n  grid-template-rows: 60px 1fr;\r\n  gap: 16px;\r\n  padding: 16px;\r\n  height: 100vh;\r\n  background-color: #1E1E1E;\r\n  box-sizing: border-box;\r\n`;\r\n\r\nconst GameGridContainer = styled.div`\r\n  grid-area: grid;\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 16px;\r\n  background: #2A2A2A;\r\n  border-radius: 12px;\r\n  padding: 20px;\r\n  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\r\n`;\r\n\r\nconst GameTitle = styled.h1`\r\n  color: #2c3e50;\r\n  margin: 0;\r\n`;\r\n\r\nconst GameCanvas = styled.div`\r\n  flex: 1;\r\n  height: 600px;\r\n  background-color: white;\r\n  border-radius: 5px;\r\n  box-shadow: 0 2px 4px rgba(0,0,0,0.1);\r\n  position: relative;\r\n`;\r\n\r\nconst GameControls = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 10px;\r\n  width: 300px;\r\n`;\r\n\r\nconst Button = styled.button`\r\n  padding: 10px 15px;\r\n  background-color: #3498db;\r\n  color: white;\r\n  border: none;\r\n  border-radius: 5px;\r\n  cursor: pointer;\r\n  font-size: 16px;\r\n  transition: background-color 0.2s;\r\n\r\n  &:hover {\r\n    background-color: #2980b9;\r\n  }\r\n`;\r\n\r\nconst ThreeDViewContainer = styled.div`\r\n  grid-area: view;\r\n  background: #2A2A2A;\r\n  border-radius: 12px;\r\n  overflow: hidden;\r\n  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\r\n`;\r\n\r\nconst StyledConsoleContainer = styled.div`\r\n  grid-area: console;\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 16px;\r\n  background: #2A2A2A;\r\n  border-radius: 12px;\r\n  padding: 20px;\r\n  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\r\n`;\r\n\r\nconst TechTreeButton = styled.button`\r\n  padding: 8px 16px;\r\n  background: linear-gradient(180deg, #3498DB 0%, #2980B9 100%);\r\n  border: none;\r\n  border-radius: 6px;\r\n  color: white;\r\n  font-weight: 500;\r\n  cursor: pointer;\r\n  transition: all 0.2s ease;\r\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\r\n\r\n  &:hover {\r\n    transform: translateY(-1px);\r\n    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.2);\r\n  }\r\n`;\r\n\r\nexport const Game = ({ inventory, setInventory, money, setMoney, onOpenTechTree, unlockedCrops }) => {\r\n  const navigate = useNavigate();\r\n  const [gameState, setGameState] = useState({\r\n    grid: Array(1).fill().map(() => Array(1).fill(null)),\r\n    money: money,\r\n    inventory: {\r\n      wheat_seeds: 5,  // Start with some wheat seeds\r\n      corn_seeds: 0,   // No corn seeds initially\r\n      potato_seeds: 0, // No potato seeds initially\r\n      wheat: 0,\r\n      corn: 0,\r\n      potato: 0\r\n    },\r\n    dronePosition: { x: 0, y: 0 },\r\n    droneInventory: [],\r\n    land: Array(1).fill().map(() => ({\r\n      isPlowed: false,\r\n      hasCrop: false,\r\n      cropType: null,\r\n      cropState: null\r\n    })),\r\n    drone: {\r\n      x: 0,\r\n      y: 0\r\n    },\r\n    unlockedCrops: ['wheat']  // Only wheat is unlocked initially\r\n  });\r\n\r\n  // Add crop growth system\r\n  useEffect(() => {\r\n    const growthInterval = setInterval(() => {\r\n      setGameState(prevState => {\r\n        const newLand = [...prevState.land];\r\n        let hasChanges = false;\r\n\r\n        newLand.forEach((tile, index) => {\r\n          if (tile.hasCrop && tile.cropState === 'growing') {\r\n            const growthTime = {\r\n              wheat: 1000,   // 1 second for wheat\r\n              corn: 2000,    // 2 seconds for corn\r\n              potato: 3000   // 3 seconds for potato\r\n            };\r\n\r\n            const currentTime = Date.now();\r\n            const elapsedTime = currentTime - tile.plantedTime;\r\n\r\n            if (elapsedTime >= growthTime[tile.cropType]) {\r\n              newLand[index] = {\r\n                ...tile,\r\n                cropState: 'ready'\r\n              };\r\n              hasChanges = true;\r\n            }\r\n          }\r\n        });\r\n\r\n        return hasChanges ? { ...prevState, land: newLand } : prevState;\r\n      });\r\n    }, 1000); // Check every second\r\n\r\n    return () => clearInterval(growthInterval);\r\n  }, []);\r\n\r\n  // Add visual feedback for crop state\r\n  const getCropColor = (cropType, cropState) => {\r\n    if (cropState === 'growing') {\r\n      return {\r\n        wheat: '#F4D03F80',  // Semi-transparent yellow\r\n        corn: '#F39C1280',   // Semi-transparent orange\r\n        potato: '#93511680'  // Semi-transparent brown\r\n      }[cropType] || '#90EE90';\r\n    } else if (cropState === 'ready') {\r\n      return {\r\n        wheat: '#F4D03F',  // Bright yellow\r\n        corn: '#F39C12',   // Bright orange\r\n        potato: '#935116'  // Rich brown\r\n      }[cropType] || '#228B22';\r\n    }\r\n    return '#90EE90';\r\n  };\r\n\r\n  const saveGame = () => {\r\n    localStorage.setItem('farmGame', JSON.stringify(gameState));\r\n    alert('Game saved!');\r\n  };\r\n\r\n  const loadGame = () => {\r\n    const savedGame = localStorage.getItem('farmGame');\r\n    if (savedGame) {\r\n      setGameState(JSON.parse(savedGame));\r\n      alert('Game loaded!');\r\n    } else {\r\n      alert('No saved game found!');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <GameContainer>\r\n      <GameHeader>\r\n        <GameInfo>\r\n          <InfoItem>\r\n            <span>ðŸ’°</span>\r\n            <span>${money.toLocaleString()}</span>\r\n          </InfoItem>\r\n          <InfoItem>\r\n            <span>ðŸŒ±</span>\r\n            <span>{Object.entries(inventory).filter(([key]) => key.endsWith('_seeds')).length} Seeds</span>\r\n          </InfoItem>\r\n          <InfoItem>\r\n            <span>ðŸŒ¾</span>\r\n            <span>{Object.entries(inventory).filter(([key]) => !key.endsWith('_seeds')).length} Crops</span>\r\n          </InfoItem>\r\n        </GameInfo>\r\n        <TechTreeButton onClick={onOpenTechTree}>Tech Tree</TechTreeButton>\r\n      </GameHeader>\r\n      \r\n      <GameGridContainer>\r\n        <GameGrid size={Math.sqrt(gameState.land.length)}>\r\n          {gameState.land.map((tile, index) => {\r\n            const x = Math.floor(index / Math.sqrt(gameState.land.length));\r\n            const y = index % Math.sqrt(gameState.land.length);\r\n            const isDroneHere = gameState.dronePosition.x === x && gameState.dronePosition.y === y;\r\n            \r\n            return (\r\n              <LandTile \r\n                key={index}\r\n                isPlowed={tile.isPlowed}\r\n                hasCrop={tile.hasCrop}\r\n                cropState={tile.cropState}\r\n              >\r\n                {tile.hasCrop && (\r\n                  <CropIndicator \r\n                    color={getCropColor(tile.cropType, tile.cropState)}\r\n                  />\r\n                )}\r\n                {isDroneHere && <StyledDroneSprite />}\r\n              </LandTile>\r\n            );\r\n          })}\r\n        </GameGrid>\r\n        <StyledGameStats>\r\n          <div>\r\n            <span>Drone Position:</span>\r\n            <span>({gameState.dronePosition.x}, {gameState.dronePosition.y})</span>\r\n          </div>\r\n          <div>\r\n            <span>Status:</span>\r\n            <span>{gameState.land[gameState.dronePosition.y * Math.sqrt(gameState.land.length) + gameState.dronePosition.x].isPlowed ? 'Plowed' : 'Unplowed'}</span>\r\n          </div>\r\n        </StyledGameStats>\r\n      </GameGridContainer>\r\n      \r\n      <ThreeDViewContainer>\r\n        <Game3D gameState={gameState} setGameState={setGameState} />\r\n      </ThreeDViewContainer>\r\n      \r\n      <StyledConsoleContainer>\r\n        <JavaScriptConsole gameState={gameState} setGameState={setGameState} />\r\n      </StyledConsoleContainer>\r\n    </GameContainer>\r\n  );\r\n};\r\n\r\nexport default Game; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}