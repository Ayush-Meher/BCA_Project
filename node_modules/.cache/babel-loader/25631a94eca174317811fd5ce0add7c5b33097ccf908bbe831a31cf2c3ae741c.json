{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\SPIDER\\\\Downloads\\\\Project\\\\Demo GPT\\\\Demo 1\\\\src\\\\components\\\\Farm3D.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { useRef, useState } from 'react';\nimport { Canvas, useFrame } from '@react-three/fiber';\nimport { OrbitControls, Environment, Sky } from '@react-three/drei';\nimport * as THREE from 'three';\n\n// 3D Farm component\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Farm3D = ({\n  farmState\n}) => {\n  return /*#__PURE__*/_jsxDEV(Canvas, {\n    camera: {\n      position: [10, 10, 10],\n      fov: 50\n    },\n    style: {\n      width: '100%',\n      height: '100%'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"ambientLight\", {\n      intensity: 0.5\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"directionalLight\", {\n      position: [10, 10, 5],\n      intensity: 1\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Sky, {\n      sunPosition: [100, 10, 100]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Environment, {\n      preset: \"sunset\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(OrbitControls, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"mesh\", {\n      rotation: [-Math.PI / 2, 0, 0],\n      position: [0, -0.5, 0],\n      children: [/*#__PURE__*/_jsxDEV(\"planeGeometry\", {\n        args: [20, 20]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"meshStandardMaterial\", {\n        color: \"#4CAF50\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 7\n    }, this), farmState.grid.map((row, x) => row.map((cell, z) => /*#__PURE__*/_jsxDEV(Plot, {\n      position: [x - 5, 0, z - 5],\n      cell: cell\n    }, `${x}-${z}`, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 11\n    }, this))), farmState.dronePosition && /*#__PURE__*/_jsxDEV(Drone, {\n      position: [farmState.dronePosition.x - 5, 1, farmState.dronePosition.y - 5]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 9,\n    columnNumber: 5\n  }, this);\n};\n\n// Plot component for each farm cell\n_c = Farm3D;\nconst Plot = ({\n  position,\n  cell\n}) => {\n  _s();\n  const meshRef = useRef();\n  return /*#__PURE__*/_jsxDEV(\"mesh\", {\n    position: position,\n    ref: meshRef,\n    children: [/*#__PURE__*/_jsxDEV(\"boxGeometry\", {\n      args: [1, 0.1, 1]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"meshStandardMaterial\", {\n      color: cell.crop ? getCropColor(cell.crop) : '#8B4513'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }, this);\n};\n\n// Drone component\n_s(Plot, \"e4CAwo/q3Mh5N9nuIOzG1d1uu5c=\");\n_c2 = Plot;\nconst Drone = ({\n  position\n}) => {\n  _s2();\n  const meshRef = useRef();\n  useFrame(state => {\n    if (meshRef.current) {\n      meshRef.current.rotation.y += 0.01;\n      meshRef.current.position.y = position[1] + Math.sin(state.clock.elapsedTime) * 0.2;\n    }\n  });\n  return /*#__PURE__*/_jsxDEV(\"group\", {\n    position: position,\n    children: [/*#__PURE__*/_jsxDEV(\"mesh\", {\n      ref: meshRef,\n      children: [/*#__PURE__*/_jsxDEV(\"boxGeometry\", {\n        args: [0.5, 0.2, 0.5]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"meshStandardMaterial\", {\n        color: \"#2196F3\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"mesh\", {\n      position: [0, 0.2, 0],\n      children: [/*#__PURE__*/_jsxDEV(\"boxGeometry\", {\n        args: [0.8, 0.1, 0.8]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"meshStandardMaterial\", {\n        color: \"#1976D2\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 5\n  }, this);\n};\n\n// Helper function to get crop colors\n_s2(Drone, \"/vg1AmA8+P3+Fj0/y210JTVKtL0=\", false, function () {\n  return [useFrame];\n});\n_c3 = Drone;\nconst getCropColor = crop => {\n  const colors = {\n    wheat: '#FFD700',\n    corn: '#FFA500',\n    potato: '#A0522D',\n    carrot: '#FF4500'\n  };\n  return colors[crop] || '#FFFFFF';\n};\nexport default Farm3D;\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"Farm3D\");\n$RefreshReg$(_c2, \"Plot\");\n$RefreshReg$(_c3, \"Drone\");","map":{"version":3,"names":["React","useRef","useState","Canvas","useFrame","OrbitControls","Environment","Sky","THREE","jsxDEV","_jsxDEV","Farm3D","farmState","camera","position","fov","style","width","height","children","intensity","fileName","_jsxFileName","lineNumber","columnNumber","sunPosition","preset","rotation","Math","PI","args","color","grid","map","row","x","cell","z","Plot","dronePosition","Drone","y","_c","_s","meshRef","ref","crop","getCropColor","_c2","_s2","state","current","sin","clock","elapsedTime","_c3","colors","wheat","corn","potato","carrot","$RefreshReg$"],"sources":["C:/Users/SPIDER/Downloads/Project/Demo GPT/Demo 1/src/components/Farm3D.js"],"sourcesContent":["import React, { useRef, useState } from 'react';\r\nimport { Canvas, useFrame } from '@react-three/fiber';\r\nimport { OrbitControls, Environment, Sky } from '@react-three/drei';\r\nimport * as THREE from 'three';\r\n\r\n// 3D Farm component\r\nconst Farm3D = ({ farmState }) => {\r\n  return (\r\n    <Canvas\r\n      camera={{ position: [10, 10, 10], fov: 50 }}\r\n      style={{ width: '100%', height: '100%' }}\r\n    >\r\n      <ambientLight intensity={0.5} />\r\n      <directionalLight position={[10, 10, 5]} intensity={1} />\r\n      <Sky sunPosition={[100, 10, 100]} />\r\n      <Environment preset=\"sunset\" />\r\n      <OrbitControls />\r\n      \r\n      {/* Ground */}\r\n      <mesh rotation={[-Math.PI / 2, 0, 0]} position={[0, -0.5, 0]}>\r\n        <planeGeometry args={[20, 20]} />\r\n        <meshStandardMaterial color=\"#4CAF50\" />\r\n      </mesh>\r\n\r\n      {/* Farm grid */}\r\n      {farmState.grid.map((row, x) =>\r\n        row.map((cell, z) => (\r\n          <Plot key={`${x}-${z}`} position={[x - 5, 0, z - 5]} cell={cell} />\r\n        ))\r\n      )}\r\n\r\n      {/* Drone */}\r\n      {farmState.dronePosition && (\r\n        <Drone position={[\r\n          farmState.dronePosition.x - 5,\r\n          1,\r\n          farmState.dronePosition.y - 5\r\n        ]} />\r\n      )}\r\n    </Canvas>\r\n  );\r\n};\r\n\r\n// Plot component for each farm cell\r\nconst Plot = ({ position, cell }) => {\r\n  const meshRef = useRef();\r\n  \r\n  return (\r\n    <mesh position={position} ref={meshRef}>\r\n      <boxGeometry args={[1, 0.1, 1]} />\r\n      <meshStandardMaterial \r\n        color={cell.crop ? getCropColor(cell.crop) : '#8B4513'} \r\n      />\r\n    </mesh>\r\n  );\r\n};\r\n\r\n// Drone component\r\nconst Drone = ({ position }) => {\r\n  const meshRef = useRef();\r\n  \r\n  useFrame((state) => {\r\n    if (meshRef.current) {\r\n      meshRef.current.rotation.y += 0.01;\r\n      meshRef.current.position.y = position[1] + Math.sin(state.clock.elapsedTime) * 0.2;\r\n    }\r\n  });\r\n\r\n  return (\r\n    <group position={position}>\r\n      <mesh ref={meshRef}>\r\n        <boxGeometry args={[0.5, 0.2, 0.5]} />\r\n        <meshStandardMaterial color=\"#2196F3\" />\r\n      </mesh>\r\n      <mesh position={[0, 0.2, 0]}>\r\n        <boxGeometry args={[0.8, 0.1, 0.8]} />\r\n        <meshStandardMaterial color=\"#1976D2\" />\r\n      </mesh>\r\n    </group>\r\n  );\r\n};\r\n\r\n// Helper function to get crop colors\r\nconst getCropColor = (crop) => {\r\n  const colors = {\r\n    wheat: '#FFD700',\r\n    corn: '#FFA500',\r\n    potato: '#A0522D',\r\n    carrot: '#FF4500'\r\n  };\r\n  return colors[crop] || '#FFFFFF';\r\n};\r\n\r\nexport default Farm3D; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}