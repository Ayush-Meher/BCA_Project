{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\SPIDER\\\\Downloads\\\\Project\\\\Demo GPT\\\\Demo 1\\\\src\\\\components\\\\Game.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport styled from 'styled-components';\nimport Instructions from './Instructions';\nimport JavaScriptConsole from './JavaScriptConsole';\nimport TechTree from './TechTree';\nimport Game3D from './Game3D';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GameLayout = styled.div`\n  display: flex;\n  flex-direction: column;\n  height: 100vh;\n  background-color: #1a1a1a;\n  color: white;\n`;\n_c = GameLayout;\nconst MainArea = styled.div`\n  display: flex;\n  flex-direction: column;\n  flex-grow: 1;\n  padding: 20px;\n  gap: 20px;\n`;\n_c2 = MainArea;\nconst GameHeader = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding: 10px;\n  background-color: #2c3e50;\n  border-radius: 5px;\n`;\n_c3 = GameHeader;\nconst GameInfo = styled.div`\n  display: flex;\n  gap: 20px;\n`;\n_c4 = GameInfo;\nconst InfoItem = styled.div`\n  display: flex;\n  align-items: center;\n  gap: 5px;\n`;\n_c5 = InfoItem;\nconst GameContent = styled.div`\n  display: flex;\n  flex-grow: 1;\n  gap: 20px;\n`;\n_c6 = GameContent;\nconst GameScene = styled.div`\n  flex-grow: 1;\n  background-color: #2c3e50;\n  border-radius: 5px;\n  overflow: hidden;\n  height: 500px;\n`;\n_c7 = GameScene;\nconst ConsoleArea = styled.div`\n  width: 400px;\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n`;\n_c8 = ConsoleArea;\nconst MoneyDisplay = styled.div`\n  font-size: 1.5em;\n  font-weight: bold;\n  color: #f1c40f;\n  text-align: center;\n  padding: 10px;\n  background-color: #34495e;\n  border-radius: 5px;\n`;\nconst GameGrid = styled.div`\n  display: grid;\n  grid-template-columns: repeat(${props => props.size}, 1fr);\n  gap: 10px;\n  width: 90%;\n  max-width: 700px;\n  margin: 0 auto;\n`;\nconst LandTile = styled.div`\n  width: 100%;\n  aspect-ratio: 1;\n  background-color: ${props => {\n  if (props.isPlowed) return '#8B4513';\n  if (props.hasCrop && props.cropState === 'growing') return '#90EE90';\n  if (props.hasCrop && props.cropState === 'ready') return '#228B22';\n  return '#90EE90';\n}};\n  border: 1px solid #2c3e50;\n  cursor: pointer;\n  position: relative;\n  transition: all 0.3s ease;\n\n  &:hover {\n    transform: scale(1.05);\n  }\n`;\nconst CropIndicator = styled.div`\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  width: 80%;\n  height: 80%;\n  background-color: ${props => props.color};\n  border-radius: 50%;\n`;\nconst GameStats = styled.div`\n  position: fixed;\n  top: 20px;\n  right: 320px;\n  background-color: rgba(52, 73, 94, 0.9);\n  padding: 10px;\n  border-radius: 5px;\n`;\nconst ToolBar = styled.div`\n  display: flex;\n  margin-bottom: 20px;\n  flex-wrap: wrap;\n`;\nconst ToolButton = styled.button`\n  background-color: ${props => props.selected ? '#2980b9' : '#3498db'};\n  border: ${props => props.selected ? '2px solid #fff' : 'none'};\n  padding: ${props => props.selected ? '6px 14px' : '8px 16px'};\n`;\nconst CropSelector = styled.div`\n  margin-top: 10px;\n  display: flex;\n  flex-wrap: wrap;\n`;\nconst CropButton = styled.button`\n  background-color: ${props => props.selected ? '#27ae60' : '#2ecc71'};\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  \n  &:disabled {\n    background-color: #95a5a6;\n    cursor: not-allowed;\n  }\n`;\nconst CropIcon = styled.span`\n  display: inline-block;\n  width: 12px;\n  height: 12px;\n  border-radius: 50%;\n  background-color: ${props => props.color};\n  margin-right: 5px;\n`;\nconst DroneSprite = styled.div`\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  width: 40%;\n  height: 40%;\n  background-color: #3498db;\n  border-radius: 50%;\n  transform: translate(-50%, -50%);\n  transition: all 0.3s ease;\n  z-index: 2;\n  \n  &::before {\n    content: 'ðŸ›¸';\n    position: absolute;\n    top: 50%;\n    left: 50%;\n    transform: translate(-50%, -50%);\n    font-size: 20px;\n  }\n`;\nconst ConsoleContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  height: 100%;\n`;\nconst ConsoleTabs = styled.div`\n  display: flex;\n  gap: 5px;\n  margin-bottom: 10px;\n`;\nconst ConsoleTab = styled.button`\n  background-color: ${props => props.active ? '#3498db' : '#2c3e50'};\n  color: white;\n  border: none;\n  padding: 5px 10px;\n  border-radius: 3px;\n  cursor: pointer;\n  \n  &:hover {\n    background-color: ${props => props.active ? '#2980b9' : '#34495e'};\n  }\n`;\nconst AddConsoleButton = styled.button`\n  background-color: #27ae60;\n  color: white;\n  border: none;\n  padding: 5px 10px;\n  border-radius: 3px;\n  cursor: pointer;\n  \n  &:hover {\n    background-color: #219653;\n  }\n`;\nconst ConsoleWrapper = styled.div`\n  display: ${props => props.active ? 'block' : 'none'};\n  height: 100%;\n`;\nfunction Game({\n  inventory,\n  setInventory,\n  money,\n  setMoney,\n  onOpenTechTree,\n  unlockedCrops\n}) {\n  _s();\n  const [gridSize, setGridSize] = useState(1);\n  const [land, setLand] = useState(Array(1).fill(null).map(() => ({\n    isPlowed: false,\n    hasCrop: false,\n    cropType: null,\n    cropState: null,\n    plantedTime: null\n  })));\n  const [selectedTool, setSelectedTool] = useState('plow');\n  const [selectedCrop, setSelectedCrop] = useState('wheat');\n  const [showInstructions, setShowInstructions] = useState(false);\n\n  // Add drone state\n  const [dronePosition, setDronePosition] = useState({\n    x: 0,\n    y: 0\n  });\n  const [droneInventory, setDroneInventory] = useState({});\n\n  // Add console management state\n  const [consoles, setConsoles] = useState([{\n    id: 1,\n    name: 'Console 1'\n  }]);\n  const [activeConsole, setActiveConsole] = useState(1);\n\n  // Crop growth timer\n  useEffect(() => {\n    const growthInterval = setInterval(() => {\n      let updated = false;\n      const newLand = [...land];\n      newLand.forEach((tile, index) => {\n        if (tile.hasCrop && tile.cropState === 'growing' && tile.plantedTime) {\n          const now = Date.now();\n          const growthTime = 10000; // 10 seconds for growth\n\n          if (now - tile.plantedTime > growthTime) {\n            newLand[index] = {\n              ...tile,\n              cropState: 'ready'\n            };\n            updated = true;\n          }\n        }\n      });\n      if (updated) {\n        setLand(newLand);\n      }\n    }, 1000);\n    return () => clearInterval(growthInterval);\n  }, [land]);\n  const cropColors = {\n    wheat: '#f1c40f',\n    corn: '#f39c12',\n    potato: '#d35400',\n    carrots: '#e67e22',\n    sunflowers: '#f1c40f',\n    pumpkins: '#e67e22'\n  };\n  const gameState = {\n    money,\n    inventory,\n    land,\n    selectedTool,\n    selectedCrop,\n    drone: {\n      x: dronePosition.x,\n      y: dronePosition.y,\n      inventory: droneInventory\n    }\n  };\n  const setGameState = newState => {\n    if (typeof newState === 'function') {\n      const updatedState = newState({\n        money,\n        inventory,\n        land,\n        drone: {\n          x: dronePosition.x,\n          y: dronePosition.y,\n          inventory: droneInventory\n        }\n      });\n      setMoney(updatedState.money);\n      setInventory(updatedState.inventory);\n      setLand(updatedState.land);\n      if (updatedState.drone) {\n        setDronePosition({\n          x: updatedState.drone.x,\n          y: updatedState.drone.y\n        });\n        setDroneInventory(updatedState.drone.inventory);\n      }\n    } else {\n      setMoney(newState.money);\n      setInventory(newState.inventory);\n      setLand(newState.land);\n      if (newState.drone) {\n        setDronePosition({\n          x: newState.drone.x,\n          y: newState.drone.y\n        });\n        setDroneInventory(newState.drone.inventory);\n      }\n    }\n  };\n  const handleTileClick = index => {\n    const x = index % gridSize;\n    const y = Math.floor(index / gridSize);\n    const tile = land[index];\n    switch (selectedTool) {\n      case 'plow':\n        if (!tile.isPlowed && !tile.hasCrop) {\n          const newLand = [...land];\n          newLand[index] = {\n            ...tile,\n            isPlowed: true\n          };\n          setLand(newLand);\n        }\n        break;\n      case 'plant':\n        if (tile.isPlowed && !tile.hasCrop) {\n          const newLand = [...land];\n          newLand[index] = {\n            ...tile,\n            hasCrop: true,\n            cropType: selectedCrop,\n            cropState: 'growing',\n            plantedTime: Date.now()\n          };\n          setLand(newLand);\n        }\n        break;\n      case 'harvest':\n        if (tile.hasCrop && tile.cropState === 'ready') {\n          const newLand = [...land];\n          newLand[index] = {\n            ...tile,\n            hasCrop: false,\n            cropType: null,\n            cropState: null,\n            plantedTime: null\n          };\n          setLand(newLand);\n          setInventory({\n            ...inventory,\n            [tile.cropType]: (inventory[tile.cropType] || 0) + 1\n          });\n        }\n        break;\n      default:\n        break;\n    }\n  };\n  const sellAllCrops = () => {\n    const prices = {\n      wheat: 20,\n      corn: 30,\n      potato: 40\n    };\n    let totalEarnings = 0;\n    const newInventory = {\n      ...inventory\n    };\n    Object.entries(inventory).forEach(([crop, amount]) => {\n      if (prices[crop]) {\n        totalEarnings += prices[crop] * amount;\n        newInventory[crop] = 0;\n      }\n    });\n    setMoney(money + totalEarnings);\n    setInventory(newInventory);\n  };\n  const handleTechUnlock = techId => {\n    if (techId === 'expand') {\n      // Handle farm expansion\n      if (gridSize < 5) {\n        const newSize = gridSize + 1;\n        const newLand = Array(newSize * newSize).fill(null).map((_, index) => {\n          if (index < land.length) {\n            return land[index];\n          }\n          return {\n            isPlowed: false,\n            hasCrop: false,\n            cropType: null,\n            cropState: null,\n            plantedTime: null\n          };\n        });\n        setGridSize(newSize);\n        setLand(newLand);\n      }\n    }\n    // Add other tech effects here\n  };\n  const addConsole = () => {\n    const newId = consoles.length + 1;\n    setConsoles([...consoles, {\n      id: newId,\n      name: `Console ${newId}`\n    }]);\n    setActiveConsole(newId);\n  };\n  const removeConsole = id => {\n    if (consoles.length > 1) {\n      const newConsoles = consoles.filter(console => console.id !== id);\n      setConsoles(newConsoles);\n      if (activeConsole === id) {\n        setActiveConsole(newConsoles[0].id);\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(GameLayout, {\n    children: /*#__PURE__*/_jsxDEV(MainArea, {\n      children: [/*#__PURE__*/_jsxDEV(GameHeader, {\n        children: [/*#__PURE__*/_jsxDEV(GameInfo, {\n          children: [/*#__PURE__*/_jsxDEV(InfoItem, {\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              children: \"\\uD83D\\uDCB0\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 448,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              children: [\"$\", money]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 449,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 447,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(InfoItem, {\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              children: \"\\uD83C\\uDF31\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 452,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              children: [\"Seeds: \", Object.entries(inventory).filter(([key]) => key.endsWith('_seeds')).length]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 453,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 451,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(InfoItem, {\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              children: \"\\uD83C\\uDF3E\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 456,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              children: [\"Crops: \", Object.entries(inventory).filter(([key]) => !key.endsWith('_seeds')).length]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 457,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 455,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 446,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: onOpenTechTree,\n          children: \"Tech Tree\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 460,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 445,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(GameContent, {\n        children: [/*#__PURE__*/_jsxDEV(GameScene, {\n          children: /*#__PURE__*/_jsxDEV(Game3D, {\n            gameState: gameState,\n            setGameState: setGameState\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 465,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 464,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(ConsoleArea, {\n          children: /*#__PURE__*/_jsxDEV(JavaScriptConsole, {\n            gameState: gameState,\n            setGameState: setGameState\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 469,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 468,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 463,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 444,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 443,\n    columnNumber: 5\n  }, this);\n}\n_s(Game, \"BupSdjrkF/nN23bs5D3g+wDW3QU=\");\n_c9 = Game;\nexport default Game;\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7, _c8, _c9;\n$RefreshReg$(_c, \"GameLayout\");\n$RefreshReg$(_c2, \"MainArea\");\n$RefreshReg$(_c3, \"GameHeader\");\n$RefreshReg$(_c4, \"GameInfo\");\n$RefreshReg$(_c5, \"InfoItem\");\n$RefreshReg$(_c6, \"GameContent\");\n$RefreshReg$(_c7, \"GameScene\");\n$RefreshReg$(_c8, \"ConsoleArea\");\n$RefreshReg$(_c9, \"Game\");","map":{"version":3,"names":["React","useState","useEffect","styled","Instructions","JavaScriptConsole","TechTree","Game3D","jsxDEV","_jsxDEV","GameLayout","div","_c","MainArea","_c2","GameHeader","_c3","GameInfo","_c4","InfoItem","_c5","GameContent","_c6","GameScene","_c7","ConsoleArea","_c8","MoneyDisplay","GameGrid","props","size","LandTile","isPlowed","hasCrop","cropState","CropIndicator","color","GameStats","ToolBar","ToolButton","button","selected","CropSelector","CropButton","CropIcon","span","DroneSprite","ConsoleContainer","ConsoleTabs","ConsoleTab","active","AddConsoleButton","ConsoleWrapper","Game","inventory","setInventory","money","setMoney","onOpenTechTree","unlockedCrops","_s","gridSize","setGridSize","land","setLand","Array","fill","map","cropType","plantedTime","selectedTool","setSelectedTool","selectedCrop","setSelectedCrop","showInstructions","setShowInstructions","dronePosition","setDronePosition","x","y","droneInventory","setDroneInventory","consoles","setConsoles","id","name","activeConsole","setActiveConsole","growthInterval","setInterval","updated","newLand","forEach","tile","index","now","Date","growthTime","clearInterval","cropColors","wheat","corn","potato","carrots","sunflowers","pumpkins","gameState","drone","setGameState","newState","updatedState","handleTileClick","Math","floor","sellAllCrops","prices","totalEarnings","newInventory","Object","entries","crop","amount","handleTechUnlock","techId","newSize","_","length","addConsole","newId","removeConsole","newConsoles","filter","console","children","fileName","_jsxFileName","lineNumber","columnNumber","key","endsWith","onClick","_c9","$RefreshReg$"],"sources":["C:/Users/SPIDER/Downloads/Project/Demo GPT/Demo 1/src/components/Game.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport styled from 'styled-components';\r\nimport Instructions from './Instructions';\r\nimport JavaScriptConsole from './JavaScriptConsole';\r\nimport TechTree from './TechTree';\r\nimport Game3D from './Game3D';\r\n\r\nconst GameLayout = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  height: 100vh;\r\n  background-color: #1a1a1a;\r\n  color: white;\r\n`;\r\n\r\nconst MainArea = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  flex-grow: 1;\r\n  padding: 20px;\r\n  gap: 20px;\r\n`;\r\n\r\nconst GameHeader = styled.div`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  padding: 10px;\r\n  background-color: #2c3e50;\r\n  border-radius: 5px;\r\n`;\r\n\r\nconst GameInfo = styled.div`\r\n  display: flex;\r\n  gap: 20px;\r\n`;\r\n\r\nconst InfoItem = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 5px;\r\n`;\r\n\r\nconst GameContent = styled.div`\r\n  display: flex;\r\n  flex-grow: 1;\r\n  gap: 20px;\r\n`;\r\n\r\nconst GameScene = styled.div`\r\n  flex-grow: 1;\r\n  background-color: #2c3e50;\r\n  border-radius: 5px;\r\n  overflow: hidden;\r\n  height: 500px;\r\n`;\r\n\r\nconst ConsoleArea = styled.div`\r\n  width: 400px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 10px;\r\n`;\r\n\r\nconst MoneyDisplay = styled.div`\r\n  font-size: 1.5em;\r\n  font-weight: bold;\r\n  color: #f1c40f;\r\n  text-align: center;\r\n  padding: 10px;\r\n  background-color: #34495e;\r\n  border-radius: 5px;\r\n`;\r\n\r\nconst GameGrid = styled.div`\r\n  display: grid;\r\n  grid-template-columns: repeat(${props => props.size}, 1fr);\r\n  gap: 10px;\r\n  width: 90%;\r\n  max-width: 700px;\r\n  margin: 0 auto;\r\n`;\r\n\r\nconst LandTile = styled.div`\r\n  width: 100%;\r\n  aspect-ratio: 1;\r\n  background-color: ${props => {\r\n    if (props.isPlowed) return '#8B4513';\r\n    if (props.hasCrop && props.cropState === 'growing') return '#90EE90';\r\n    if (props.hasCrop && props.cropState === 'ready') return '#228B22';\r\n    return '#90EE90';\r\n  }};\r\n  border: 1px solid #2c3e50;\r\n  cursor: pointer;\r\n  position: relative;\r\n  transition: all 0.3s ease;\r\n\r\n  &:hover {\r\n    transform: scale(1.05);\r\n  }\r\n`;\r\n\r\nconst CropIndicator = styled.div`\r\n  position: absolute;\r\n  top: 50%;\r\n  left: 50%;\r\n  transform: translate(-50%, -50%);\r\n  width: 80%;\r\n  height: 80%;\r\n  background-color: ${props => props.color};\r\n  border-radius: 50%;\r\n`;\r\n\r\nconst GameStats = styled.div`\r\n  position: fixed;\r\n  top: 20px;\r\n  right: 320px;\r\n  background-color: rgba(52, 73, 94, 0.9);\r\n  padding: 10px;\r\n  border-radius: 5px;\r\n`;\r\n\r\nconst ToolBar = styled.div`\r\n  display: flex;\r\n  margin-bottom: 20px;\r\n  flex-wrap: wrap;\r\n`;\r\n\r\nconst ToolButton = styled.button`\r\n  background-color: ${props => props.selected ? '#2980b9' : '#3498db'};\r\n  border: ${props => props.selected ? '2px solid #fff' : 'none'};\r\n  padding: ${props => props.selected ? '6px 14px' : '8px 16px'};\r\n`;\r\n\r\nconst CropSelector = styled.div`\r\n  margin-top: 10px;\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n`;\r\n\r\nconst CropButton = styled.button`\r\n  background-color: ${props => props.selected ? '#27ae60' : '#2ecc71'};\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n  \r\n  &:disabled {\r\n    background-color: #95a5a6;\r\n    cursor: not-allowed;\r\n  }\r\n`;\r\n\r\nconst CropIcon = styled.span`\r\n  display: inline-block;\r\n  width: 12px;\r\n  height: 12px;\r\n  border-radius: 50%;\r\n  background-color: ${props => props.color};\r\n  margin-right: 5px;\r\n`;\r\n\r\nconst DroneSprite = styled.div`\r\n  position: absolute;\r\n  top: 50%;\r\n  left: 50%;\r\n  width: 40%;\r\n  height: 40%;\r\n  background-color: #3498db;\r\n  border-radius: 50%;\r\n  transform: translate(-50%, -50%);\r\n  transition: all 0.3s ease;\r\n  z-index: 2;\r\n  \r\n  &::before {\r\n    content: 'ðŸ›¸';\r\n    position: absolute;\r\n    top: 50%;\r\n    left: 50%;\r\n    transform: translate(-50%, -50%);\r\n    font-size: 20px;\r\n  }\r\n`;\r\n\r\nconst ConsoleContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 10px;\r\n  height: 100%;\r\n`;\r\n\r\nconst ConsoleTabs = styled.div`\r\n  display: flex;\r\n  gap: 5px;\r\n  margin-bottom: 10px;\r\n`;\r\n\r\nconst ConsoleTab = styled.button`\r\n  background-color: ${props => props.active ? '#3498db' : '#2c3e50'};\r\n  color: white;\r\n  border: none;\r\n  padding: 5px 10px;\r\n  border-radius: 3px;\r\n  cursor: pointer;\r\n  \r\n  &:hover {\r\n    background-color: ${props => props.active ? '#2980b9' : '#34495e'};\r\n  }\r\n`;\r\n\r\nconst AddConsoleButton = styled.button`\r\n  background-color: #27ae60;\r\n  color: white;\r\n  border: none;\r\n  padding: 5px 10px;\r\n  border-radius: 3px;\r\n  cursor: pointer;\r\n  \r\n  &:hover {\r\n    background-color: #219653;\r\n  }\r\n`;\r\n\r\nconst ConsoleWrapper = styled.div`\r\n  display: ${props => props.active ? 'block' : 'none'};\r\n  height: 100%;\r\n`;\r\n\r\nfunction Game({ inventory, setInventory, money, setMoney, onOpenTechTree, unlockedCrops }) {\r\n  const [gridSize, setGridSize] = useState(1);\r\n  const [land, setLand] = useState(Array(1).fill(null).map(() => ({ \r\n    isPlowed: false, \r\n    hasCrop: false, \r\n    cropType: null,\r\n    cropState: null,\r\n    plantedTime: null\r\n  })));\r\n  \r\n  const [selectedTool, setSelectedTool] = useState('plow');\r\n  const [selectedCrop, setSelectedCrop] = useState('wheat');\r\n  const [showInstructions, setShowInstructions] = useState(false);\r\n  \r\n  // Add drone state\r\n  const [dronePosition, setDronePosition] = useState({ x: 0, y: 0 });\r\n  const [droneInventory, setDroneInventory] = useState({});\r\n\r\n  // Add console management state\r\n  const [consoles, setConsoles] = useState([\r\n    { id: 1, name: 'Console 1' }\r\n  ]);\r\n  const [activeConsole, setActiveConsole] = useState(1);\r\n\r\n  // Crop growth timer\r\n  useEffect(() => {\r\n    const growthInterval = setInterval(() => {\r\n      let updated = false;\r\n      const newLand = [...land];\r\n      \r\n      newLand.forEach((tile, index) => {\r\n        if (tile.hasCrop && tile.cropState === 'growing' && tile.plantedTime) {\r\n          const now = Date.now();\r\n          const growthTime = 10000; // 10 seconds for growth\r\n          \r\n          if (now - tile.plantedTime > growthTime) {\r\n            newLand[index] = {\r\n              ...tile,\r\n              cropState: 'ready'\r\n            };\r\n            updated = true;\r\n          }\r\n        }\r\n      });\r\n      \r\n      if (updated) {\r\n        setLand(newLand);\r\n      }\r\n    }, 1000);\r\n    \r\n    return () => clearInterval(growthInterval);\r\n  }, [land]);\r\n\r\n  const cropColors = {\r\n    wheat: '#f1c40f',\r\n    corn: '#f39c12',\r\n    potato: '#d35400',\r\n    carrots: '#e67e22',\r\n    sunflowers: '#f1c40f',\r\n    pumpkins: '#e67e22'\r\n  };\r\n\r\n  const gameState = {\r\n    money,\r\n    inventory,\r\n    land,\r\n    selectedTool,\r\n    selectedCrop,\r\n    drone: {\r\n      x: dronePosition.x,\r\n      y: dronePosition.y,\r\n      inventory: droneInventory\r\n    }\r\n  };\r\n\r\n  const setGameState = (newState) => {\r\n    if (typeof newState === 'function') {\r\n      const updatedState = newState({ \r\n        money, \r\n        inventory, \r\n        land,\r\n        drone: {\r\n          x: dronePosition.x,\r\n          y: dronePosition.y,\r\n          inventory: droneInventory\r\n        }\r\n      });\r\n      setMoney(updatedState.money);\r\n      setInventory(updatedState.inventory);\r\n      setLand(updatedState.land);\r\n      if (updatedState.drone) {\r\n        setDronePosition({ x: updatedState.drone.x, y: updatedState.drone.y });\r\n        setDroneInventory(updatedState.drone.inventory);\r\n      }\r\n    } else {\r\n      setMoney(newState.money);\r\n      setInventory(newState.inventory);\r\n      setLand(newState.land);\r\n      if (newState.drone) {\r\n        setDronePosition({ x: newState.drone.x, y: newState.drone.y });\r\n        setDroneInventory(newState.drone.inventory);\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleTileClick = (index) => {\r\n    const x = index % gridSize;\r\n    const y = Math.floor(index / gridSize);\r\n    const tile = land[index];\r\n\r\n    switch (selectedTool) {\r\n      case 'plow':\r\n        if (!tile.isPlowed && !tile.hasCrop) {\r\n          const newLand = [...land];\r\n          newLand[index] = { ...tile, isPlowed: true };\r\n          setLand(newLand);\r\n        }\r\n        break;\r\n      case 'plant':\r\n        if (tile.isPlowed && !tile.hasCrop) {\r\n          const newLand = [...land];\r\n          newLand[index] = {\r\n            ...tile,\r\n            hasCrop: true,\r\n            cropType: selectedCrop,\r\n            cropState: 'growing',\r\n            plantedTime: Date.now()\r\n          };\r\n          setLand(newLand);\r\n        }\r\n        break;\r\n      case 'harvest':\r\n        if (tile.hasCrop && tile.cropState === 'ready') {\r\n          const newLand = [...land];\r\n          newLand[index] = {\r\n            ...tile,\r\n            hasCrop: false,\r\n            cropType: null,\r\n            cropState: null,\r\n            plantedTime: null\r\n          };\r\n          setLand(newLand);\r\n          setInventory({\r\n            ...inventory,\r\n            [tile.cropType]: (inventory[tile.cropType] || 0) + 1\r\n          });\r\n        }\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  };\r\n\r\n  const sellAllCrops = () => {\r\n    const prices = {\r\n      wheat: 20,\r\n      corn: 30,\r\n      potato: 40\r\n    };\r\n\r\n    let totalEarnings = 0;\r\n    const newInventory = { ...inventory };\r\n\r\n    Object.entries(inventory).forEach(([crop, amount]) => {\r\n      if (prices[crop]) {\r\n        totalEarnings += prices[crop] * amount;\r\n        newInventory[crop] = 0;\r\n      }\r\n    });\r\n\r\n    setMoney(money + totalEarnings);\r\n    setInventory(newInventory);\r\n  };\r\n\r\n  const handleTechUnlock = (techId) => {\r\n    if (techId === 'expand') {\r\n      // Handle farm expansion\r\n      if (gridSize < 5) {\r\n        const newSize = gridSize + 1;\r\n        const newLand = Array(newSize * newSize).fill(null).map((_, index) => {\r\n          if (index < land.length) {\r\n            return land[index];\r\n          }\r\n          return {\r\n            isPlowed: false,\r\n            hasCrop: false,\r\n            cropType: null,\r\n            cropState: null,\r\n            plantedTime: null\r\n          };\r\n        });\r\n        setGridSize(newSize);\r\n        setLand(newLand);\r\n      }\r\n    }\r\n    // Add other tech effects here\r\n  };\r\n\r\n  const addConsole = () => {\r\n    const newId = consoles.length + 1;\r\n    setConsoles([...consoles, { id: newId, name: `Console ${newId}` }]);\r\n    setActiveConsole(newId);\r\n  };\r\n\r\n  const removeConsole = (id) => {\r\n    if (consoles.length > 1) {\r\n      const newConsoles = consoles.filter(console => console.id !== id);\r\n      setConsoles(newConsoles);\r\n      if (activeConsole === id) {\r\n        setActiveConsole(newConsoles[0].id);\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <GameLayout>\r\n      <MainArea>\r\n        <GameHeader>\r\n          <GameInfo>\r\n            <InfoItem>\r\n              <span>ðŸ’°</span>\r\n              <span>${money}</span>\r\n            </InfoItem>\r\n            <InfoItem>\r\n              <span>ðŸŒ±</span>\r\n              <span>Seeds: {Object.entries(inventory).filter(([key]) => key.endsWith('_seeds')).length}</span>\r\n            </InfoItem>\r\n            <InfoItem>\r\n              <span>ðŸŒ¾</span>\r\n              <span>Crops: {Object.entries(inventory).filter(([key]) => !key.endsWith('_seeds')).length}</span>\r\n            </InfoItem>\r\n          </GameInfo>\r\n          <button onClick={onOpenTechTree}>Tech Tree</button>\r\n        </GameHeader>\r\n\r\n        <GameContent>\r\n          <GameScene>\r\n            <Game3D gameState={gameState} setGameState={setGameState} />\r\n          </GameScene>\r\n          \r\n          <ConsoleArea>\r\n            <JavaScriptConsole gameState={gameState} setGameState={setGameState} />\r\n          </ConsoleArea>\r\n        </GameContent>\r\n      </MainArea>\r\n    </GameLayout>\r\n  );\r\n}\r\n\r\nexport default Game; "],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,MAAM,MAAM,mBAAmB;AACtC,OAAOC,YAAY,MAAM,gBAAgB;AACzC,OAAOC,iBAAiB,MAAM,qBAAqB;AACnD,OAAOC,QAAQ,MAAM,YAAY;AACjC,OAAOC,MAAM,MAAM,UAAU;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE9B,MAAMC,UAAU,GAAGP,MAAM,CAACQ,GAAG;AAC7B;AACA;AACA;AACA;AACA;AACA,CAAC;AAACC,EAAA,GANIF,UAAU;AAQhB,MAAMG,QAAQ,GAAGV,MAAM,CAACQ,GAAG;AAC3B;AACA;AACA;AACA;AACA;AACA,CAAC;AAACG,GAAA,GANID,QAAQ;AAQd,MAAME,UAAU,GAAGZ,MAAM,CAACQ,GAAG;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAACK,GAAA,GAPID,UAAU;AAShB,MAAME,QAAQ,GAAGd,MAAM,CAACQ,GAAG;AAC3B;AACA;AACA,CAAC;AAACO,GAAA,GAHID,QAAQ;AAKd,MAAME,QAAQ,GAAGhB,MAAM,CAACQ,GAAG;AAC3B;AACA;AACA;AACA,CAAC;AAACS,GAAA,GAJID,QAAQ;AAMd,MAAME,WAAW,GAAGlB,MAAM,CAACQ,GAAG;AAC9B;AACA;AACA;AACA,CAAC;AAACW,GAAA,GAJID,WAAW;AAMjB,MAAME,SAAS,GAAGpB,MAAM,CAACQ,GAAG;AAC5B;AACA;AACA;AACA;AACA;AACA,CAAC;AAACa,GAAA,GANID,SAAS;AAQf,MAAME,WAAW,GAAGtB,MAAM,CAACQ,GAAG;AAC9B;AACA;AACA;AACA;AACA,CAAC;AAACe,GAAA,GALID,WAAW;AAOjB,MAAME,YAAY,GAAGxB,MAAM,CAACQ,GAAG;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAED,MAAMiB,QAAQ,GAAGzB,MAAM,CAACQ,GAAG;AAC3B;AACA,kCAAkCkB,KAAK,IAAIA,KAAK,CAACC,IAAI;AACrD;AACA;AACA;AACA;AACA,CAAC;AAED,MAAMC,QAAQ,GAAG5B,MAAM,CAACQ,GAAG;AAC3B;AACA;AACA,sBAAsBkB,KAAK,IAAI;EAC3B,IAAIA,KAAK,CAACG,QAAQ,EAAE,OAAO,SAAS;EACpC,IAAIH,KAAK,CAACI,OAAO,IAAIJ,KAAK,CAACK,SAAS,KAAK,SAAS,EAAE,OAAO,SAAS;EACpE,IAAIL,KAAK,CAACI,OAAO,IAAIJ,KAAK,CAACK,SAAS,KAAK,OAAO,EAAE,OAAO,SAAS;EAClE,OAAO,SAAS;AAClB,CAAC;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAED,MAAMC,aAAa,GAAGhC,MAAM,CAACQ,GAAG;AAChC;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsBkB,KAAK,IAAIA,KAAK,CAACO,KAAK;AAC1C;AACA,CAAC;AAED,MAAMC,SAAS,GAAGlC,MAAM,CAACQ,GAAG;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAED,MAAM2B,OAAO,GAAGnC,MAAM,CAACQ,GAAG;AAC1B;AACA;AACA;AACA,CAAC;AAED,MAAM4B,UAAU,GAAGpC,MAAM,CAACqC,MAAM;AAChC,sBAAsBX,KAAK,IAAIA,KAAK,CAACY,QAAQ,GAAG,SAAS,GAAG,SAAS;AACrE,YAAYZ,KAAK,IAAIA,KAAK,CAACY,QAAQ,GAAG,gBAAgB,GAAG,MAAM;AAC/D,aAAaZ,KAAK,IAAIA,KAAK,CAACY,QAAQ,GAAG,UAAU,GAAG,UAAU;AAC9D,CAAC;AAED,MAAMC,YAAY,GAAGvC,MAAM,CAACQ,GAAG;AAC/B;AACA;AACA;AACA,CAAC;AAED,MAAMgC,UAAU,GAAGxC,MAAM,CAACqC,MAAM;AAChC,sBAAsBX,KAAK,IAAIA,KAAK,CAACY,QAAQ,GAAG,SAAS,GAAG,SAAS;AACrE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAED,MAAMG,QAAQ,GAAGzC,MAAM,CAAC0C,IAAI;AAC5B;AACA;AACA;AACA;AACA,sBAAsBhB,KAAK,IAAIA,KAAK,CAACO,KAAK;AAC1C;AACA,CAAC;AAED,MAAMU,WAAW,GAAG3C,MAAM,CAACQ,GAAG;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAED,MAAMoC,gBAAgB,GAAG5C,MAAM,CAACQ,GAAG;AACnC;AACA;AACA;AACA;AACA,CAAC;AAED,MAAMqC,WAAW,GAAG7C,MAAM,CAACQ,GAAG;AAC9B;AACA;AACA;AACA,CAAC;AAED,MAAMsC,UAAU,GAAG9C,MAAM,CAACqC,MAAM;AAChC,sBAAsBX,KAAK,IAAIA,KAAK,CAACqB,MAAM,GAAG,SAAS,GAAG,SAAS;AACnE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwBrB,KAAK,IAAIA,KAAK,CAACqB,MAAM,GAAG,SAAS,GAAG,SAAS;AACrE;AACA,CAAC;AAED,MAAMC,gBAAgB,GAAGhD,MAAM,CAACqC,MAAM;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAED,MAAMY,cAAc,GAAGjD,MAAM,CAACQ,GAAG;AACjC,aAAakB,KAAK,IAAIA,KAAK,CAACqB,MAAM,GAAG,OAAO,GAAG,MAAM;AACrD;AACA,CAAC;AAED,SAASG,IAAIA,CAAC;EAAEC,SAAS;EAAEC,YAAY;EAAEC,KAAK;EAAEC,QAAQ;EAAEC,cAAc;EAAEC;AAAc,CAAC,EAAE;EAAAC,EAAA;EACzF,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAG7D,QAAQ,CAAC,CAAC,CAAC;EAC3C,MAAM,CAAC8D,IAAI,EAAEC,OAAO,CAAC,GAAG/D,QAAQ,CAACgE,KAAK,CAAC,CAAC,CAAC,CAACC,IAAI,CAAC,IAAI,CAAC,CAACC,GAAG,CAAC,OAAO;IAC9DnC,QAAQ,EAAE,KAAK;IACfC,OAAO,EAAE,KAAK;IACdmC,QAAQ,EAAE,IAAI;IACdlC,SAAS,EAAE,IAAI;IACfmC,WAAW,EAAE;EACf,CAAC,CAAC,CAAC,CAAC;EAEJ,MAAM,CAACC,YAAY,EAAEC,eAAe,CAAC,GAAGtE,QAAQ,CAAC,MAAM,CAAC;EACxD,MAAM,CAACuE,YAAY,EAAEC,eAAe,CAAC,GAAGxE,QAAQ,CAAC,OAAO,CAAC;EACzD,MAAM,CAACyE,gBAAgB,EAAEC,mBAAmB,CAAC,GAAG1E,QAAQ,CAAC,KAAK,CAAC;;EAE/D;EACA,MAAM,CAAC2E,aAAa,EAAEC,gBAAgB,CAAC,GAAG5E,QAAQ,CAAC;IAAE6E,CAAC,EAAE,CAAC;IAAEC,CAAC,EAAE;EAAE,CAAC,CAAC;EAClE,MAAM,CAACC,cAAc,EAAEC,iBAAiB,CAAC,GAAGhF,QAAQ,CAAC,CAAC,CAAC,CAAC;;EAExD;EACA,MAAM,CAACiF,QAAQ,EAAEC,WAAW,CAAC,GAAGlF,QAAQ,CAAC,CACvC;IAAEmF,EAAE,EAAE,CAAC;IAAEC,IAAI,EAAE;EAAY,CAAC,CAC7B,CAAC;EACF,MAAM,CAACC,aAAa,EAAEC,gBAAgB,CAAC,GAAGtF,QAAQ,CAAC,CAAC,CAAC;;EAErD;EACAC,SAAS,CAAC,MAAM;IACd,MAAMsF,cAAc,GAAGC,WAAW,CAAC,MAAM;MACvC,IAAIC,OAAO,GAAG,KAAK;MACnB,MAAMC,OAAO,GAAG,CAAC,GAAG5B,IAAI,CAAC;MAEzB4B,OAAO,CAACC,OAAO,CAAC,CAACC,IAAI,EAAEC,KAAK,KAAK;QAC/B,IAAID,IAAI,CAAC5D,OAAO,IAAI4D,IAAI,CAAC3D,SAAS,KAAK,SAAS,IAAI2D,IAAI,CAACxB,WAAW,EAAE;UACpE,MAAM0B,GAAG,GAAGC,IAAI,CAACD,GAAG,CAAC,CAAC;UACtB,MAAME,UAAU,GAAG,KAAK,CAAC,CAAC;;UAE1B,IAAIF,GAAG,GAAGF,IAAI,CAACxB,WAAW,GAAG4B,UAAU,EAAE;YACvCN,OAAO,CAACG,KAAK,CAAC,GAAG;cACf,GAAGD,IAAI;cACP3D,SAAS,EAAE;YACb,CAAC;YACDwD,OAAO,GAAG,IAAI;UAChB;QACF;MACF,CAAC,CAAC;MAEF,IAAIA,OAAO,EAAE;QACX1B,OAAO,CAAC2B,OAAO,CAAC;MAClB;IACF,CAAC,EAAE,IAAI,CAAC;IAER,OAAO,MAAMO,aAAa,CAACV,cAAc,CAAC;EAC5C,CAAC,EAAE,CAACzB,IAAI,CAAC,CAAC;EAEV,MAAMoC,UAAU,GAAG;IACjBC,KAAK,EAAE,SAAS;IAChBC,IAAI,EAAE,SAAS;IACfC,MAAM,EAAE,SAAS;IACjBC,OAAO,EAAE,SAAS;IAClBC,UAAU,EAAE,SAAS;IACrBC,QAAQ,EAAE;EACZ,CAAC;EAED,MAAMC,SAAS,GAAG;IAChBlD,KAAK;IACLF,SAAS;IACTS,IAAI;IACJO,YAAY;IACZE,YAAY;IACZmC,KAAK,EAAE;MACL7B,CAAC,EAAEF,aAAa,CAACE,CAAC;MAClBC,CAAC,EAAEH,aAAa,CAACG,CAAC;MAClBzB,SAAS,EAAE0B;IACb;EACF,CAAC;EAED,MAAM4B,YAAY,GAAIC,QAAQ,IAAK;IACjC,IAAI,OAAOA,QAAQ,KAAK,UAAU,EAAE;MAClC,MAAMC,YAAY,GAAGD,QAAQ,CAAC;QAC5BrD,KAAK;QACLF,SAAS;QACTS,IAAI;QACJ4C,KAAK,EAAE;UACL7B,CAAC,EAAEF,aAAa,CAACE,CAAC;UAClBC,CAAC,EAAEH,aAAa,CAACG,CAAC;UAClBzB,SAAS,EAAE0B;QACb;MACF,CAAC,CAAC;MACFvB,QAAQ,CAACqD,YAAY,CAACtD,KAAK,CAAC;MAC5BD,YAAY,CAACuD,YAAY,CAACxD,SAAS,CAAC;MACpCU,OAAO,CAAC8C,YAAY,CAAC/C,IAAI,CAAC;MAC1B,IAAI+C,YAAY,CAACH,KAAK,EAAE;QACtB9B,gBAAgB,CAAC;UAAEC,CAAC,EAAEgC,YAAY,CAACH,KAAK,CAAC7B,CAAC;UAAEC,CAAC,EAAE+B,YAAY,CAACH,KAAK,CAAC5B;QAAE,CAAC,CAAC;QACtEE,iBAAiB,CAAC6B,YAAY,CAACH,KAAK,CAACrD,SAAS,CAAC;MACjD;IACF,CAAC,MAAM;MACLG,QAAQ,CAACoD,QAAQ,CAACrD,KAAK,CAAC;MACxBD,YAAY,CAACsD,QAAQ,CAACvD,SAAS,CAAC;MAChCU,OAAO,CAAC6C,QAAQ,CAAC9C,IAAI,CAAC;MACtB,IAAI8C,QAAQ,CAACF,KAAK,EAAE;QAClB9B,gBAAgB,CAAC;UAAEC,CAAC,EAAE+B,QAAQ,CAACF,KAAK,CAAC7B,CAAC;UAAEC,CAAC,EAAE8B,QAAQ,CAACF,KAAK,CAAC5B;QAAE,CAAC,CAAC;QAC9DE,iBAAiB,CAAC4B,QAAQ,CAACF,KAAK,CAACrD,SAAS,CAAC;MAC7C;IACF;EACF,CAAC;EAED,MAAMyD,eAAe,GAAIjB,KAAK,IAAK;IACjC,MAAMhB,CAAC,GAAGgB,KAAK,GAAGjC,QAAQ;IAC1B,MAAMkB,CAAC,GAAGiC,IAAI,CAACC,KAAK,CAACnB,KAAK,GAAGjC,QAAQ,CAAC;IACtC,MAAMgC,IAAI,GAAG9B,IAAI,CAAC+B,KAAK,CAAC;IAExB,QAAQxB,YAAY;MAClB,KAAK,MAAM;QACT,IAAI,CAACuB,IAAI,CAAC7D,QAAQ,IAAI,CAAC6D,IAAI,CAAC5D,OAAO,EAAE;UACnC,MAAM0D,OAAO,GAAG,CAAC,GAAG5B,IAAI,CAAC;UACzB4B,OAAO,CAACG,KAAK,CAAC,GAAG;YAAE,GAAGD,IAAI;YAAE7D,QAAQ,EAAE;UAAK,CAAC;UAC5CgC,OAAO,CAAC2B,OAAO,CAAC;QAClB;QACA;MACF,KAAK,OAAO;QACV,IAAIE,IAAI,CAAC7D,QAAQ,IAAI,CAAC6D,IAAI,CAAC5D,OAAO,EAAE;UAClC,MAAM0D,OAAO,GAAG,CAAC,GAAG5B,IAAI,CAAC;UACzB4B,OAAO,CAACG,KAAK,CAAC,GAAG;YACf,GAAGD,IAAI;YACP5D,OAAO,EAAE,IAAI;YACbmC,QAAQ,EAAEI,YAAY;YACtBtC,SAAS,EAAE,SAAS;YACpBmC,WAAW,EAAE2B,IAAI,CAACD,GAAG,CAAC;UACxB,CAAC;UACD/B,OAAO,CAAC2B,OAAO,CAAC;QAClB;QACA;MACF,KAAK,SAAS;QACZ,IAAIE,IAAI,CAAC5D,OAAO,IAAI4D,IAAI,CAAC3D,SAAS,KAAK,OAAO,EAAE;UAC9C,MAAMyD,OAAO,GAAG,CAAC,GAAG5B,IAAI,CAAC;UACzB4B,OAAO,CAACG,KAAK,CAAC,GAAG;YACf,GAAGD,IAAI;YACP5D,OAAO,EAAE,KAAK;YACdmC,QAAQ,EAAE,IAAI;YACdlC,SAAS,EAAE,IAAI;YACfmC,WAAW,EAAE;UACf,CAAC;UACDL,OAAO,CAAC2B,OAAO,CAAC;UAChBpC,YAAY,CAAC;YACX,GAAGD,SAAS;YACZ,CAACuC,IAAI,CAACzB,QAAQ,GAAG,CAACd,SAAS,CAACuC,IAAI,CAACzB,QAAQ,CAAC,IAAI,CAAC,IAAI;UACrD,CAAC,CAAC;QACJ;QACA;MACF;QACE;IACJ;EACF,CAAC;EAED,MAAM8C,YAAY,GAAGA,CAAA,KAAM;IACzB,MAAMC,MAAM,GAAG;MACbf,KAAK,EAAE,EAAE;MACTC,IAAI,EAAE,EAAE;MACRC,MAAM,EAAE;IACV,CAAC;IAED,IAAIc,aAAa,GAAG,CAAC;IACrB,MAAMC,YAAY,GAAG;MAAE,GAAG/D;IAAU,CAAC;IAErCgE,MAAM,CAACC,OAAO,CAACjE,SAAS,CAAC,CAACsC,OAAO,CAAC,CAAC,CAAC4B,IAAI,EAAEC,MAAM,CAAC,KAAK;MACpD,IAAIN,MAAM,CAACK,IAAI,CAAC,EAAE;QAChBJ,aAAa,IAAID,MAAM,CAACK,IAAI,CAAC,GAAGC,MAAM;QACtCJ,YAAY,CAACG,IAAI,CAAC,GAAG,CAAC;MACxB;IACF,CAAC,CAAC;IAEF/D,QAAQ,CAACD,KAAK,GAAG4D,aAAa,CAAC;IAC/B7D,YAAY,CAAC8D,YAAY,CAAC;EAC5B,CAAC;EAED,MAAMK,gBAAgB,GAAIC,MAAM,IAAK;IACnC,IAAIA,MAAM,KAAK,QAAQ,EAAE;MACvB;MACA,IAAI9D,QAAQ,GAAG,CAAC,EAAE;QAChB,MAAM+D,OAAO,GAAG/D,QAAQ,GAAG,CAAC;QAC5B,MAAM8B,OAAO,GAAG1B,KAAK,CAAC2D,OAAO,GAAGA,OAAO,CAAC,CAAC1D,IAAI,CAAC,IAAI,CAAC,CAACC,GAAG,CAAC,CAAC0D,CAAC,EAAE/B,KAAK,KAAK;UACpE,IAAIA,KAAK,GAAG/B,IAAI,CAAC+D,MAAM,EAAE;YACvB,OAAO/D,IAAI,CAAC+B,KAAK,CAAC;UACpB;UACA,OAAO;YACL9D,QAAQ,EAAE,KAAK;YACfC,OAAO,EAAE,KAAK;YACdmC,QAAQ,EAAE,IAAI;YACdlC,SAAS,EAAE,IAAI;YACfmC,WAAW,EAAE;UACf,CAAC;QACH,CAAC,CAAC;QACFP,WAAW,CAAC8D,OAAO,CAAC;QACpB5D,OAAO,CAAC2B,OAAO,CAAC;MAClB;IACF;IACA;EACF,CAAC;EAED,MAAMoC,UAAU,GAAGA,CAAA,KAAM;IACvB,MAAMC,KAAK,GAAG9C,QAAQ,CAAC4C,MAAM,GAAG,CAAC;IACjC3C,WAAW,CAAC,CAAC,GAAGD,QAAQ,EAAE;MAAEE,EAAE,EAAE4C,KAAK;MAAE3C,IAAI,EAAE,WAAW2C,KAAK;IAAG,CAAC,CAAC,CAAC;IACnEzC,gBAAgB,CAACyC,KAAK,CAAC;EACzB,CAAC;EAED,MAAMC,aAAa,GAAI7C,EAAE,IAAK;IAC5B,IAAIF,QAAQ,CAAC4C,MAAM,GAAG,CAAC,EAAE;MACvB,MAAMI,WAAW,GAAGhD,QAAQ,CAACiD,MAAM,CAACC,OAAO,IAAIA,OAAO,CAAChD,EAAE,KAAKA,EAAE,CAAC;MACjED,WAAW,CAAC+C,WAAW,CAAC;MACxB,IAAI5C,aAAa,KAAKF,EAAE,EAAE;QACxBG,gBAAgB,CAAC2C,WAAW,CAAC,CAAC,CAAC,CAAC9C,EAAE,CAAC;MACrC;IACF;EACF,CAAC;EAED,oBACE3E,OAAA,CAACC,UAAU;IAAA2H,QAAA,eACT5H,OAAA,CAACI,QAAQ;MAAAwH,QAAA,gBACP5H,OAAA,CAACM,UAAU;QAAAsH,QAAA,gBACT5H,OAAA,CAACQ,QAAQ;UAAAoH,QAAA,gBACP5H,OAAA,CAACU,QAAQ;YAAAkH,QAAA,gBACP5H,OAAA;cAAA4H,QAAA,EAAM;YAAE;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAM,CAAC,eACfhI,OAAA;cAAA4H,QAAA,GAAM,GAAC,EAAC7E,KAAK;YAAA;cAAA8E,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAO,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACb,CAAC,eACXhI,OAAA,CAACU,QAAQ;YAAAkH,QAAA,gBACP5H,OAAA;cAAA4H,QAAA,EAAM;YAAE;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAM,CAAC,eACfhI,OAAA;cAAA4H,QAAA,GAAM,SAAO,EAACf,MAAM,CAACC,OAAO,CAACjE,SAAS,CAAC,CAAC6E,MAAM,CAAC,CAAC,CAACO,GAAG,CAAC,KAAKA,GAAG,CAACC,QAAQ,CAAC,QAAQ,CAAC,CAAC,CAACb,MAAM;YAAA;cAAAQ,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAO,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACxF,CAAC,eACXhI,OAAA,CAACU,QAAQ;YAAAkH,QAAA,gBACP5H,OAAA;cAAA4H,QAAA,EAAM;YAAE;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAM,CAAC,eACfhI,OAAA;cAAA4H,QAAA,GAAM,SAAO,EAACf,MAAM,CAACC,OAAO,CAACjE,SAAS,CAAC,CAAC6E,MAAM,CAAC,CAAC,CAACO,GAAG,CAAC,KAAK,CAACA,GAAG,CAACC,QAAQ,CAAC,QAAQ,CAAC,CAAC,CAACb,MAAM;YAAA;cAAAQ,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAO,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACzF,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACH,CAAC,eACXhI,OAAA;UAAQmI,OAAO,EAAElF,cAAe;UAAA2E,QAAA,EAAC;QAAS;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACzC,CAAC,eAEbhI,OAAA,CAACY,WAAW;QAAAgH,QAAA,gBACV5H,OAAA,CAACc,SAAS;UAAA8G,QAAA,eACR5H,OAAA,CAACF,MAAM;YAACmG,SAAS,EAAEA,SAAU;YAACE,YAAY,EAAEA;UAAa;YAAA0B,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACnD,CAAC,eAEZhI,OAAA,CAACgB,WAAW;UAAA4G,QAAA,eACV5H,OAAA,CAACJ,iBAAiB;YAACqG,SAAS,EAAEA,SAAU;YAACE,YAAY,EAAEA;UAAa;YAAA0B,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC5D,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACH,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACN;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACD,CAAC;AAEjB;AAAC7E,EAAA,CAvPQP,IAAI;AAAAwF,GAAA,GAAJxF,IAAI;AAyPb,eAAeA,IAAI;AAAC,IAAAzC,EAAA,EAAAE,GAAA,EAAAE,GAAA,EAAAE,GAAA,EAAAE,GAAA,EAAAE,GAAA,EAAAE,GAAA,EAAAE,GAAA,EAAAmH,GAAA;AAAAC,YAAA,CAAAlI,EAAA;AAAAkI,YAAA,CAAAhI,GAAA;AAAAgI,YAAA,CAAA9H,GAAA;AAAA8H,YAAA,CAAA5H,GAAA;AAAA4H,YAAA,CAAA1H,GAAA;AAAA0H,YAAA,CAAAxH,GAAA;AAAAwH,YAAA,CAAAtH,GAAA;AAAAsH,YAAA,CAAApH,GAAA;AAAAoH,YAAA,CAAAD,GAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}