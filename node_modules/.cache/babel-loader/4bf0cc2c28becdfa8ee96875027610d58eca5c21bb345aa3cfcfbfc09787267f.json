{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\SPIDER\\\\Downloads\\\\Project\\\\Demo GPT\\\\Demo 1\\\\src\\\\components\\\\Game3D.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect, useState, useLayoutEffect } from 'react';\nimport * as THREE from 'three';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Game3D = ({\n  gameState,\n  setGameState\n}) => {\n  _s();\n  const [isInitialized, setIsInitialized] = useState(false);\n  const [isMounted, setIsMounted] = useState(false);\n  const canvasRef = useRef(null);\n  const sceneRef = useRef(null);\n  const cameraRef = useRef(null);\n  const rendererRef = useRef(null);\n  const droneRef = useRef(null);\n  const animationFrameRef = useRef(null);\n\n  // Ensure component is mounted before initialization\n  useLayoutEffect(() => {\n    setIsMounted(true);\n    return () => setIsMounted(false);\n  }, []);\n\n  // Initialize Three.js scene\n  const initializeScene = () => {\n    try {\n      if (!canvasRef.current || !isMounted) {\n        console.warn('Canvas element not found or component not mounted');\n        return false;\n      }\n\n      // Create scene\n      const scene = new THREE.Scene();\n      scene.background = new THREE.Color(0x87CEEB);\n\n      // Create camera\n      const camera = new THREE.PerspectiveCamera(75, 1, 0.1, 1000);\n      camera.position.set(5, 5, 5);\n      camera.lookAt(0, 0, 0);\n\n      // Create renderer\n      const renderer = new THREE.WebGLRenderer({\n        canvas: canvasRef.current,\n        antialias: true,\n        alpha: true\n      });\n      renderer.setSize(600, 600, false);\n\n      // Add lights\n      const ambientLight = new THREE.AmbientLight(0xffffff, 0.5);\n      scene.add(ambientLight);\n      const directionalLight = new THREE.DirectionalLight(0xffffff, 0.8);\n      directionalLight.position.set(10, 10, 5);\n      scene.add(directionalLight);\n\n      // Create ground plane\n      const groundGeometry = new THREE.PlaneGeometry(5, 5);\n      const groundMaterial = new THREE.MeshStandardMaterial({\n        color: 0x8B4513,\n        roughness: 0.8,\n        metalness: 0.2\n      });\n      const ground = new THREE.Mesh(groundGeometry, groundMaterial);\n      ground.rotation.x = -Math.PI / 2;\n      scene.add(ground);\n\n      // Create grid helper\n      const gridHelper = new THREE.GridHelper(5, 5);\n      scene.add(gridHelper);\n\n      // Create drone using basic geometry\n      const droneGeometry = new THREE.BoxGeometry(0.4, 0.2, 0.4);\n      const droneMaterial = new THREE.MeshStandardMaterial({\n        color: 0x3498db\n      });\n      const drone = new THREE.Mesh(droneGeometry, droneMaterial);\n      drone.position.set(0, 0.5, 0);\n      scene.add(drone);\n      droneRef.current = drone;\n\n      // Create crop geometries\n      const cropGeometries = {\n        wheat: new THREE.CylinderGeometry(0.1, 0.1, 0.5, 8),\n        corn: new THREE.CylinderGeometry(0.1, 0.1, 0.8, 8),\n        potato: new THREE.SphereGeometry(0.2, 8, 8)\n      };\n      const cropMaterials = {\n        wheat: new THREE.MeshStandardMaterial({\n          color: 0xF4D03F\n        }),\n        corn: new THREE.MeshStandardMaterial({\n          color: 0xF39C12\n        }),\n        potato: new THREE.MeshStandardMaterial({\n          color: 0x935116\n        })\n      };\n\n      // Create crop instances\n      const crops = {};\n      Object.entries(cropGeometries).forEach(([cropType, geometry]) => {\n        const crop = new THREE.Mesh(geometry, cropMaterials[cropType]);\n        crop.visible = false;\n        scene.add(crop);\n        crops[cropType] = crop;\n      });\n\n      // Store references\n      sceneRef.current = scene;\n      cameraRef.current = camera;\n      rendererRef.current = renderer;\n      modelsRef.current = crops;\n      return true;\n    } catch (error) {\n      console.error('Error initializing scene:', error);\n      return false;\n    }\n  };\n\n  // Animation loop\n  const startAnimation = () => {\n    if (!isMounted) return;\n    const animate = () => {\n      if (!isMounted) return;\n      animationFrameRef.current = requestAnimationFrame(animate);\n      if (droneRef.current) {\n        droneRef.current.rotation.y += 0.01;\n        droneRef.current.position.y = Math.sin(Date.now() * 0.001) * 0.1 + 0.5;\n      }\n      rendererRef.current.render(sceneRef.current, cameraRef.current);\n    };\n    animate();\n  };\n\n  // Initialize everything\n  useEffect(() => {\n    if (!isMounted) return;\n    const initialize = async () => {\n      if (isInitialized) return;\n      const sceneInitialized = initializeScene();\n      if (!sceneInitialized) return;\n      startAnimation();\n      setIsInitialized(true);\n    };\n    initialize();\n    return () => {\n      if (animationFrameRef.current) {\n        cancelAnimationFrame(animationFrameRef.current);\n      }\n      if (rendererRef.current) {\n        rendererRef.current.dispose();\n      }\n    };\n  }, [isInitialized, isMounted]);\n\n  // Update game state\n  useEffect(() => {\n    if (!isInitialized || !isMounted) return;\n    if (droneRef.current) {\n      droneRef.current.position.set(gameState.dronePosition.x - 2, 0.5, gameState.dronePosition.y - 2);\n    }\n\n    // Update crop positions\n    gameState.land.forEach((tile, index) => {\n      const x = Math.floor(index / 5);\n      const y = index % 5;\n      if (tile.hasCrop && modelsRef.current[tile.cropType]) {\n        const model = modelsRef.current[tile.cropType];\n        model.position.set(x - 2, 0.25, y - 2);\n        model.visible = true;\n      }\n    });\n  }, [gameState, isInitialized, isMounted]);\n  if (!isMounted) return null;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      width: '100%',\n      height: '100%',\n      position: 'relative'\n    },\n    children: /*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: canvasRef,\n      style: {\n        width: '100%',\n        height: '100%',\n        display: 'block'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 184,\n    columnNumber: 5\n  }, this);\n};\n_s(Game3D, \"DyLUUm3ReHofNnJuhk+2802sqGM=\");\n_c = Game3D;\nexport default Game3D;\nvar _c;\n$RefreshReg$(_c, \"Game3D\");","map":{"version":3,"names":["React","useRef","useEffect","useState","useLayoutEffect","THREE","jsxDEV","_jsxDEV","Game3D","gameState","setGameState","_s","isInitialized","setIsInitialized","isMounted","setIsMounted","canvasRef","sceneRef","cameraRef","rendererRef","droneRef","animationFrameRef","initializeScene","current","console","warn","scene","Scene","background","Color","camera","PerspectiveCamera","position","set","lookAt","renderer","WebGLRenderer","canvas","antialias","alpha","setSize","ambientLight","AmbientLight","add","directionalLight","DirectionalLight","groundGeometry","PlaneGeometry","groundMaterial","MeshStandardMaterial","color","roughness","metalness","ground","Mesh","rotation","x","Math","PI","gridHelper","GridHelper","droneGeometry","BoxGeometry","droneMaterial","drone","cropGeometries","wheat","CylinderGeometry","corn","potato","SphereGeometry","cropMaterials","crops","Object","entries","forEach","cropType","geometry","crop","visible","modelsRef","error","startAnimation","animate","requestAnimationFrame","y","sin","Date","now","render","initialize","sceneInitialized","cancelAnimationFrame","dispose","dronePosition","land","tile","index","floor","hasCrop","model","style","width","height","children","ref","display","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/SPIDER/Downloads/Project/Demo GPT/Demo 1/src/components/Game3D.js"],"sourcesContent":["import React, { useRef, useEffect, useState, useLayoutEffect } from 'react';\r\nimport * as THREE from 'three';\r\n\r\nconst Game3D = ({ gameState, setGameState }) => {\r\n  const [isInitialized, setIsInitialized] = useState(false);\r\n  const [isMounted, setIsMounted] = useState(false);\r\n  const canvasRef = useRef(null);\r\n  const sceneRef = useRef(null);\r\n  const cameraRef = useRef(null);\r\n  const rendererRef = useRef(null);\r\n  const droneRef = useRef(null);\r\n  const animationFrameRef = useRef(null);\r\n\r\n  // Ensure component is mounted before initialization\r\n  useLayoutEffect(() => {\r\n    setIsMounted(true);\r\n    return () => setIsMounted(false);\r\n  }, []);\r\n\r\n  // Initialize Three.js scene\r\n  const initializeScene = () => {\r\n    try {\r\n      if (!canvasRef.current || !isMounted) {\r\n        console.warn('Canvas element not found or component not mounted');\r\n        return false;\r\n      }\r\n\r\n      // Create scene\r\n      const scene = new THREE.Scene();\r\n      scene.background = new THREE.Color(0x87CEEB);\r\n      \r\n      // Create camera\r\n      const camera = new THREE.PerspectiveCamera(75, 1, 0.1, 1000);\r\n      camera.position.set(5, 5, 5);\r\n      camera.lookAt(0, 0, 0);\r\n      \r\n      // Create renderer\r\n      const renderer = new THREE.WebGLRenderer({ \r\n        canvas: canvasRef.current,\r\n        antialias: true,\r\n        alpha: true\r\n      });\r\n      renderer.setSize(600, 600, false);\r\n\r\n      // Add lights\r\n      const ambientLight = new THREE.AmbientLight(0xffffff, 0.5);\r\n      scene.add(ambientLight);\r\n      \r\n      const directionalLight = new THREE.DirectionalLight(0xffffff, 0.8);\r\n      directionalLight.position.set(10, 10, 5);\r\n      scene.add(directionalLight);\r\n\r\n      // Create ground plane\r\n      const groundGeometry = new THREE.PlaneGeometry(5, 5);\r\n      const groundMaterial = new THREE.MeshStandardMaterial({ \r\n        color: 0x8B4513,\r\n        roughness: 0.8,\r\n        metalness: 0.2\r\n      });\r\n      const ground = new THREE.Mesh(groundGeometry, groundMaterial);\r\n      ground.rotation.x = -Math.PI / 2;\r\n      scene.add(ground);\r\n\r\n      // Create grid helper\r\n      const gridHelper = new THREE.GridHelper(5, 5);\r\n      scene.add(gridHelper);\r\n\r\n      // Create drone using basic geometry\r\n      const droneGeometry = new THREE.BoxGeometry(0.4, 0.2, 0.4);\r\n      const droneMaterial = new THREE.MeshStandardMaterial({ color: 0x3498db });\r\n      const drone = new THREE.Mesh(droneGeometry, droneMaterial);\r\n      drone.position.set(0, 0.5, 0);\r\n      scene.add(drone);\r\n      droneRef.current = drone;\r\n\r\n      // Create crop geometries\r\n      const cropGeometries = {\r\n        wheat: new THREE.CylinderGeometry(0.1, 0.1, 0.5, 8),\r\n        corn: new THREE.CylinderGeometry(0.1, 0.1, 0.8, 8),\r\n        potato: new THREE.SphereGeometry(0.2, 8, 8)\r\n      };\r\n\r\n      const cropMaterials = {\r\n        wheat: new THREE.MeshStandardMaterial({ color: 0xF4D03F }),\r\n        corn: new THREE.MeshStandardMaterial({ color: 0xF39C12 }),\r\n        potato: new THREE.MeshStandardMaterial({ color: 0x935116 })\r\n      };\r\n\r\n      // Create crop instances\r\n      const crops = {};\r\n      Object.entries(cropGeometries).forEach(([cropType, geometry]) => {\r\n        const crop = new THREE.Mesh(geometry, cropMaterials[cropType]);\r\n        crop.visible = false;\r\n        scene.add(crop);\r\n        crops[cropType] = crop;\r\n      });\r\n\r\n      // Store references\r\n      sceneRef.current = scene;\r\n      cameraRef.current = camera;\r\n      rendererRef.current = renderer;\r\n      modelsRef.current = crops;\r\n\r\n      return true;\r\n    } catch (error) {\r\n      console.error('Error initializing scene:', error);\r\n      return false;\r\n    }\r\n  };\r\n\r\n  // Animation loop\r\n  const startAnimation = () => {\r\n    if (!isMounted) return;\r\n\r\n    const animate = () => {\r\n      if (!isMounted) return;\r\n      \r\n      animationFrameRef.current = requestAnimationFrame(animate);\r\n      \r\n      if (droneRef.current) {\r\n        droneRef.current.rotation.y += 0.01;\r\n        droneRef.current.position.y = Math.sin(Date.now() * 0.001) * 0.1 + 0.5;\r\n      }\r\n\r\n      rendererRef.current.render(sceneRef.current, cameraRef.current);\r\n    };\r\n    animate();\r\n  };\r\n\r\n  // Initialize everything\r\n  useEffect(() => {\r\n    if (!isMounted) return;\r\n\r\n    const initialize = async () => {\r\n      if (isInitialized) return;\r\n\r\n      const sceneInitialized = initializeScene();\r\n      if (!sceneInitialized) return;\r\n\r\n      startAnimation();\r\n      setIsInitialized(true);\r\n    };\r\n\r\n    initialize();\r\n\r\n    return () => {\r\n      if (animationFrameRef.current) {\r\n        cancelAnimationFrame(animationFrameRef.current);\r\n      }\r\n      if (rendererRef.current) {\r\n        rendererRef.current.dispose();\r\n      }\r\n    };\r\n  }, [isInitialized, isMounted]);\r\n\r\n  // Update game state\r\n  useEffect(() => {\r\n    if (!isInitialized || !isMounted) return;\r\n\r\n    if (droneRef.current) {\r\n      droneRef.current.position.set(\r\n        gameState.dronePosition.x - 2,\r\n        0.5,\r\n        gameState.dronePosition.y - 2\r\n      );\r\n    }\r\n\r\n    // Update crop positions\r\n    gameState.land.forEach((tile, index) => {\r\n      const x = Math.floor(index / 5);\r\n      const y = index % 5;\r\n      \r\n      if (tile.hasCrop && modelsRef.current[tile.cropType]) {\r\n        const model = modelsRef.current[tile.cropType];\r\n        model.position.set(x - 2, 0.25, y - 2);\r\n        model.visible = true;\r\n      }\r\n    });\r\n  }, [gameState, isInitialized, isMounted]);\r\n\r\n  if (!isMounted) return null;\r\n\r\n  return (\r\n    <div style={{ width: '100%', height: '100%', position: 'relative' }}>\r\n      <canvas \r\n        ref={canvasRef} \r\n        style={{ \r\n          width: '100%', \r\n          height: '100%',\r\n          display: 'block'\r\n        }} \r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Game3D; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}