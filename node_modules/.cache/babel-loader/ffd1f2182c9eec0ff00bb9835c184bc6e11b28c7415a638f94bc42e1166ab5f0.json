{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\SPIDER\\\\Downloads\\\\Project\\\\Demo GPT\\\\Demo 1\\\\src\\\\components\\\\Game3D.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect } from 'react';\nimport * as THREE from 'three';\nimport { OrbitControls } from 'three/addons/controls/OrbitControls.js';\nimport { GLTFLoader } from 'three/addons/loaders/GLTFLoader.js';\nimport { OBJLoader } from 'three/addons/loaders/OBJLoader.js';\nimport { EffectComposer } from 'three/addons/postprocessing/EffectComposer.js';\nimport { RenderPass } from 'three/addons/postprocessing/RenderPass.js';\nimport { UnrealBloomPass } from 'three/addons/postprocessing/UnrealBloomPass.js';\nimport { SMAAPass } from 'three/addons/postprocessing/SMAAPass.js';\nimport { Sky } from 'three/addons/objects/Sky.js';\nimport { DataTexture } from 'three';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Game3D = ({\n  gameState,\n  onActionComplete,\n  lastAction = null // { type: 'PLOW'|'PLANT'|'GROW'|'HARVEST', tileIndex: number }\n}) => {\n  _s();\n  const canvasRef = useRef(null);\n  const sceneRef = useRef(null);\n  const droneRef = useRef(null);\n  const composerRef = useRef(null);\n  const modelsRef = useRef({});\n  const texturesRef = useRef({});\n  const actionQueueRef = useRef([]);\n\n  // Convert game coordinates to scene coordinates\n  const gameToScene = React.useCallback((x, y) => {\n    const size = Math.sqrt(gameState.land.length);\n    const offset = (size - 1) / 2;\n    return {\n      x: x - offset,\n      z: y - offset\n    };\n  }, [gameState.land.length]);\n\n  // Calculate camera position based on grid size\n  const calculateCameraPosition = () => {\n    const size = Math.sqrt(gameState.land.length);\n    const distance = 2 + size * 1.5; // Base distance that scales with grid size\n    const height = 3 + size * 1.2; // Base height that scales with grid size\n    return {\n      position: new THREE.Vector3(distance, height, distance),\n      target: new THREE.Vector3(0, 0, 0)\n    };\n  };\n\n  // Generate procedural texture\n  const generateProceduralTexture = (type, size = 512) => {\n    const data = new Uint8Array(size * size * 4); // Changed to 4 components for RGBA\n\n    for (let i = 0; i < size * size; i++) {\n      const stride = i * 4; // Changed to stride of 4\n\n      let r, g, b;\n      switch (type) {\n        case 'grass':\n          {\n            // Green grass with variation\n            r = 100 + Math.random() * 50;\n            g = 150 + Math.random() * 50;\n            b = 50 + Math.random() * 30;\n            break;\n          }\n        case 'soil':\n          {\n            // Brown soil with variation\n            const brown = 139 + Math.random() * 30;\n            r = brown;\n            g = brown * 0.6;\n            b = brown * 0.3;\n            break;\n          }\n        case 'farmland':\n          {\n            // Tilled soil with rows\n            const row = Math.floor(i / size % 8);\n            const base = row < 4 ? 120 : 139;\n            r = base + Math.random() * 20;\n            g = base * 0.6;\n            b = base * 0.3;\n            break;\n          }\n        case 'wheat':\n          {\n            // Yellow wheat\n            r = 240 + Math.random() * 15;\n            g = 230 + Math.random() * 15;\n            b = 140 + Math.random() * 15;\n            break;\n          }\n        case 'corn':\n          {\n            // Golden corn\n            r = 255;\n            g = 215 + Math.random() * 15;\n            b = 0;\n            break;\n          }\n        case 'potato':\n          {\n            // Brown potato plants\n            r = 101 + Math.random() * 20;\n            g = 67 + Math.random() * 20;\n            b = 33 + Math.random() * 20;\n            break;\n          }\n        default:\n          {\n            // Default green\n            r = 144;\n            g = 238;\n            b = 144;\n            break;\n          }\n      }\n      data[stride] = r; // R\n      data[stride + 1] = g; // G\n      data[stride + 2] = b; // B\n      data[stride + 3] = 255; // A (fully opaque)\n    }\n    const texture = new DataTexture(data, size, size, THREE.RGBAFormat);\n    texture.wrapS = texture.wrapT = THREE.RepeatWrapping;\n    texture.needsUpdate = true;\n    return texture;\n  };\n\n  // Load textures\n  const loadTextures = async () => {\n    try {\n      texturesRef.current = {\n        grass: {\n          diffuse: generateProceduralTexture('grass'),\n          normal: generateProceduralTexture('grass')\n        },\n        soil: {\n          diffuse: generateProceduralTexture('soil'),\n          normal: generateProceduralTexture('soil')\n        },\n        farmland: {\n          diffuse: generateProceduralTexture('farmland'),\n          normal: generateProceduralTexture('farmland')\n        },\n        wheat: {\n          diffuse: generateProceduralTexture('wheat'),\n          normal: generateProceduralTexture('wheat')\n        },\n        corn: {\n          diffuse: generateProceduralTexture('corn'),\n          normal: generateProceduralTexture('corn')\n        },\n        potato: {\n          diffuse: generateProceduralTexture('potato'),\n          normal: generateProceduralTexture('potato')\n        }\n      };\n\n      // Configure texture properties\n      Object.values(texturesRef.current).forEach(textures => {\n        Object.values(textures).forEach(texture => {\n          texture.wrapS = texture.wrapT = THREE.RepeatWrapping;\n          texture.repeat.set(4, 4); // Increase repetition for more detail\n        });\n      });\n    } catch (error) {\n      console.error('Error generating textures:', error);\n    }\n  };\n\n  // Load models\n  const loadModels = async () => {\n    const gltfLoader = new GLTFLoader();\n    const objLoader = new OBJLoader();\n    const loadGLTF = url => new Promise((resolve, reject) => {\n      gltfLoader.load(url, resolve, undefined, reject);\n    });\n    const loadOBJ = url => new Promise((resolve, reject) => {\n      objLoader.load(url, resolve, undefined, reject);\n    });\n    try {\n      // Load drone model\n      const droneModel = await loadGLTF('/models/drone.glb');\n      modelsRef.current.drone = droneModel.scene;\n\n      // Load crop models\n      modelsRef.current.wheat = await loadOBJ('/models/wheat.obj');\n      modelsRef.current.corn = await loadOBJ('/models/corn.obj');\n      modelsRef.current.potato = await loadOBJ('/models/potato.obj');\n\n      // Configure models\n      Object.values(modelsRef.current).forEach(model => {\n        model.traverse(child => {\n          if (child.isMesh) {\n            child.castShadow = true;\n            child.receiveShadow = true;\n          }\n        });\n      });\n    } catch (error) {\n      console.error('Error loading models:', error);\n    }\n  };\n\n  // Create environment map\n  const createEnvironmentMap = renderer => {\n    const pmremGenerator = new THREE.PMREMGenerator(renderer);\n    pmremGenerator.compileEquirectangularShader();\n    const sky = new Sky();\n    sky.scale.setScalar(450000);\n    const sun = new THREE.Vector3();\n    const uniforms = sky.material.uniforms;\n    uniforms['turbidity'].value = 10;\n    uniforms['rayleigh'].value = 3;\n    uniforms['mieCoefficient'].value = 0.005;\n    uniforms['mieDirectionalG'].value = 0.7;\n    const phi = THREE.MathUtils.degToRad(90 - 2);\n    const theta = THREE.MathUtils.degToRad(180);\n    sun.setFromSphericalCoords(1, phi, theta);\n    uniforms['sunPosition'].value.copy(sun);\n    const renderTarget = pmremGenerator.fromScene(sky);\n    pmremGenerator.dispose();\n    return renderTarget.texture;\n  };\n\n  // Create fallback drone model\n  const createFallbackDrone = () => {\n    const droneGroup = new THREE.Group();\n\n    // Drone body\n    const bodyGeometry = new THREE.BoxGeometry(0.4, 0.1, 0.4);\n    const bodyMaterial = new THREE.MeshStandardMaterial({\n      color: 0x3498db,\n      metalness: 0.8,\n      roughness: 0.2\n    });\n    const body = new THREE.Mesh(bodyGeometry, bodyMaterial);\n    body.castShadow = true;\n    droneGroup.add(body);\n\n    // Drone arms\n    const armGeometry = new THREE.CylinderGeometry(0.02, 0.02, 0.3);\n    const armMaterial = new THREE.MeshStandardMaterial({\n      color: 0x2c3e50,\n      metalness: 0.5,\n      roughness: 0.5\n    });\n\n    // Create four arms\n    for (let i = 0; i < 4; i++) {\n      const arm = new THREE.Mesh(armGeometry, armMaterial);\n      arm.position.y = 0.05;\n      arm.rotation.z = Math.PI / 2;\n      arm.rotation.y = i * Math.PI / 2;\n      arm.position.x = Math.cos(arm.rotation.y) * 0.2;\n      arm.position.z = Math.sin(arm.rotation.y) * 0.2;\n      arm.castShadow = true;\n      droneGroup.add(arm);\n    }\n\n    // Propellers\n    const propGeometry = new THREE.BoxGeometry(0.05, 0.01, 0.3);\n    const propMaterial = new THREE.MeshStandardMaterial({\n      color: 0x95a5a6,\n      metalness: 0.3,\n      roughness: 0.7\n    });\n\n    // Create four propellers\n    for (let i = 0; i < 4; i++) {\n      const propeller = new THREE.Group();\n      const blade1 = new THREE.Mesh(propGeometry, propMaterial);\n      const blade2 = new THREE.Mesh(propGeometry, propMaterial);\n      blade2.rotation.y = Math.PI / 2;\n      propeller.add(blade1, blade2);\n      propeller.position.y = 0.1;\n      propeller.position.x = Math.cos(i * Math.PI / 2) * 0.2;\n      propeller.position.z = Math.sin(i * Math.PI / 2) * 0.2;\n      propeller.castShadow = true;\n      droneGroup.add(propeller);\n    }\n    return droneGroup;\n  };\n\n  // Animation states and durations\n  const ANIMATIONS = {\n    PLOW: {\n      duration: 1000,\n      heightOffset: 0.05\n    },\n    PLANT: {\n      duration: 1500,\n      heightOffset: 0.1\n    },\n    GROW: {\n      duration: 3000,\n      stages: 3\n    },\n    HARVEST: {\n      duration: 2000,\n      heightOffset: 0.15\n    }\n  };\n\n  // Create and update ground plane\n  const updateGround = () => {\n    var _texturesRef$current, _texturesRef$current$;\n    if (!sceneRef.current) return;\n\n    // Remove old ground\n    const oldGround = sceneRef.current.children.find(child => child.userData.isGround);\n    if (oldGround) {\n      sceneRef.current.remove(oldGround);\n      if (oldGround.geometry) oldGround.geometry.dispose();\n      if (oldGround.material) oldGround.material.dispose();\n    }\n\n    // Create new ground with dynamic size\n    const size = Math.sqrt(gameState.land.length);\n    const groundSize = Math.max(size * 1.5, 2); // At least 2 units, scales with grid\n    const groundGeometry = new THREE.PlaneGeometry(groundSize, groundSize);\n    const groundMaterial = new THREE.MeshStandardMaterial({\n      color: 0x90EE90,\n      // Default grass color\n      roughness: 0.8,\n      metalness: 0.2\n    });\n\n    // Apply texture if available\n    if ((_texturesRef$current = texturesRef.current) !== null && _texturesRef$current !== void 0 && (_texturesRef$current$ = _texturesRef$current.grass) !== null && _texturesRef$current$ !== void 0 && _texturesRef$current$.diffuse) {\n      groundMaterial.map = texturesRef.current.grass.diffuse.clone(); // Clone texture to avoid sharing\n      groundMaterial.map.repeat.set(size, size);\n      groundMaterial.map.wrapS = groundMaterial.map.wrapT = THREE.RepeatWrapping;\n      groundMaterial.needsUpdate = true;\n    }\n    const ground = new THREE.Mesh(groundGeometry, groundMaterial);\n    ground.rotation.x = -Math.PI / 2;\n    ground.position.y = 0;\n    ground.receiveShadow = true;\n    ground.userData.isGround = true;\n    sceneRef.current.add(ground);\n  };\n\n  // Create and update tiles with animations\n  const updateTiles = () => {\n    if (!sceneRef.current) return;\n\n    // Remove old tiles\n    const oldTiles = sceneRef.current.children.filter(child => child.userData.isTile || child.userData.isCrop);\n    oldTiles.forEach(tile => {\n      sceneRef.current.remove(tile);\n      if (tile.geometry) tile.geometry.dispose();\n      if (tile.material) {\n        if (Array.isArray(tile.material)) {\n          tile.material.forEach(m => m.dispose());\n        } else {\n          tile.material.dispose();\n        }\n      }\n    });\n\n    // Create new tiles based on gameState\n    const size = Math.sqrt(gameState.land.length);\n    const tileSize = 0.95;\n    const offset = (size - 1) / 2;\n    gameState.land.forEach((tile, index) => {\n      const x = Math.floor(index / size);\n      const z = index % size;\n      const position = new THREE.Vector3(x - offset, 0.01, z - offset);\n\n      // Create base tile\n      const geometry = new THREE.PlaneGeometry(tileSize, tileSize);\n      let material;\n      if (tile.isPlowed) {\n        var _texturesRef$current2, _texturesRef$current3, _texturesRef$current4, _texturesRef$current5;\n        material = new THREE.MeshStandardMaterial({\n          map: ((_texturesRef$current2 = texturesRef.current) === null || _texturesRef$current2 === void 0 ? void 0 : (_texturesRef$current3 = _texturesRef$current2.soil) === null || _texturesRef$current3 === void 0 ? void 0 : _texturesRef$current3.diffuse) || null,\n          normalMap: ((_texturesRef$current4 = texturesRef.current) === null || _texturesRef$current4 === void 0 ? void 0 : (_texturesRef$current5 = _texturesRef$current4.soil) === null || _texturesRef$current5 === void 0 ? void 0 : _texturesRef$current5.normal) || null,\n          roughness: 0.8,\n          metalness: 0.2\n        });\n      } else if (tile.hasCrop) {\n        var _texturesRef$current6, _texturesRef$current7, _texturesRef$current8, _texturesRef$current9;\n        material = new THREE.MeshStandardMaterial({\n          map: ((_texturesRef$current6 = texturesRef.current) === null || _texturesRef$current6 === void 0 ? void 0 : (_texturesRef$current7 = _texturesRef$current6.farmland) === null || _texturesRef$current7 === void 0 ? void 0 : _texturesRef$current7.diffuse) || null,\n          normalMap: ((_texturesRef$current8 = texturesRef.current) === null || _texturesRef$current8 === void 0 ? void 0 : (_texturesRef$current9 = _texturesRef$current8.farmland) === null || _texturesRef$current9 === void 0 ? void 0 : _texturesRef$current9.normal) || null,\n          roughness: 0.7,\n          metalness: 0.3\n        });\n      } else {\n        var _texturesRef$current10, _texturesRef$current11, _texturesRef$current12, _texturesRef$current13;\n        material = new THREE.MeshStandardMaterial({\n          map: ((_texturesRef$current10 = texturesRef.current) === null || _texturesRef$current10 === void 0 ? void 0 : (_texturesRef$current11 = _texturesRef$current10.grass) === null || _texturesRef$current11 === void 0 ? void 0 : _texturesRef$current11.diffuse) || null,\n          normalMap: ((_texturesRef$current12 = texturesRef.current) === null || _texturesRef$current12 === void 0 ? void 0 : (_texturesRef$current13 = _texturesRef$current12.grass) === null || _texturesRef$current13 === void 0 ? void 0 : _texturesRef$current13.normal) || null,\n          roughness: 0.9,\n          metalness: 0.1\n        });\n      }\n      const mesh = new THREE.Mesh(geometry, material);\n      mesh.rotation.x = -Math.PI / 2;\n      mesh.position.copy(position);\n      mesh.receiveShadow = true;\n      mesh.userData.isTile = true;\n      mesh.userData.tileIndex = index;\n      sceneRef.current.add(mesh);\n\n      // Add crop if exists\n      if (tile.hasCrop && tile.cropType) {\n        var _texturesRef$current14, _texturesRef$current15, _texturesRef$current16, _texturesRef$current17;\n        const cropGeometry = new THREE.PlaneGeometry(tileSize * 0.8, tileSize * 0.8);\n        const cropMaterial = new THREE.MeshStandardMaterial({\n          map: ((_texturesRef$current14 = texturesRef.current) === null || _texturesRef$current14 === void 0 ? void 0 : (_texturesRef$current15 = _texturesRef$current14[tile.cropType]) === null || _texturesRef$current15 === void 0 ? void 0 : _texturesRef$current15.diffuse) || null,\n          normalMap: ((_texturesRef$current16 = texturesRef.current) === null || _texturesRef$current16 === void 0 ? void 0 : (_texturesRef$current17 = _texturesRef$current16[tile.cropType]) === null || _texturesRef$current17 === void 0 ? void 0 : _texturesRef$current17.normal) || null,\n          transparent: true,\n          alphaTest: 0.5,\n          roughness: 0.8,\n          metalness: 0.2\n        });\n        const cropMesh = new THREE.Mesh(cropGeometry, cropMaterial);\n        cropMesh.rotation.x = -Math.PI / 2;\n\n        // Calculate growth height based on crop state\n        const growthProgress = tile.cropState === 'ready' ? 1 : tile.cropState === 'growing' ? 0.5 : 0.2;\n        cropMesh.position.set(position.x, position.y + 0.2 * growthProgress,\n        // Height based on growth\n        position.z);\n        cropMesh.userData.isCrop = true;\n        cropMesh.userData.tileIndex = index;\n        cropMesh.userData.cropType = tile.cropType;\n        cropMesh.userData.growthState = tile.cropState;\n        sceneRef.current.add(cropMesh);\n      }\n    });\n\n    // Update grid helper\n    const oldGrid = sceneRef.current.children.find(child => child instanceof THREE.GridHelper);\n    if (oldGrid) {\n      sceneRef.current.remove(oldGrid);\n      oldGrid.material.dispose();\n      oldGrid.geometry.dispose();\n    }\n    const gridHelper = new THREE.GridHelper(size, size, 0x000000, 0x000000);\n    gridHelper.position.y = 0.01;\n    gridHelper.material.opacity = 0.2;\n    gridHelper.material.transparent = true;\n    sceneRef.current.add(gridHelper);\n\n    // Update ground plane\n    updateGround();\n  };\n\n  // Add animation function for tile actions\n  const animateTileAction = (tileIndex, actionType) => {\n    if (!sceneRef.current) return;\n    const tile = sceneRef.current.children.find(child => (child.userData.isTile || child.userData.isCrop) && child.userData.tileIndex === tileIndex);\n    if (!tile) return;\n    const animation = ANIMATIONS[actionType];\n    const startTime = Date.now();\n    const startPosition = tile.position.clone();\n    const animate = () => {\n      const elapsed = Date.now() - startTime;\n      const progress = Math.min(elapsed / animation.duration, 1);\n\n      // Different animation behaviors based on action type\n      switch (actionType) {\n        case 'PLOW':\n          // Plow animation: tile rises and falls\n          tile.position.y = startPosition.y + Math.sin(progress * Math.PI) * animation.heightOffset;\n          break;\n        case 'PLANT':\n          // Plant animation: crop grows from ground\n          if (tile.userData.isCrop) {\n            tile.scale.y = progress;\n            tile.position.y = startPosition.y + progress * animation.heightOffset;\n          }\n          break;\n        case 'GROW':\n          // Growth animation: crop scales up\n          if (tile.userData.isCrop) {\n            const stage = Math.floor(progress * animation.stages);\n            const stageProgress = progress * animation.stages % 1;\n            tile.scale.set(1 + 0.1 * stage + 0.1 * stageProgress, 1 + 0.2 * stage + 0.2 * stageProgress, 1 + 0.1 * stage + 0.1 * stageProgress);\n          }\n          break;\n        case 'HARVEST':\n          // Harvest animation: crop rises and fades\n          if (tile.userData.isCrop) {\n            tile.position.y = startPosition.y + progress * animation.heightOffset;\n            if (tile.material) {\n              tile.material.opacity = 1 - progress;\n            }\n          }\n          break;\n      }\n      if (progress < 1) {\n        requestAnimationFrame(animate);\n      } else if (actionType === 'HARVEST') {\n        // Remove crop mesh after harvest animation\n        sceneRef.current.remove(tile);\n        if (tile.geometry) tile.geometry.dispose();\n        if (tile.material) tile.material.dispose();\n      }\n    };\n    animate();\n  };\n\n  // Handle incoming actions\n  useEffect(() => {\n    if (lastAction && lastAction.type && lastAction.tileIndex !== undefined) {\n      actionQueueRef.current.push(lastAction);\n\n      // Process the action\n      const processAction = async () => {\n        const action = actionQueueRef.current[0];\n        await new Promise(resolve => {\n          animateTileAction(action.tileIndex, action.type);\n\n          // Wait for animation to complete\n          const duration = ANIMATIONS[action.type].duration;\n          setTimeout(() => {\n            actionQueueRef.current.shift();\n            if (onActionComplete) {\n              onActionComplete(action);\n            }\n            resolve();\n          }, duration);\n        });\n\n        // Process next action if any\n        if (actionQueueRef.current.length > 0) {\n          processAction();\n        }\n      };\n      if (actionQueueRef.current.length === 1) {\n        processAction();\n      }\n    }\n  }, [lastAction]);\n  useEffect(() => {\n    if (!canvasRef.current) return;\n\n    // Create scene\n    const scene = new THREE.Scene();\n    scene.background = new THREE.Color(0x87CEEB);\n    scene.fog = new THREE.FogExp2(0x87CEEB, 0.01);\n    sceneRef.current = scene;\n\n    // Create camera with initial position\n    const camera = new THREE.PerspectiveCamera(60, 1, 0.1, 1000);\n    const initialCamera = calculateCameraPosition();\n    camera.position.copy(initialCamera.position);\n    camera.lookAt(initialCamera.target);\n\n    // Create renderer with improved settings\n    const renderer = new THREE.WebGLRenderer({\n      canvas: canvasRef.current,\n      antialias: true,\n      powerPreference: \"high-performance\",\n      stencil: false\n    });\n    renderer.setSize(600, 600);\n    renderer.shadowMap.enabled = true;\n    renderer.shadowMap.type = THREE.PCFSoftShadowMap;\n    renderer.outputColorSpace = THREE.SRGBColorSpace;\n    renderer.toneMapping = THREE.ACESFilmicToneMapping;\n    renderer.toneMappingExposure = 1.0;\n    renderer.setPixelRatio(window.devicePixelRatio);\n\n    // Create environment map\n    const envMap = createEnvironmentMap(renderer);\n    scene.environment = envMap;\n\n    // Add lights with improved settings\n    const ambientLight = new THREE.AmbientLight(0xffffff, 0.5);\n    scene.add(ambientLight);\n    const sunLight = new THREE.DirectionalLight(0xffffff, 2.0);\n    sunLight.position.set(10, 10, 5);\n    sunLight.castShadow = true;\n    sunLight.shadow.mapSize.width = 2048;\n    sunLight.shadow.mapSize.height = 2048;\n    sunLight.shadow.camera.near = 0.5;\n    sunLight.shadow.camera.far = 50;\n    sunLight.shadow.camera.left = -10;\n    sunLight.shadow.camera.right = 10;\n    sunLight.shadow.camera.top = 10;\n    sunLight.shadow.camera.bottom = -10;\n    sunLight.shadow.bias = -0.001;\n    scene.add(sunLight);\n\n    // Add subtle point lights for better ambiance\n    const pointLight1 = new THREE.PointLight(0xffd700, 0.5, 10);\n    pointLight1.position.set(2, 2, 2);\n    scene.add(pointLight1);\n    const pointLight2 = new THREE.PointLight(0x00ffff, 0.3, 10);\n    pointLight2.position.set(-2, 3, -2);\n    scene.add(pointLight2);\n\n    // Initial ground setup will be handled by updateTiles\n    updateTiles();\n\n    // Setup post-processing with improved settings\n    const composer = new EffectComposer(renderer);\n    composerRef.current = composer;\n    const renderPass = new RenderPass(scene, camera);\n    composer.addPass(renderPass);\n    const bloomPass = new UnrealBloomPass(new THREE.Vector2(600, 600), 0.5,\n    // strength\n    0.4,\n    // radius\n    0.85 // threshold\n    );\n    composer.addPass(bloomPass);\n    const smaaPass = new SMAAPass(600, 600);\n    composer.addPass(smaaPass);\n\n    // Add OrbitControls with dynamic limits\n    const controls = new OrbitControls(camera, renderer.domElement);\n    controls.enableDamping = true;\n    controls.dampingFactor = 0.05;\n    controls.screenSpacePanning = false;\n    controls.minDistance = 2;\n    controls.maxDistance = 20;\n    controls.maxPolarAngle = Math.PI / 2.1;\n    controls.minPolarAngle = Math.PI / 6;\n    controls.enableZoom = true;\n    controls.zoomSpeed = 0.5;\n    controls.rotateSpeed = 0.5;\n\n    // Set initial camera position\n    camera.position.copy(initialCamera.position);\n    controls.target.copy(initialCamera.target);\n    controls.update();\n\n    // Load assets with improved error handling\n    Promise.all([loadTextures(), loadModels()]).then(() => {\n      // Add drone to scene with improved fallback handling\n      if (modelsRef.current.drone) {\n        const drone = modelsRef.current.drone.clone();\n        drone.scale.set(0.5, 0.5, 0.5);\n        drone.traverse(child => {\n          if (child.isMesh) {\n            child.castShadow = true;\n            child.material.envMapIntensity = 1;\n          }\n        });\n        scene.add(drone);\n        droneRef.current = drone;\n      } else {\n        console.log('Using fallback drone model');\n        const fallbackDrone = createFallbackDrone();\n        scene.add(fallbackDrone);\n        droneRef.current = fallbackDrone;\n      }\n    }).catch(error => {\n      console.error('Error loading assets:', error);\n      const fallbackDrone = createFallbackDrone();\n      scene.add(fallbackDrone);\n      droneRef.current = fallbackDrone;\n    });\n\n    // Animation loop with improved timing\n    let lastTime = 0;\n    const animate = time => {\n      requestAnimationFrame(animate);\n      const delta = (time - lastTime) / 1000;\n      lastTime = time;\n\n      // Update drone hover animation\n      if (droneRef.current) {\n        const baseHeight = 0.5;\n        droneRef.current.position.y = baseHeight + Math.sin(time * 0.002) * 0.1;\n\n        // Rotate propellers if using fallback model\n        if (!modelsRef.current.drone) {\n          droneRef.current.children.forEach((child, index) => {\n            if (index > 4) {\n              // Skip body and arms\n              child.rotation.y += 15 * delta;\n            }\n          });\n        }\n      }\n\n      // Update controls and render\n      controls.update();\n      composer.render();\n    };\n    animate(0);\n\n    // Cleanup with improved resource disposal\n    return () => {\n      renderer.dispose();\n      composer.dispose();\n      controls.dispose();\n      envMap.dispose();\n      Object.values(texturesRef.current).forEach(textures => {\n        Object.values(textures).forEach(texture => texture.dispose());\n      });\n      scene.traverse(object => {\n        if (object.geometry) object.geometry.dispose();\n        if (object.material) {\n          if (Array.isArray(object.material)) {\n            object.material.forEach(material => material.dispose());\n          } else {\n            object.material.dispose();\n          }\n        }\n      });\n    };\n  }, []);\n\n  // Update drone position when gameState changes\n  useEffect(() => {\n    if (!droneRef.current || !gameState.dronePosition) return;\n    const targetPos = gameToScene(gameState.dronePosition.x, gameState.dronePosition.y);\n\n    // Smoothly animate to new position\n    const duration = 500; // 0.5 seconds\n    const startPosition = {\n      x: droneRef.current.position.x,\n      y: droneRef.current.position.y,\n      z: droneRef.current.position.z\n    };\n    const startTime = Date.now();\n    const animate = () => {\n      const elapsed = Date.now() - startTime;\n      const progress = Math.min(elapsed / duration, 1);\n\n      // Smooth easing\n      const t = progress < 0.5 ? 4 * progress * progress * progress : 1 - Math.pow(-2 * progress + 2, 3) / 2;\n\n      // Update drone position\n      droneRef.current.position.x = startPosition.x + (targetPos.x - startPosition.x) * t;\n      droneRef.current.position.z = startPosition.z + (targetPos.z - startPosition.z) * t;\n      droneRef.current.position.y = 0.5 + Math.sin(Date.now() * 0.002) * 0.1; // Keep hover animation\n\n      if (progress < 1) {\n        requestAnimationFrame(animate);\n      }\n    };\n    animate();\n  }, [gameState.dronePosition, gameState.land.length, gameToScene]);\n\n  // Update tiles when gameState changes\n  useEffect(() => {\n    updateTiles();\n  }, [gameState.land]);\n\n  // Add new effect to handle camera position updates when grid size changes\n  useEffect(() => {\n    if (!canvasRef.current) return;\n    const newCamera = calculateCameraPosition();\n\n    // Get the orbit controls instance\n    const canvas = canvasRef.current;\n    const controls = canvas.__controls;\n    if (controls) {\n      // Smoothly animate to new position\n      const duration = 1000; // 1 second\n      const startPosition = controls.object.position.clone();\n      const startTarget = controls.target.clone();\n      const startTime = Date.now();\n      const animate = () => {\n        const elapsed = Date.now() - startTime;\n        const progress = Math.min(elapsed / duration, 1);\n\n        // Smooth easing\n        const t = progress < 0.5 ? 4 * progress * progress * progress : 1 - Math.pow(-2 * progress + 2, 3) / 2;\n\n        // Update camera position\n        controls.object.position.lerpVectors(startPosition, newCamera.position, t);\n        controls.target.lerpVectors(startTarget, newCamera.target, t);\n        controls.update();\n        if (progress < 1) {\n          requestAnimationFrame(animate);\n        }\n      };\n      animate();\n    }\n  }, [gameState.land.length]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      width: '600px',\n      height: '600px',\n      backgroundColor: '#000000',\n      margin: '0 auto',\n      borderRadius: '8px',\n      overflow: 'hidden',\n      boxShadow: '0 4px 6px rgba(0, 0, 0, 0.1)'\n    },\n    children: /*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: canvasRef,\n      style: {\n        width: '100%',\n        height: '100%'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 843,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 834,\n    columnNumber: 5\n  }, this);\n};\n_s(Game3D, \"pGZXR9akkM6qwt+/nwUgInwzgsA=\");\n_c = Game3D;\nexport default Game3D;\nvar _c;\n$RefreshReg$(_c, \"Game3D\");","map":{"version":3,"names":["React","useRef","useEffect","THREE","OrbitControls","GLTFLoader","OBJLoader","EffectComposer","RenderPass","UnrealBloomPass","SMAAPass","Sky","DataTexture","jsxDEV","_jsxDEV","Game3D","gameState","onActionComplete","lastAction","_s","canvasRef","sceneRef","droneRef","composerRef","modelsRef","texturesRef","actionQueueRef","gameToScene","useCallback","x","y","size","Math","sqrt","land","length","offset","z","calculateCameraPosition","distance","height","position","Vector3","target","generateProceduralTexture","type","data","Uint8Array","i","stride","r","g","b","random","brown","row","floor","base","texture","RGBAFormat","wrapS","wrapT","RepeatWrapping","needsUpdate","loadTextures","current","grass","diffuse","normal","soil","farmland","wheat","corn","potato","Object","values","forEach","textures","repeat","set","error","console","loadModels","gltfLoader","objLoader","loadGLTF","url","Promise","resolve","reject","load","undefined","loadOBJ","droneModel","drone","scene","model","traverse","child","isMesh","castShadow","receiveShadow","createEnvironmentMap","renderer","pmremGenerator","PMREMGenerator","compileEquirectangularShader","sky","scale","setScalar","sun","uniforms","material","value","phi","MathUtils","degToRad","theta","setFromSphericalCoords","copy","renderTarget","fromScene","dispose","createFallbackDrone","droneGroup","Group","bodyGeometry","BoxGeometry","bodyMaterial","MeshStandardMaterial","color","metalness","roughness","body","Mesh","add","armGeometry","CylinderGeometry","armMaterial","arm","rotation","PI","cos","sin","propGeometry","propMaterial","propeller","blade1","blade2","ANIMATIONS","PLOW","duration","heightOffset","PLANT","GROW","stages","HARVEST","updateGround","_texturesRef$current","_texturesRef$current$","oldGround","children","find","userData","isGround","remove","geometry","groundSize","max","groundGeometry","PlaneGeometry","groundMaterial","map","clone","ground","updateTiles","oldTiles","filter","isTile","isCrop","tile","Array","isArray","m","tileSize","index","isPlowed","_texturesRef$current2","_texturesRef$current3","_texturesRef$current4","_texturesRef$current5","normalMap","hasCrop","_texturesRef$current6","_texturesRef$current7","_texturesRef$current8","_texturesRef$current9","_texturesRef$current10","_texturesRef$current11","_texturesRef$current12","_texturesRef$current13","mesh","tileIndex","cropType","_texturesRef$current14","_texturesRef$current15","_texturesRef$current16","_texturesRef$current17","cropGeometry","cropMaterial","transparent","alphaTest","cropMesh","growthProgress","cropState","growthState","oldGrid","GridHelper","gridHelper","opacity","animateTileAction","actionType","animation","startTime","Date","now","startPosition","animate","elapsed","progress","min","stage","stageProgress","requestAnimationFrame","push","processAction","action","setTimeout","shift","Scene","background","Color","fog","FogExp2","camera","PerspectiveCamera","initialCamera","lookAt","WebGLRenderer","canvas","antialias","powerPreference","stencil","setSize","shadowMap","enabled","PCFSoftShadowMap","outputColorSpace","SRGBColorSpace","toneMapping","ACESFilmicToneMapping","toneMappingExposure","setPixelRatio","window","devicePixelRatio","envMap","environment","ambientLight","AmbientLight","sunLight","DirectionalLight","shadow","mapSize","width","near","far","left","right","top","bottom","bias","pointLight1","PointLight","pointLight2","composer","renderPass","addPass","bloomPass","Vector2","smaaPass","controls","domElement","enableDamping","dampingFactor","screenSpacePanning","minDistance","maxDistance","maxPolarAngle","minPolarAngle","enableZoom","zoomSpeed","rotateSpeed","update","all","then","envMapIntensity","log","fallbackDrone","catch","lastTime","time","delta","baseHeight","render","object","dronePosition","targetPos","t","pow","newCamera","__controls","startTarget","lerpVectors","style","backgroundColor","margin","borderRadius","overflow","boxShadow","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/SPIDER/Downloads/Project/Demo GPT/Demo 1/src/components/Game3D.js"],"sourcesContent":["import React, { useRef, useEffect } from 'react';\r\nimport * as THREE from 'three';\r\nimport { OrbitControls } from 'three/addons/controls/OrbitControls.js';\r\nimport { GLTFLoader } from 'three/addons/loaders/GLTFLoader.js';\r\nimport { OBJLoader } from 'three/addons/loaders/OBJLoader.js';\r\nimport { EffectComposer } from 'three/addons/postprocessing/EffectComposer.js';\r\nimport { RenderPass } from 'three/addons/postprocessing/RenderPass.js';\r\nimport { UnrealBloomPass } from 'three/addons/postprocessing/UnrealBloomPass.js';\r\nimport { SMAAPass } from 'three/addons/postprocessing/SMAAPass.js';\r\nimport { Sky } from 'three/addons/objects/Sky.js';\r\nimport { DataTexture } from 'three';\r\n\r\nconst Game3D = ({ \r\n  gameState, \r\n  onActionComplete,\r\n  lastAction = null  // { type: 'PLOW'|'PLANT'|'GROW'|'HARVEST', tileIndex: number }\r\n}) => {\r\n  const canvasRef = useRef(null);\r\n  const sceneRef = useRef(null);\r\n  const droneRef = useRef(null);\r\n  const composerRef = useRef(null);\r\n  const modelsRef = useRef({});\r\n  const texturesRef = useRef({});\r\n  const actionQueueRef = useRef([]);\r\n\r\n  // Convert game coordinates to scene coordinates\r\n  const gameToScene = React.useCallback((x, y) => {\r\n    const size = Math.sqrt(gameState.land.length);\r\n    const offset = (size - 1) / 2;\r\n    return {\r\n      x: x - offset,\r\n      z: y - offset\r\n    };\r\n  }, [gameState.land.length]);\r\n\r\n  // Calculate camera position based on grid size\r\n  const calculateCameraPosition = () => {\r\n    const size = Math.sqrt(gameState.land.length);\r\n    const distance = 2 + size * 1.5; // Base distance that scales with grid size\r\n    const height = 3 + size * 1.2;   // Base height that scales with grid size\r\n    return {\r\n      position: new THREE.Vector3(distance, height, distance),\r\n      target: new THREE.Vector3(0, 0, 0)\r\n    };\r\n  };\r\n\r\n  // Generate procedural texture\r\n  const generateProceduralTexture = (type, size = 512) => {\r\n    const data = new Uint8Array(size * size * 4); // Changed to 4 components for RGBA\r\n    \r\n    for (let i = 0; i < size * size; i++) {\r\n      const stride = i * 4; // Changed to stride of 4\r\n      \r\n      let r, g, b;\r\n      \r\n      switch (type) {\r\n        case 'grass': {\r\n          // Green grass with variation\r\n          r = 100 + Math.random() * 50;\r\n          g = 150 + Math.random() * 50;\r\n          b = 50 + Math.random() * 30;\r\n          break;\r\n        }\r\n        case 'soil': {\r\n          // Brown soil with variation\r\n          const brown = 139 + Math.random() * 30;\r\n          r = brown;\r\n          g = brown * 0.6;\r\n          b = brown * 0.3;\r\n          break;\r\n        }\r\n        case 'farmland': {\r\n          // Tilled soil with rows\r\n          const row = Math.floor((i / size) % 8);\r\n          const base = row < 4 ? 120 : 139;\r\n          r = base + Math.random() * 20;\r\n          g = base * 0.6;\r\n          b = base * 0.3;\r\n          break;\r\n        }\r\n        case 'wheat': {\r\n          // Yellow wheat\r\n          r = 240 + Math.random() * 15;\r\n          g = 230 + Math.random() * 15;\r\n          b = 140 + Math.random() * 15;\r\n          break;\r\n        }\r\n        case 'corn': {\r\n          // Golden corn\r\n          r = 255;\r\n          g = 215 + Math.random() * 15;\r\n          b = 0;\r\n          break;\r\n        }\r\n        case 'potato': {\r\n          // Brown potato plants\r\n          r = 101 + Math.random() * 20;\r\n          g = 67 + Math.random() * 20;\r\n          b = 33 + Math.random() * 20;\r\n          break;\r\n        }\r\n        default: {\r\n          // Default green\r\n          r = 144;\r\n          g = 238;\r\n          b = 144;\r\n          break;\r\n        }\r\n      }\r\n      \r\n      data[stride] = r;     // R\r\n      data[stride + 1] = g; // G\r\n      data[stride + 2] = b; // B\r\n      data[stride + 3] = 255; // A (fully opaque)\r\n    }\r\n\r\n    const texture = new DataTexture(data, size, size, THREE.RGBAFormat);\r\n    texture.wrapS = texture.wrapT = THREE.RepeatWrapping;\r\n    texture.needsUpdate = true;\r\n    return texture;\r\n  };\r\n\r\n  // Load textures\r\n  const loadTextures = async () => {\r\n    try {\r\n      texturesRef.current = {\r\n        grass: {\r\n          diffuse: generateProceduralTexture('grass'),\r\n          normal: generateProceduralTexture('grass')\r\n        },\r\n        soil: {\r\n          diffuse: generateProceduralTexture('soil'),\r\n          normal: generateProceduralTexture('soil')\r\n        },\r\n        farmland: {\r\n          diffuse: generateProceduralTexture('farmland'),\r\n          normal: generateProceduralTexture('farmland')\r\n        },\r\n        wheat: {\r\n          diffuse: generateProceduralTexture('wheat'),\r\n          normal: generateProceduralTexture('wheat')\r\n        },\r\n        corn: {\r\n          diffuse: generateProceduralTexture('corn'),\r\n          normal: generateProceduralTexture('corn')\r\n        },\r\n        potato: {\r\n          diffuse: generateProceduralTexture('potato'),\r\n          normal: generateProceduralTexture('potato')\r\n        }\r\n      };\r\n\r\n      // Configure texture properties\r\n      Object.values(texturesRef.current).forEach(textures => {\r\n        Object.values(textures).forEach(texture => {\r\n          texture.wrapS = texture.wrapT = THREE.RepeatWrapping;\r\n          texture.repeat.set(4, 4); // Increase repetition for more detail\r\n        });\r\n      });\r\n    } catch (error) {\r\n      console.error('Error generating textures:', error);\r\n    }\r\n  };\r\n\r\n  // Load models\r\n  const loadModels = async () => {\r\n    const gltfLoader = new GLTFLoader();\r\n    const objLoader = new OBJLoader();\r\n\r\n    const loadGLTF = (url) => new Promise((resolve, reject) => {\r\n      gltfLoader.load(url, resolve, undefined, reject);\r\n    });\r\n\r\n    const loadOBJ = (url) => new Promise((resolve, reject) => {\r\n      objLoader.load(url, resolve, undefined, reject);\r\n    });\r\n\r\n    try {\r\n      // Load drone model\r\n      const droneModel = await loadGLTF('/models/drone.glb');\r\n      modelsRef.current.drone = droneModel.scene;\r\n\r\n      // Load crop models\r\n      modelsRef.current.wheat = await loadOBJ('/models/wheat.obj');\r\n      modelsRef.current.corn = await loadOBJ('/models/corn.obj');\r\n      modelsRef.current.potato = await loadOBJ('/models/potato.obj');\r\n\r\n      // Configure models\r\n      Object.values(modelsRef.current).forEach(model => {\r\n        model.traverse(child => {\r\n          if (child.isMesh) {\r\n            child.castShadow = true;\r\n            child.receiveShadow = true;\r\n          }\r\n        });\r\n      });\r\n    } catch (error) {\r\n      console.error('Error loading models:', error);\r\n    }\r\n  };\r\n\r\n  // Create environment map\r\n  const createEnvironmentMap = (renderer) => {\r\n    const pmremGenerator = new THREE.PMREMGenerator(renderer);\r\n    pmremGenerator.compileEquirectangularShader();\r\n\r\n    const sky = new Sky();\r\n    sky.scale.setScalar(450000);\r\n    \r\n    const sun = new THREE.Vector3();\r\n    const uniforms = sky.material.uniforms;\r\n    uniforms['turbidity'].value = 10;\r\n    uniforms['rayleigh'].value = 3;\r\n    uniforms['mieCoefficient'].value = 0.005;\r\n    uniforms['mieDirectionalG'].value = 0.7;\r\n\r\n    const phi = THREE.MathUtils.degToRad(90 - 2);\r\n    const theta = THREE.MathUtils.degToRad(180);\r\n    sun.setFromSphericalCoords(1, phi, theta);\r\n    uniforms['sunPosition'].value.copy(sun);\r\n\r\n    const renderTarget = pmremGenerator.fromScene(sky);\r\n    pmremGenerator.dispose();\r\n\r\n    return renderTarget.texture;\r\n  };\r\n\r\n  // Create fallback drone model\r\n  const createFallbackDrone = () => {\r\n    const droneGroup = new THREE.Group();\r\n\r\n    // Drone body\r\n    const bodyGeometry = new THREE.BoxGeometry(0.4, 0.1, 0.4);\r\n    const bodyMaterial = new THREE.MeshStandardMaterial({\r\n      color: 0x3498db,\r\n      metalness: 0.8,\r\n      roughness: 0.2\r\n    });\r\n    const body = new THREE.Mesh(bodyGeometry, bodyMaterial);\r\n    body.castShadow = true;\r\n    droneGroup.add(body);\r\n\r\n    // Drone arms\r\n    const armGeometry = new THREE.CylinderGeometry(0.02, 0.02, 0.3);\r\n    const armMaterial = new THREE.MeshStandardMaterial({\r\n      color: 0x2c3e50,\r\n      metalness: 0.5,\r\n      roughness: 0.5\r\n    });\r\n\r\n    // Create four arms\r\n    for (let i = 0; i < 4; i++) {\r\n      const arm = new THREE.Mesh(armGeometry, armMaterial);\r\n      arm.position.y = 0.05;\r\n      arm.rotation.z = Math.PI / 2;\r\n      arm.rotation.y = (i * Math.PI) / 2;\r\n      arm.position.x = Math.cos(arm.rotation.y) * 0.2;\r\n      arm.position.z = Math.sin(arm.rotation.y) * 0.2;\r\n      arm.castShadow = true;\r\n      droneGroup.add(arm);\r\n    }\r\n\r\n    // Propellers\r\n    const propGeometry = new THREE.BoxGeometry(0.05, 0.01, 0.3);\r\n    const propMaterial = new THREE.MeshStandardMaterial({\r\n      color: 0x95a5a6,\r\n      metalness: 0.3,\r\n      roughness: 0.7\r\n    });\r\n\r\n    // Create four propellers\r\n    for (let i = 0; i < 4; i++) {\r\n      const propeller = new THREE.Group();\r\n      \r\n      const blade1 = new THREE.Mesh(propGeometry, propMaterial);\r\n      const blade2 = new THREE.Mesh(propGeometry, propMaterial);\r\n      blade2.rotation.y = Math.PI / 2;\r\n      \r\n      propeller.add(blade1, blade2);\r\n      propeller.position.y = 0.1;\r\n      propeller.position.x = Math.cos(i * Math.PI / 2) * 0.2;\r\n      propeller.position.z = Math.sin(i * Math.PI / 2) * 0.2;\r\n      propeller.castShadow = true;\r\n      \r\n      droneGroup.add(propeller);\r\n    }\r\n\r\n    return droneGroup;\r\n  };\r\n\r\n  // Animation states and durations\r\n  const ANIMATIONS = {\r\n    PLOW: {\r\n      duration: 1000,\r\n      heightOffset: 0.05\r\n    },\r\n    PLANT: {\r\n      duration: 1500,\r\n      heightOffset: 0.1\r\n    },\r\n    GROW: {\r\n      duration: 3000,\r\n      stages: 3\r\n    },\r\n    HARVEST: {\r\n      duration: 2000,\r\n      heightOffset: 0.15\r\n    }\r\n  };\r\n\r\n  // Create and update ground plane\r\n  const updateGround = () => {\r\n    if (!sceneRef.current) return;\r\n\r\n    // Remove old ground\r\n    const oldGround = sceneRef.current.children.find(child => child.userData.isGround);\r\n    if (oldGround) {\r\n      sceneRef.current.remove(oldGround);\r\n      if (oldGround.geometry) oldGround.geometry.dispose();\r\n      if (oldGround.material) oldGround.material.dispose();\r\n    }\r\n\r\n    // Create new ground with dynamic size\r\n    const size = Math.sqrt(gameState.land.length);\r\n    const groundSize = Math.max(size * 1.5, 2); // At least 2 units, scales with grid\r\n    const groundGeometry = new THREE.PlaneGeometry(groundSize, groundSize);\r\n    const groundMaterial = new THREE.MeshStandardMaterial({\r\n      color: 0x90EE90, // Default grass color\r\n      roughness: 0.8,\r\n      metalness: 0.2\r\n    });\r\n\r\n    // Apply texture if available\r\n    if (texturesRef.current?.grass?.diffuse) {\r\n      groundMaterial.map = texturesRef.current.grass.diffuse.clone(); // Clone texture to avoid sharing\r\n      groundMaterial.map.repeat.set(size, size);\r\n      groundMaterial.map.wrapS = groundMaterial.map.wrapT = THREE.RepeatWrapping;\r\n      groundMaterial.needsUpdate = true;\r\n    }\r\n\r\n    const ground = new THREE.Mesh(groundGeometry, groundMaterial);\r\n    ground.rotation.x = -Math.PI / 2;\r\n    ground.position.y = 0;\r\n    ground.receiveShadow = true;\r\n    ground.userData.isGround = true;\r\n    sceneRef.current.add(ground);\r\n  };\r\n\r\n  // Create and update tiles with animations\r\n  const updateTiles = () => {\r\n    if (!sceneRef.current) return;\r\n\r\n    // Remove old tiles\r\n    const oldTiles = sceneRef.current.children.filter(child => child.userData.isTile || child.userData.isCrop);\r\n    oldTiles.forEach(tile => {\r\n      sceneRef.current.remove(tile);\r\n      if (tile.geometry) tile.geometry.dispose();\r\n      if (tile.material) {\r\n        if (Array.isArray(tile.material)) {\r\n          tile.material.forEach(m => m.dispose());\r\n        } else {\r\n          tile.material.dispose();\r\n        }\r\n      }\r\n    });\r\n\r\n    // Create new tiles based on gameState\r\n    const size = Math.sqrt(gameState.land.length);\r\n    const tileSize = 0.95;\r\n    const offset = (size - 1) / 2;\r\n\r\n    gameState.land.forEach((tile, index) => {\r\n      const x = Math.floor(index / size);\r\n      const z = index % size;\r\n      const position = new THREE.Vector3(x - offset, 0.01, z - offset);\r\n\r\n      // Create base tile\r\n      const geometry = new THREE.PlaneGeometry(tileSize, tileSize);\r\n      let material;\r\n\r\n      if (tile.isPlowed) {\r\n        material = new THREE.MeshStandardMaterial({\r\n          map: texturesRef.current?.soil?.diffuse || null,\r\n          normalMap: texturesRef.current?.soil?.normal || null,\r\n          roughness: 0.8,\r\n          metalness: 0.2\r\n        });\r\n      } else if (tile.hasCrop) {\r\n        material = new THREE.MeshStandardMaterial({\r\n          map: texturesRef.current?.farmland?.diffuse || null,\r\n          normalMap: texturesRef.current?.farmland?.normal || null,\r\n          roughness: 0.7,\r\n          metalness: 0.3\r\n        });\r\n      } else {\r\n        material = new THREE.MeshStandardMaterial({\r\n          map: texturesRef.current?.grass?.diffuse || null,\r\n          normalMap: texturesRef.current?.grass?.normal || null,\r\n          roughness: 0.9,\r\n          metalness: 0.1\r\n        });\r\n      }\r\n\r\n      const mesh = new THREE.Mesh(geometry, material);\r\n      mesh.rotation.x = -Math.PI / 2;\r\n      mesh.position.copy(position);\r\n      mesh.receiveShadow = true;\r\n      mesh.userData.isTile = true;\r\n      mesh.userData.tileIndex = index;\r\n      \r\n      sceneRef.current.add(mesh);\r\n\r\n      // Add crop if exists\r\n      if (tile.hasCrop && tile.cropType) {\r\n        const cropGeometry = new THREE.PlaneGeometry(tileSize * 0.8, tileSize * 0.8);\r\n        const cropMaterial = new THREE.MeshStandardMaterial({\r\n          map: texturesRef.current?.[tile.cropType]?.diffuse || null,\r\n          normalMap: texturesRef.current?.[tile.cropType]?.normal || null,\r\n          transparent: true,\r\n          alphaTest: 0.5,\r\n          roughness: 0.8,\r\n          metalness: 0.2\r\n        });\r\n\r\n        const cropMesh = new THREE.Mesh(cropGeometry, cropMaterial);\r\n        cropMesh.rotation.x = -Math.PI / 2;\r\n        \r\n        // Calculate growth height based on crop state\r\n        const growthProgress = tile.cropState === 'ready' ? 1 : \r\n                             tile.cropState === 'growing' ? 0.5 : 0.2;\r\n        \r\n        cropMesh.position.set(\r\n          position.x,\r\n          position.y + 0.2 * growthProgress, // Height based on growth\r\n          position.z\r\n        );\r\n        \r\n        cropMesh.userData.isCrop = true;\r\n        cropMesh.userData.tileIndex = index;\r\n        cropMesh.userData.cropType = tile.cropType;\r\n        cropMesh.userData.growthState = tile.cropState;\r\n        \r\n        sceneRef.current.add(cropMesh);\r\n      }\r\n    });\r\n\r\n    // Update grid helper\r\n    const oldGrid = sceneRef.current.children.find(child => child instanceof THREE.GridHelper);\r\n    if (oldGrid) {\r\n      sceneRef.current.remove(oldGrid);\r\n      oldGrid.material.dispose();\r\n      oldGrid.geometry.dispose();\r\n    }\r\n\r\n    const gridHelper = new THREE.GridHelper(size, size, 0x000000, 0x000000);\r\n    gridHelper.position.y = 0.01;\r\n    gridHelper.material.opacity = 0.2;\r\n    gridHelper.material.transparent = true;\r\n    sceneRef.current.add(gridHelper);\r\n\r\n    // Update ground plane\r\n    updateGround();\r\n  };\r\n\r\n  // Add animation function for tile actions\r\n  const animateTileAction = (tileIndex, actionType) => {\r\n    if (!sceneRef.current) return;\r\n\r\n    const tile = sceneRef.current.children.find(\r\n      child => (child.userData.isTile || child.userData.isCrop) && \r\n      child.userData.tileIndex === tileIndex\r\n    );\r\n\r\n    if (!tile) return;\r\n\r\n    const animation = ANIMATIONS[actionType];\r\n    const startTime = Date.now();\r\n    const startPosition = tile.position.clone();\r\n\r\n    const animate = () => {\r\n      const elapsed = Date.now() - startTime;\r\n      const progress = Math.min(elapsed / animation.duration, 1);\r\n      \r\n      // Different animation behaviors based on action type\r\n      switch (actionType) {\r\n        case 'PLOW':\r\n          // Plow animation: tile rises and falls\r\n          tile.position.y = startPosition.y + \r\n            Math.sin(progress * Math.PI) * animation.heightOffset;\r\n          break;\r\n        \r\n        case 'PLANT':\r\n          // Plant animation: crop grows from ground\r\n          if (tile.userData.isCrop) {\r\n            tile.scale.y = progress;\r\n            tile.position.y = startPosition.y + (progress * animation.heightOffset);\r\n          }\r\n          break;\r\n        \r\n        case 'GROW':\r\n          // Growth animation: crop scales up\r\n          if (tile.userData.isCrop) {\r\n            const stage = Math.floor(progress * animation.stages);\r\n            const stageProgress = (progress * animation.stages) % 1;\r\n            tile.scale.set(\r\n              1 + (0.1 * stage) + (0.1 * stageProgress),\r\n              1 + (0.2 * stage) + (0.2 * stageProgress),\r\n              1 + (0.1 * stage) + (0.1 * stageProgress)\r\n            );\r\n          }\r\n          break;\r\n        \r\n        case 'HARVEST':\r\n          // Harvest animation: crop rises and fades\r\n          if (tile.userData.isCrop) {\r\n            tile.position.y = startPosition.y + (progress * animation.heightOffset);\r\n            if (tile.material) {\r\n              tile.material.opacity = 1 - progress;\r\n            }\r\n          }\r\n          break;\r\n      }\r\n\r\n      if (progress < 1) {\r\n        requestAnimationFrame(animate);\r\n      } else if (actionType === 'HARVEST') {\r\n        // Remove crop mesh after harvest animation\r\n        sceneRef.current.remove(tile);\r\n        if (tile.geometry) tile.geometry.dispose();\r\n        if (tile.material) tile.material.dispose();\r\n      }\r\n    };\r\n\r\n    animate();\r\n  };\r\n\r\n  // Handle incoming actions\r\n  useEffect(() => {\r\n    if (lastAction && lastAction.type && lastAction.tileIndex !== undefined) {\r\n      actionQueueRef.current.push(lastAction);\r\n      \r\n      // Process the action\r\n      const processAction = async () => {\r\n        const action = actionQueueRef.current[0];\r\n        await new Promise(resolve => {\r\n          animateTileAction(action.tileIndex, action.type);\r\n          \r\n          // Wait for animation to complete\r\n          const duration = ANIMATIONS[action.type].duration;\r\n          setTimeout(() => {\r\n            actionQueueRef.current.shift();\r\n            if (onActionComplete) {\r\n              onActionComplete(action);\r\n            }\r\n            resolve();\r\n          }, duration);\r\n        });\r\n\r\n        // Process next action if any\r\n        if (actionQueueRef.current.length > 0) {\r\n          processAction();\r\n        }\r\n      };\r\n\r\n      if (actionQueueRef.current.length === 1) {\r\n        processAction();\r\n      }\r\n    }\r\n  }, [lastAction]);\r\n\r\n  useEffect(() => {\r\n    if (!canvasRef.current) return;\r\n\r\n    // Create scene\r\n    const scene = new THREE.Scene();\r\n    scene.background = new THREE.Color(0x87CEEB);\r\n    scene.fog = new THREE.FogExp2(0x87CEEB, 0.01);\r\n    sceneRef.current = scene;\r\n\r\n    // Create camera with initial position\r\n    const camera = new THREE.PerspectiveCamera(60, 1, 0.1, 1000);\r\n    const initialCamera = calculateCameraPosition();\r\n    camera.position.copy(initialCamera.position);\r\n    camera.lookAt(initialCamera.target);\r\n\r\n    // Create renderer with improved settings\r\n    const renderer = new THREE.WebGLRenderer({\r\n      canvas: canvasRef.current,\r\n      antialias: true,\r\n      powerPreference: \"high-performance\",\r\n      stencil: false\r\n    });\r\n    renderer.setSize(600, 600);\r\n    renderer.shadowMap.enabled = true;\r\n    renderer.shadowMap.type = THREE.PCFSoftShadowMap;\r\n    renderer.outputColorSpace = THREE.SRGBColorSpace;\r\n    renderer.toneMapping = THREE.ACESFilmicToneMapping;\r\n    renderer.toneMappingExposure = 1.0;\r\n    renderer.setPixelRatio(window.devicePixelRatio);\r\n\r\n    // Create environment map\r\n    const envMap = createEnvironmentMap(renderer);\r\n    scene.environment = envMap;\r\n\r\n    // Add lights with improved settings\r\n    const ambientLight = new THREE.AmbientLight(0xffffff, 0.5);\r\n    scene.add(ambientLight);\r\n\r\n    const sunLight = new THREE.DirectionalLight(0xffffff, 2.0);\r\n    sunLight.position.set(10, 10, 5);\r\n    sunLight.castShadow = true;\r\n    sunLight.shadow.mapSize.width = 2048;\r\n    sunLight.shadow.mapSize.height = 2048;\r\n    sunLight.shadow.camera.near = 0.5;\r\n    sunLight.shadow.camera.far = 50;\r\n    sunLight.shadow.camera.left = -10;\r\n    sunLight.shadow.camera.right = 10;\r\n    sunLight.shadow.camera.top = 10;\r\n    sunLight.shadow.camera.bottom = -10;\r\n    sunLight.shadow.bias = -0.001;\r\n    scene.add(sunLight);\r\n\r\n    // Add subtle point lights for better ambiance\r\n    const pointLight1 = new THREE.PointLight(0xffd700, 0.5, 10);\r\n    pointLight1.position.set(2, 2, 2);\r\n    scene.add(pointLight1);\r\n\r\n    const pointLight2 = new THREE.PointLight(0x00ffff, 0.3, 10);\r\n    pointLight2.position.set(-2, 3, -2);\r\n    scene.add(pointLight2);\r\n\r\n    // Initial ground setup will be handled by updateTiles\r\n    updateTiles();\r\n\r\n    // Setup post-processing with improved settings\r\n    const composer = new EffectComposer(renderer);\r\n    composerRef.current = composer;\r\n\r\n    const renderPass = new RenderPass(scene, camera);\r\n    composer.addPass(renderPass);\r\n\r\n    const bloomPass = new UnrealBloomPass(\r\n      new THREE.Vector2(600, 600),\r\n      0.5,  // strength\r\n      0.4,  // radius\r\n      0.85  // threshold\r\n    );\r\n    composer.addPass(bloomPass);\r\n\r\n    const smaaPass = new SMAAPass(600, 600);\r\n    composer.addPass(smaaPass);\r\n\r\n    // Add OrbitControls with dynamic limits\r\n    const controls = new OrbitControls(camera, renderer.domElement);\r\n    controls.enableDamping = true;\r\n    controls.dampingFactor = 0.05;\r\n    controls.screenSpacePanning = false;\r\n    controls.minDistance = 2;\r\n    controls.maxDistance = 20;\r\n    controls.maxPolarAngle = Math.PI / 2.1;\r\n    controls.minPolarAngle = Math.PI / 6;\r\n    controls.enableZoom = true;\r\n    controls.zoomSpeed = 0.5;\r\n    controls.rotateSpeed = 0.5;\r\n\r\n    // Set initial camera position\r\n    camera.position.copy(initialCamera.position);\r\n    controls.target.copy(initialCamera.target);\r\n    controls.update();\r\n\r\n    // Load assets with improved error handling\r\n    Promise.all([loadTextures(), loadModels()]).then(() => {\r\n      // Add drone to scene with improved fallback handling\r\n      if (modelsRef.current.drone) {\r\n        const drone = modelsRef.current.drone.clone();\r\n        drone.scale.set(0.5, 0.5, 0.5);\r\n        drone.traverse((child) => {\r\n          if (child.isMesh) {\r\n            child.castShadow = true;\r\n            child.material.envMapIntensity = 1;\r\n          }\r\n        });\r\n        scene.add(drone);\r\n        droneRef.current = drone;\r\n      } else {\r\n        console.log('Using fallback drone model');\r\n        const fallbackDrone = createFallbackDrone();\r\n        scene.add(fallbackDrone);\r\n        droneRef.current = fallbackDrone;\r\n      }\r\n    }).catch(error => {\r\n      console.error('Error loading assets:', error);\r\n      const fallbackDrone = createFallbackDrone();\r\n      scene.add(fallbackDrone);\r\n      droneRef.current = fallbackDrone;\r\n    });\r\n\r\n    // Animation loop with improved timing\r\n    let lastTime = 0;\r\n    const animate = (time) => {\r\n      requestAnimationFrame(animate);\r\n\r\n      const delta = (time - lastTime) / 1000;\r\n      lastTime = time;\r\n\r\n      // Update drone hover animation\r\n      if (droneRef.current) {\r\n        const baseHeight = 0.5;\r\n        droneRef.current.position.y = baseHeight + Math.sin(time * 0.002) * 0.1;\r\n        \r\n        // Rotate propellers if using fallback model\r\n        if (!modelsRef.current.drone) {\r\n          droneRef.current.children.forEach((child, index) => {\r\n            if (index > 4) { // Skip body and arms\r\n              child.rotation.y += 15 * delta;\r\n            }\r\n          });\r\n        }\r\n      }\r\n\r\n      // Update controls and render\r\n      controls.update();\r\n      composer.render();\r\n    };\r\n    animate(0);\r\n\r\n    // Cleanup with improved resource disposal\r\n    return () => {\r\n      renderer.dispose();\r\n      composer.dispose();\r\n      controls.dispose();\r\n      envMap.dispose();\r\n      \r\n      Object.values(texturesRef.current).forEach(textures => {\r\n        Object.values(textures).forEach(texture => texture.dispose());\r\n      });\r\n      \r\n      scene.traverse((object) => {\r\n        if (object.geometry) object.geometry.dispose();\r\n        if (object.material) {\r\n          if (Array.isArray(object.material)) {\r\n            object.material.forEach(material => material.dispose());\r\n          } else {\r\n            object.material.dispose();\r\n          }\r\n        }\r\n      });\r\n    };\r\n  }, []);\r\n\r\n  // Update drone position when gameState changes\r\n  useEffect(() => {\r\n    if (!droneRef.current || !gameState.dronePosition) return;\r\n    \r\n    const targetPos = gameToScene(gameState.dronePosition.x, gameState.dronePosition.y);\r\n    \r\n    // Smoothly animate to new position\r\n    const duration = 500; // 0.5 seconds\r\n    const startPosition = {\r\n      x: droneRef.current.position.x,\r\n      y: droneRef.current.position.y,\r\n      z: droneRef.current.position.z\r\n    };\r\n    const startTime = Date.now();\r\n\r\n    const animate = () => {\r\n      const elapsed = Date.now() - startTime;\r\n      const progress = Math.min(elapsed / duration, 1);\r\n      \r\n      // Smooth easing\r\n      const t = progress < 0.5 \r\n        ? 4 * progress * progress * progress \r\n        : 1 - Math.pow(-2 * progress + 2, 3) / 2;\r\n\r\n      // Update drone position\r\n      droneRef.current.position.x = startPosition.x + (targetPos.x - startPosition.x) * t;\r\n      droneRef.current.position.z = startPosition.z + (targetPos.z - startPosition.z) * t;\r\n      droneRef.current.position.y = 0.5 + Math.sin(Date.now() * 0.002) * 0.1; // Keep hover animation\r\n\r\n      if (progress < 1) {\r\n        requestAnimationFrame(animate);\r\n      }\r\n    };\r\n\r\n    animate();\r\n  }, [gameState.dronePosition, gameState.land.length, gameToScene]);\r\n\r\n  // Update tiles when gameState changes\r\n  useEffect(() => {\r\n    updateTiles();\r\n  }, [gameState.land]);\r\n\r\n  // Add new effect to handle camera position updates when grid size changes\r\n  useEffect(() => {\r\n    if (!canvasRef.current) return;\r\n    \r\n    const newCamera = calculateCameraPosition();\r\n    \r\n    // Get the orbit controls instance\r\n    const canvas = canvasRef.current;\r\n    const controls = canvas.__controls;\r\n    \r\n    if (controls) {\r\n      // Smoothly animate to new position\r\n      const duration = 1000; // 1 second\r\n      const startPosition = controls.object.position.clone();\r\n      const startTarget = controls.target.clone();\r\n      const startTime = Date.now();\r\n\r\n      const animate = () => {\r\n        const elapsed = Date.now() - startTime;\r\n        const progress = Math.min(elapsed / duration, 1);\r\n        \r\n        // Smooth easing\r\n        const t = progress < 0.5 \r\n          ? 4 * progress * progress * progress \r\n          : 1 - Math.pow(-2 * progress + 2, 3) / 2;\r\n\r\n        // Update camera position\r\n        controls.object.position.lerpVectors(startPosition, newCamera.position, t);\r\n        controls.target.lerpVectors(startTarget, newCamera.target, t);\r\n        controls.update();\r\n\r\n        if (progress < 1) {\r\n          requestAnimationFrame(animate);\r\n        }\r\n      };\r\n\r\n      animate();\r\n    }\r\n  }, [gameState.land.length]);\r\n\r\n  return (\r\n    <div style={{ \r\n      width: '600px', \r\n      height: '600px', \r\n      backgroundColor: '#000000',\r\n      margin: '0 auto',\r\n      borderRadius: '8px',\r\n      overflow: 'hidden',\r\n      boxShadow: '0 4px 6px rgba(0, 0, 0, 0.1)'\r\n    }}>\r\n      <canvas \r\n        ref={canvasRef}\r\n        style={{\r\n          width: '100%',\r\n          height: '100%'\r\n        }}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Game3D; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}