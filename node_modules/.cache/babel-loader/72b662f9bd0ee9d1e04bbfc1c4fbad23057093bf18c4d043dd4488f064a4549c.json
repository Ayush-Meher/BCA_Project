{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\SPIDER\\\\Downloads\\\\Project\\\\Demo GPT\\\\Demo 1\\\\src\\\\components\\\\Game.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport styled from 'styled-components';\nimport Instructions from './Instructions';\nimport JavaScriptConsole from './JavaScriptConsole';\nimport TechTree from './TechTree';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GameContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 20px;\n`;\nconst MoneyDisplay = styled.div`\n  font-size: 1.5em;\n  font-weight: bold;\n  color: #f1c40f;\n  text-align: center;\n  padding: 10px;\n  background-color: #34495e;\n  border-radius: 5px;\n`;\n_c = MoneyDisplay;\nconst GameGrid = styled.div`\n  display: grid;\n  grid-template-columns: repeat(${props => props.size}, 1fr);\n  gap: 10px;\n  width: 90%;\n  max-width: 700px;\n  margin: 0 auto;\n`;\n_c2 = GameGrid;\nconst LandTile = styled.div`\n  width: 100%;\n  aspect-ratio: 1;\n  background-color: ${props => {\n  if (props.isPlowed) return '#8B4513';\n  if (props.hasCrop && props.cropState === 'growing') return '#90EE90';\n  if (props.hasCrop && props.cropState === 'ready') return '#228B22';\n  return '#90EE90';\n}};\n  border: 1px solid #2c3e50;\n  cursor: pointer;\n  position: relative;\n  transition: all 0.3s ease;\n\n  &:hover {\n    transform: scale(1.05);\n  }\n`;\n_c3 = LandTile;\nconst CropIndicator = styled.div`\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  width: 80%;\n  height: 80%;\n  background-color: ${props => props.color};\n  border-radius: 50%;\n`;\n_c4 = CropIndicator;\nconst GameStats = styled.div`\n  position: fixed;\n  top: 20px;\n  right: 320px;\n  background-color: rgba(52, 73, 94, 0.9);\n  padding: 10px;\n  border-radius: 5px;\n`;\n_c5 = GameStats;\nconst ToolBar = styled.div`\n  display: flex;\n  margin-bottom: 20px;\n  flex-wrap: wrap;\n`;\n_c6 = ToolBar;\nconst ToolButton = styled.button`\n  background-color: ${props => props.selected ? '#2980b9' : '#3498db'};\n  border: ${props => props.selected ? '2px solid #fff' : 'none'};\n  padding: ${props => props.selected ? '6px 14px' : '8px 16px'};\n`;\n_c7 = ToolButton;\nconst CropSelector = styled.div`\n  margin-top: 10px;\n  display: flex;\n  flex-wrap: wrap;\n`;\n_c8 = CropSelector;\nconst CropButton = styled.button`\n  background-color: ${props => props.selected ? '#27ae60' : '#2ecc71'};\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  \n  &:disabled {\n    background-color: #95a5a6;\n    cursor: not-allowed;\n  }\n`;\n_c9 = CropButton;\nconst CropIcon = styled.span`\n  display: inline-block;\n  width: 12px;\n  height: 12px;\n  border-radius: 50%;\n  background-color: ${props => props.color};\n  margin-right: 5px;\n`;\n_c10 = CropIcon;\nconst GameLayout = styled.div`\n  display: grid;\n  grid-template-columns: 1fr 300px;\n  gap: 20px;\n  padding: 20px;\n`;\n_c11 = GameLayout;\nconst MainArea = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 20px;\n`;\n_c12 = MainArea;\nconst DroneSprite = styled.div`\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  width: 40%;\n  height: 40%;\n  background-color: #3498db;\n  border-radius: 50%;\n  transform: translate(-50%, -50%);\n  transition: all 0.3s ease;\n  z-index: 2;\n  \n  &::before {\n    content: 'ðŸ›¸';\n    position: absolute;\n    top: 50%;\n    left: 50%;\n    transform: translate(-50%, -50%);\n    font-size: 20px;\n  }\n`;\n_c13 = DroneSprite;\nconst ConsoleContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  height: 100%;\n`;\n_c14 = ConsoleContainer;\nconst ConsoleTabs = styled.div`\n  display: flex;\n  gap: 5px;\n  margin-bottom: 10px;\n`;\n_c15 = ConsoleTabs;\nconst ConsoleTab = styled.button`\n  background-color: ${props => props.active ? '#3498db' : '#2c3e50'};\n  color: white;\n  border: none;\n  padding: 5px 10px;\n  border-radius: 3px;\n  cursor: pointer;\n  \n  &:hover {\n    background-color: ${props => props.active ? '#2980b9' : '#34495e'};\n  }\n`;\n_c16 = ConsoleTab;\nconst AddConsoleButton = styled.button`\n  background-color: #27ae60;\n  color: white;\n  border: none;\n  padding: 5px 10px;\n  border-radius: 3px;\n  cursor: pointer;\n  \n  &:hover {\n    background-color: #219653;\n  }\n`;\n_c17 = AddConsoleButton;\nconst ConsoleWrapper = styled.div`\n  display: ${props => props.active ? 'block' : 'none'};\n  height: 100%;\n`;\n_c18 = ConsoleWrapper;\nfunction Game({\n  inventory,\n  setInventory,\n  money,\n  setMoney,\n  onOpenTechTree,\n  unlockedCrops\n}) {\n  _s();\n  const [gridSize, setGridSize] = useState(1);\n  const [land, setLand] = useState(Array(1).fill(null).map(() => ({\n    isPlowed: false,\n    hasCrop: false,\n    cropType: null,\n    cropState: null,\n    plantedTime: null\n  })));\n  const [selectedTool, setSelectedTool] = useState('plow');\n  const [selectedCrop, setSelectedCrop] = useState('wheat');\n  const [showInstructions, setShowInstructions] = useState(false);\n\n  // Add drone state\n  const [dronePosition, setDronePosition] = useState({\n    x: 0,\n    y: 0\n  });\n  const [droneInventory, setDroneInventory] = useState({});\n\n  // Add console management state\n  const [consoles, setConsoles] = useState([{\n    id: 1,\n    name: 'Console 1'\n  }]);\n  const [activeConsole, setActiveConsole] = useState(1);\n\n  // Crop growth timer\n  useEffect(() => {\n    const growthInterval = setInterval(() => {\n      let updated = false;\n      const newLand = [...land];\n      newLand.forEach((tile, index) => {\n        if (tile.hasCrop && tile.cropState === 'growing' && tile.plantedTime) {\n          const now = Date.now();\n          const growthTime = 10000; // 10 seconds for growth\n\n          if (now - tile.plantedTime > growthTime) {\n            newLand[index] = {\n              ...tile,\n              cropState: 'ready'\n            };\n            updated = true;\n          }\n        }\n      });\n      if (updated) {\n        setLand(newLand);\n      }\n    }, 1000);\n    return () => clearInterval(growthInterval);\n  }, [land]);\n  const cropColors = {\n    wheat: '#f1c40f',\n    corn: '#f39c12',\n    potato: '#d35400',\n    carrots: '#e67e22',\n    sunflowers: '#f1c40f',\n    pumpkins: '#e67e22'\n  };\n  const gameState = {\n    money,\n    inventory,\n    land,\n    selectedTool,\n    selectedCrop,\n    drone: {\n      x: dronePosition.x,\n      y: dronePosition.y,\n      inventory: droneInventory\n    }\n  };\n  const setGameState = newState => {\n    if (typeof newState === 'function') {\n      const updatedState = newState({\n        money,\n        inventory,\n        land,\n        drone: {\n          x: dronePosition.x,\n          y: dronePosition.y,\n          inventory: droneInventory\n        }\n      });\n      setMoney(updatedState.money);\n      setInventory(updatedState.inventory);\n      setLand(updatedState.land);\n      if (updatedState.drone) {\n        setDronePosition({\n          x: updatedState.drone.x,\n          y: updatedState.drone.y\n        });\n        setDroneInventory(updatedState.drone.inventory);\n      }\n    } else {\n      setMoney(newState.money);\n      setInventory(newState.inventory);\n      setLand(newState.land);\n      if (newState.drone) {\n        setDronePosition({\n          x: newState.drone.x,\n          y: newState.drone.y\n        });\n        setDroneInventory(newState.drone.inventory);\n      }\n    }\n  };\n  const handleTileClick = index => {\n    const x = index % gridSize;\n    const y = Math.floor(index / gridSize);\n    const tile = land[index];\n    switch (selectedTool) {\n      case 'plow':\n        if (!tile.isPlowed && !tile.hasCrop) {\n          const newLand = [...land];\n          newLand[index] = {\n            ...tile,\n            isPlowed: true\n          };\n          setLand(newLand);\n        }\n        break;\n      case 'plant':\n        if (tile.isPlowed && !tile.hasCrop) {\n          const newLand = [...land];\n          newLand[index] = {\n            ...tile,\n            hasCrop: true,\n            cropType: selectedCrop,\n            cropState: 'growing',\n            plantedTime: Date.now()\n          };\n          setLand(newLand);\n        }\n        break;\n      case 'harvest':\n        if (tile.hasCrop && tile.cropState === 'ready') {\n          const newLand = [...land];\n          newLand[index] = {\n            ...tile,\n            hasCrop: false,\n            cropType: null,\n            cropState: null,\n            plantedTime: null\n          };\n          setLand(newLand);\n          setInventory({\n            ...inventory,\n            [tile.cropType]: (inventory[tile.cropType] || 0) + 1\n          });\n        }\n        break;\n      default:\n        break;\n    }\n  };\n  const sellAllCrops = () => {\n    const prices = {\n      wheat: 20,\n      corn: 30,\n      potato: 40\n    };\n    let totalEarnings = 0;\n    const newInventory = {\n      ...inventory\n    };\n    Object.entries(inventory).forEach(([crop, amount]) => {\n      if (prices[crop]) {\n        totalEarnings += prices[crop] * amount;\n        newInventory[crop] = 0;\n      }\n    });\n    setMoney(money + totalEarnings);\n    setInventory(newInventory);\n  };\n  const handleTechUnlock = techId => {\n    if (techId === 'expand') {\n      // Handle farm expansion\n      if (gridSize < 5) {\n        const newSize = gridSize + 1;\n        const newLand = Array(newSize * newSize).fill(null).map((_, index) => {\n          if (index < land.length) {\n            return land[index];\n          }\n          return {\n            isPlowed: false,\n            hasCrop: false,\n            cropType: null,\n            cropState: null,\n            plantedTime: null\n          };\n        });\n        setGridSize(newSize);\n        setLand(newLand);\n      }\n    }\n    // Add other tech effects here\n  };\n  const addConsole = () => {\n    const newId = consoles.length + 1;\n    setConsoles([...consoles, {\n      id: newId,\n      name: `Console ${newId}`\n    }]);\n    setActiveConsole(newId);\n  };\n  const removeConsole = id => {\n    if (consoles.length > 1) {\n      const newConsoles = consoles.filter(console => console.id !== id);\n      setConsoles(newConsoles);\n      if (activeConsole === id) {\n        setActiveConsole(newConsoles[0].id);\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(GameLayout, {\n    children: [/*#__PURE__*/_jsxDEV(MainArea, {\n      children: [/*#__PURE__*/_jsxDEV(MoneyDisplay, {\n        children: [\"Money: $\", money]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 406,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(GameStats, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: [\"Land Size: \", gridSize, \"x\", gridSize]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 411,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: sellAllCrops,\n          children: \"Sell All Crops\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 412,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: onOpenTechTree,\n          children: \"Open Tech Tree\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 413,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 410,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Instructions, {\n        isOpen: showInstructions,\n        onClose: () => setShowInstructions(false)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 416,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"The Farmer Was Replaced\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 418,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ToolBar, {\n        children: [/*#__PURE__*/_jsxDEV(ToolButton, {\n          selected: selectedTool === 'plow',\n          onClick: () => setSelectedTool('plow'),\n          children: \"Plow\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 421,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(ToolButton, {\n          selected: selectedTool === 'plant',\n          onClick: () => setSelectedTool('plant'),\n          children: \"Plant\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 427,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(ToolButton, {\n          selected: selectedTool === 'harvest',\n          onClick: () => setSelectedTool('harvest'),\n          children: \"Harvest\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 433,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 420,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(CropSelector, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: \"Select crop to plant:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 442,\n          columnNumber: 11\n        }, this), Object.keys(cropColors).filter(crop => unlockedCrops.includes(crop)).map(crop => {\n          const seedType = `${crop}_seeds`;\n          return /*#__PURE__*/_jsxDEV(CropButton, {\n            selected: selectedCrop === crop,\n            onClick: () => setSelectedCrop(crop),\n            disabled: !inventory[seedType] || inventory[seedType] <= 0,\n            children: [/*#__PURE__*/_jsxDEV(CropIcon, {\n              color: cropColors[crop]\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 454,\n              columnNumber: 19\n            }, this), crop.charAt(0).toUpperCase() + crop.slice(1), \" (\", inventory[seedType] || 0, \")\"]\n          }, crop, true, {\n            fileName: _jsxFileName,\n            lineNumber: 448,\n            columnNumber: 17\n          }, this);\n        })]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 441,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(GameGrid, {\n        size: gridSize,\n        children: land.map((tile, index) => /*#__PURE__*/_jsxDEV(LandTile, {\n          onClick: () => handleTileClick(index),\n          isPlowed: tile.isPlowed,\n          hasCrop: tile.hasCrop,\n          cropState: tile.cropState,\n          children: [tile.hasCrop && /*#__PURE__*/_jsxDEV(CropIndicator, {\n            color: cropColors[tile.cropType]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 471,\n            columnNumber: 17\n          }, this), Math.floor(index / gridSize) === dronePosition.y && index % gridSize === dronePosition.x && /*#__PURE__*/_jsxDEV(DroneSprite, {\n            x: dronePosition.x,\n            y: dronePosition.y\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 477,\n            columnNumber: 17\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 463,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 461,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          marginTop: '20px',\n          marginBottom: '20px'\n        },\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => setShowInstructions(true),\n          children: \"Game Instructions\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 487,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 486,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 405,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ConsoleContainer, {\n      children: [/*#__PURE__*/_jsxDEV(ConsoleTabs, {\n        children: [consoles.map(console => /*#__PURE__*/_jsxDEV(ConsoleTab, {\n          active: activeConsole === console.id,\n          onClick: () => setActiveConsole(console.id),\n          children: [console.name, consoles.length > 1 && /*#__PURE__*/_jsxDEV(\"span\", {\n            style: {\n              marginLeft: '5px',\n              cursor: 'pointer'\n            },\n            onClick: e => {\n              e.stopPropagation();\n              removeConsole(console.id);\n            },\n            children: \"\\xD7\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 501,\n            columnNumber: 17\n          }, this)]\n        }, console.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 494,\n          columnNumber: 13\n        }, this)), /*#__PURE__*/_jsxDEV(AddConsoleButton, {\n          onClick: addConsole,\n          children: \"+\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 513,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 492,\n        columnNumber: 9\n      }, this), consoles.map(console => /*#__PURE__*/_jsxDEV(ConsoleWrapper, {\n        active: activeConsole === console.id,\n        children: /*#__PURE__*/_jsxDEV(JavaScriptConsole, {\n          gameState: gameState,\n          setGameState: setGameState,\n          consoleId: console.id\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 520,\n          columnNumber: 13\n        }, this)\n      }, console.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 519,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 491,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 404,\n    columnNumber: 5\n  }, this);\n}\n_s(Game, \"BupSdjrkF/nN23bs5D3g+wDW3QU=\");\n_c19 = Game;\nexport default Game;\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7, _c8, _c9, _c10, _c11, _c12, _c13, _c14, _c15, _c16, _c17, _c18, _c19;\n$RefreshReg$(_c, \"MoneyDisplay\");\n$RefreshReg$(_c2, \"GameGrid\");\n$RefreshReg$(_c3, \"LandTile\");\n$RefreshReg$(_c4, \"CropIndicator\");\n$RefreshReg$(_c5, \"GameStats\");\n$RefreshReg$(_c6, \"ToolBar\");\n$RefreshReg$(_c7, \"ToolButton\");\n$RefreshReg$(_c8, \"CropSelector\");\n$RefreshReg$(_c9, \"CropButton\");\n$RefreshReg$(_c10, \"CropIcon\");\n$RefreshReg$(_c11, \"GameLayout\");\n$RefreshReg$(_c12, \"MainArea\");\n$RefreshReg$(_c13, \"DroneSprite\");\n$RefreshReg$(_c14, \"ConsoleContainer\");\n$RefreshReg$(_c15, \"ConsoleTabs\");\n$RefreshReg$(_c16, \"ConsoleTab\");\n$RefreshReg$(_c17, \"AddConsoleButton\");\n$RefreshReg$(_c18, \"ConsoleWrapper\");\n$RefreshReg$(_c19, \"Game\");","map":{"version":3,"names":["React","useState","useEffect","styled","Instructions","JavaScriptConsole","TechTree","jsxDEV","_jsxDEV","GameContainer","div","MoneyDisplay","_c","GameGrid","props","size","_c2","LandTile","isPlowed","hasCrop","cropState","_c3","CropIndicator","color","_c4","GameStats","_c5","ToolBar","_c6","ToolButton","button","selected","_c7","CropSelector","_c8","CropButton","_c9","CropIcon","span","_c10","GameLayout","_c11","MainArea","_c12","DroneSprite","_c13","ConsoleContainer","_c14","ConsoleTabs","_c15","ConsoleTab","active","_c16","AddConsoleButton","_c17","ConsoleWrapper","_c18","Game","inventory","setInventory","money","setMoney","onOpenTechTree","unlockedCrops","_s","gridSize","setGridSize","land","setLand","Array","fill","map","cropType","plantedTime","selectedTool","setSelectedTool","selectedCrop","setSelectedCrop","showInstructions","setShowInstructions","dronePosition","setDronePosition","x","y","droneInventory","setDroneInventory","consoles","setConsoles","id","name","activeConsole","setActiveConsole","growthInterval","setInterval","updated","newLand","forEach","tile","index","now","Date","growthTime","clearInterval","cropColors","wheat","corn","potato","carrots","sunflowers","pumpkins","gameState","drone","setGameState","newState","updatedState","handleTileClick","Math","floor","sellAllCrops","prices","totalEarnings","newInventory","Object","entries","crop","amount","handleTechUnlock","techId","newSize","_","length","addConsole","newId","removeConsole","newConsoles","filter","console","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","isOpen","onClose","keys","includes","seedType","disabled","charAt","toUpperCase","slice","style","marginTop","marginBottom","marginLeft","cursor","e","stopPropagation","consoleId","_c19","$RefreshReg$"],"sources":["C:/Users/SPIDER/Downloads/Project/Demo GPT/Demo 1/src/components/Game.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport styled from 'styled-components';\r\nimport Instructions from './Instructions';\r\nimport JavaScriptConsole from './JavaScriptConsole';\r\nimport TechTree from './TechTree';\r\n\r\nconst GameContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 20px;\r\n`;\r\n\r\nconst MoneyDisplay = styled.div`\r\n  font-size: 1.5em;\r\n  font-weight: bold;\r\n  color: #f1c40f;\r\n  text-align: center;\r\n  padding: 10px;\r\n  background-color: #34495e;\r\n  border-radius: 5px;\r\n`;\r\n\r\nconst GameGrid = styled.div`\r\n  display: grid;\r\n  grid-template-columns: repeat(${props => props.size}, 1fr);\r\n  gap: 10px;\r\n  width: 90%;\r\n  max-width: 700px;\r\n  margin: 0 auto;\r\n`;\r\n\r\nconst LandTile = styled.div`\r\n  width: 100%;\r\n  aspect-ratio: 1;\r\n  background-color: ${props => {\r\n    if (props.isPlowed) return '#8B4513';\r\n    if (props.hasCrop && props.cropState === 'growing') return '#90EE90';\r\n    if (props.hasCrop && props.cropState === 'ready') return '#228B22';\r\n    return '#90EE90';\r\n  }};\r\n  border: 1px solid #2c3e50;\r\n  cursor: pointer;\r\n  position: relative;\r\n  transition: all 0.3s ease;\r\n\r\n  &:hover {\r\n    transform: scale(1.05);\r\n  }\r\n`;\r\n\r\nconst CropIndicator = styled.div`\r\n  position: absolute;\r\n  top: 50%;\r\n  left: 50%;\r\n  transform: translate(-50%, -50%);\r\n  width: 80%;\r\n  height: 80%;\r\n  background-color: ${props => props.color};\r\n  border-radius: 50%;\r\n`;\r\n\r\nconst GameStats = styled.div`\r\n  position: fixed;\r\n  top: 20px;\r\n  right: 320px;\r\n  background-color: rgba(52, 73, 94, 0.9);\r\n  padding: 10px;\r\n  border-radius: 5px;\r\n`;\r\n\r\nconst ToolBar = styled.div`\r\n  display: flex;\r\n  margin-bottom: 20px;\r\n  flex-wrap: wrap;\r\n`;\r\n\r\nconst ToolButton = styled.button`\r\n  background-color: ${props => props.selected ? '#2980b9' : '#3498db'};\r\n  border: ${props => props.selected ? '2px solid #fff' : 'none'};\r\n  padding: ${props => props.selected ? '6px 14px' : '8px 16px'};\r\n`;\r\n\r\nconst CropSelector = styled.div`\r\n  margin-top: 10px;\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n`;\r\n\r\nconst CropButton = styled.button`\r\n  background-color: ${props => props.selected ? '#27ae60' : '#2ecc71'};\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n  \r\n  &:disabled {\r\n    background-color: #95a5a6;\r\n    cursor: not-allowed;\r\n  }\r\n`;\r\n\r\nconst CropIcon = styled.span`\r\n  display: inline-block;\r\n  width: 12px;\r\n  height: 12px;\r\n  border-radius: 50%;\r\n  background-color: ${props => props.color};\r\n  margin-right: 5px;\r\n`;\r\n\r\nconst GameLayout = styled.div`\r\n  display: grid;\r\n  grid-template-columns: 1fr 300px;\r\n  gap: 20px;\r\n  padding: 20px;\r\n`;\r\n\r\nconst MainArea = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 20px;\r\n`;\r\n\r\nconst DroneSprite = styled.div`\r\n  position: absolute;\r\n  top: 50%;\r\n  left: 50%;\r\n  width: 40%;\r\n  height: 40%;\r\n  background-color: #3498db;\r\n  border-radius: 50%;\r\n  transform: translate(-50%, -50%);\r\n  transition: all 0.3s ease;\r\n  z-index: 2;\r\n  \r\n  &::before {\r\n    content: 'ðŸ›¸';\r\n    position: absolute;\r\n    top: 50%;\r\n    left: 50%;\r\n    transform: translate(-50%, -50%);\r\n    font-size: 20px;\r\n  }\r\n`;\r\n\r\nconst ConsoleContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 10px;\r\n  height: 100%;\r\n`;\r\n\r\nconst ConsoleTabs = styled.div`\r\n  display: flex;\r\n  gap: 5px;\r\n  margin-bottom: 10px;\r\n`;\r\n\r\nconst ConsoleTab = styled.button`\r\n  background-color: ${props => props.active ? '#3498db' : '#2c3e50'};\r\n  color: white;\r\n  border: none;\r\n  padding: 5px 10px;\r\n  border-radius: 3px;\r\n  cursor: pointer;\r\n  \r\n  &:hover {\r\n    background-color: ${props => props.active ? '#2980b9' : '#34495e'};\r\n  }\r\n`;\r\n\r\nconst AddConsoleButton = styled.button`\r\n  background-color: #27ae60;\r\n  color: white;\r\n  border: none;\r\n  padding: 5px 10px;\r\n  border-radius: 3px;\r\n  cursor: pointer;\r\n  \r\n  &:hover {\r\n    background-color: #219653;\r\n  }\r\n`;\r\n\r\nconst ConsoleWrapper = styled.div`\r\n  display: ${props => props.active ? 'block' : 'none'};\r\n  height: 100%;\r\n`;\r\n\r\nfunction Game({ inventory, setInventory, money, setMoney, onOpenTechTree, unlockedCrops }) {\r\n  const [gridSize, setGridSize] = useState(1);\r\n  const [land, setLand] = useState(Array(1).fill(null).map(() => ({ \r\n    isPlowed: false, \r\n    hasCrop: false, \r\n    cropType: null,\r\n    cropState: null,\r\n    plantedTime: null\r\n  })));\r\n  \r\n  const [selectedTool, setSelectedTool] = useState('plow');\r\n  const [selectedCrop, setSelectedCrop] = useState('wheat');\r\n  const [showInstructions, setShowInstructions] = useState(false);\r\n  \r\n  // Add drone state\r\n  const [dronePosition, setDronePosition] = useState({ x: 0, y: 0 });\r\n  const [droneInventory, setDroneInventory] = useState({});\r\n\r\n  // Add console management state\r\n  const [consoles, setConsoles] = useState([\r\n    { id: 1, name: 'Console 1' }\r\n  ]);\r\n  const [activeConsole, setActiveConsole] = useState(1);\r\n\r\n  // Crop growth timer\r\n  useEffect(() => {\r\n    const growthInterval = setInterval(() => {\r\n      let updated = false;\r\n      const newLand = [...land];\r\n      \r\n      newLand.forEach((tile, index) => {\r\n        if (tile.hasCrop && tile.cropState === 'growing' && tile.plantedTime) {\r\n          const now = Date.now();\r\n          const growthTime = 10000; // 10 seconds for growth\r\n          \r\n          if (now - tile.plantedTime > growthTime) {\r\n            newLand[index] = {\r\n              ...tile,\r\n              cropState: 'ready'\r\n            };\r\n            updated = true;\r\n          }\r\n        }\r\n      });\r\n      \r\n      if (updated) {\r\n        setLand(newLand);\r\n      }\r\n    }, 1000);\r\n    \r\n    return () => clearInterval(growthInterval);\r\n  }, [land]);\r\n\r\n  const cropColors = {\r\n    wheat: '#f1c40f',\r\n    corn: '#f39c12',\r\n    potato: '#d35400',\r\n    carrots: '#e67e22',\r\n    sunflowers: '#f1c40f',\r\n    pumpkins: '#e67e22'\r\n  };\r\n\r\n  const gameState = {\r\n    money,\r\n    inventory,\r\n    land,\r\n    selectedTool,\r\n    selectedCrop,\r\n    drone: {\r\n      x: dronePosition.x,\r\n      y: dronePosition.y,\r\n      inventory: droneInventory\r\n    }\r\n  };\r\n\r\n  const setGameState = (newState) => {\r\n    if (typeof newState === 'function') {\r\n      const updatedState = newState({ \r\n        money, \r\n        inventory, \r\n        land,\r\n        drone: {\r\n          x: dronePosition.x,\r\n          y: dronePosition.y,\r\n          inventory: droneInventory\r\n        }\r\n      });\r\n      setMoney(updatedState.money);\r\n      setInventory(updatedState.inventory);\r\n      setLand(updatedState.land);\r\n      if (updatedState.drone) {\r\n        setDronePosition({ x: updatedState.drone.x, y: updatedState.drone.y });\r\n        setDroneInventory(updatedState.drone.inventory);\r\n      }\r\n    } else {\r\n      setMoney(newState.money);\r\n      setInventory(newState.inventory);\r\n      setLand(newState.land);\r\n      if (newState.drone) {\r\n        setDronePosition({ x: newState.drone.x, y: newState.drone.y });\r\n        setDroneInventory(newState.drone.inventory);\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleTileClick = (index) => {\r\n    const x = index % gridSize;\r\n    const y = Math.floor(index / gridSize);\r\n    const tile = land[index];\r\n\r\n    switch (selectedTool) {\r\n      case 'plow':\r\n        if (!tile.isPlowed && !tile.hasCrop) {\r\n          const newLand = [...land];\r\n          newLand[index] = { ...tile, isPlowed: true };\r\n          setLand(newLand);\r\n        }\r\n        break;\r\n      case 'plant':\r\n        if (tile.isPlowed && !tile.hasCrop) {\r\n          const newLand = [...land];\r\n          newLand[index] = {\r\n            ...tile,\r\n            hasCrop: true,\r\n            cropType: selectedCrop,\r\n            cropState: 'growing',\r\n            plantedTime: Date.now()\r\n          };\r\n          setLand(newLand);\r\n        }\r\n        break;\r\n      case 'harvest':\r\n        if (tile.hasCrop && tile.cropState === 'ready') {\r\n          const newLand = [...land];\r\n          newLand[index] = {\r\n            ...tile,\r\n            hasCrop: false,\r\n            cropType: null,\r\n            cropState: null,\r\n            plantedTime: null\r\n          };\r\n          setLand(newLand);\r\n          setInventory({\r\n            ...inventory,\r\n            [tile.cropType]: (inventory[tile.cropType] || 0) + 1\r\n          });\r\n        }\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  };\r\n\r\n  const sellAllCrops = () => {\r\n    const prices = {\r\n      wheat: 20,\r\n      corn: 30,\r\n      potato: 40\r\n    };\r\n\r\n    let totalEarnings = 0;\r\n    const newInventory = { ...inventory };\r\n\r\n    Object.entries(inventory).forEach(([crop, amount]) => {\r\n      if (prices[crop]) {\r\n        totalEarnings += prices[crop] * amount;\r\n        newInventory[crop] = 0;\r\n      }\r\n    });\r\n\r\n    setMoney(money + totalEarnings);\r\n    setInventory(newInventory);\r\n  };\r\n\r\n  const handleTechUnlock = (techId) => {\r\n    if (techId === 'expand') {\r\n      // Handle farm expansion\r\n      if (gridSize < 5) {\r\n        const newSize = gridSize + 1;\r\n        const newLand = Array(newSize * newSize).fill(null).map((_, index) => {\r\n          if (index < land.length) {\r\n            return land[index];\r\n          }\r\n          return {\r\n            isPlowed: false,\r\n            hasCrop: false,\r\n            cropType: null,\r\n            cropState: null,\r\n            plantedTime: null\r\n          };\r\n        });\r\n        setGridSize(newSize);\r\n        setLand(newLand);\r\n      }\r\n    }\r\n    // Add other tech effects here\r\n  };\r\n\r\n  const addConsole = () => {\r\n    const newId = consoles.length + 1;\r\n    setConsoles([...consoles, { id: newId, name: `Console ${newId}` }]);\r\n    setActiveConsole(newId);\r\n  };\r\n\r\n  const removeConsole = (id) => {\r\n    if (consoles.length > 1) {\r\n      const newConsoles = consoles.filter(console => console.id !== id);\r\n      setConsoles(newConsoles);\r\n      if (activeConsole === id) {\r\n        setActiveConsole(newConsoles[0].id);\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <GameLayout>\r\n      <MainArea>\r\n        <MoneyDisplay>\r\n          Money: ${money}\r\n        </MoneyDisplay>\r\n        \r\n        <GameStats>\r\n          <div>Land Size: {gridSize}x{gridSize}</div>\r\n          <button onClick={sellAllCrops}>Sell All Crops</button>\r\n          <button onClick={onOpenTechTree}>Open Tech Tree</button>\r\n        </GameStats>\r\n        \r\n        <Instructions isOpen={showInstructions} onClose={() => setShowInstructions(false)} />\r\n\r\n        <h2>The Farmer Was Replaced</h2>\r\n        \r\n        <ToolBar>\r\n          <ToolButton \r\n            selected={selectedTool === 'plow'} \r\n            onClick={() => setSelectedTool('plow')}\r\n          >\r\n            Plow\r\n          </ToolButton>\r\n          <ToolButton \r\n            selected={selectedTool === 'plant'} \r\n            onClick={() => setSelectedTool('plant')}\r\n          >\r\n            Plant\r\n          </ToolButton>\r\n          <ToolButton \r\n            selected={selectedTool === 'harvest'} \r\n            onClick={() => setSelectedTool('harvest')}\r\n          >\r\n            Harvest\r\n          </ToolButton>\r\n        </ToolBar>\r\n        \r\n        <CropSelector>\r\n          <div>Select crop to plant:</div>\r\n          {Object.keys(cropColors)\r\n            .filter(crop => unlockedCrops.includes(crop))\r\n            .map(crop => {\r\n              const seedType = `${crop}_seeds`;\r\n              return (\r\n                <CropButton\r\n                  key={crop}\r\n                  selected={selectedCrop === crop}\r\n                  onClick={() => setSelectedCrop(crop)}\r\n                  disabled={!inventory[seedType] || inventory[seedType] <= 0}\r\n                >\r\n                  <CropIcon color={cropColors[crop]} />\r\n                  {crop.charAt(0).toUpperCase() + crop.slice(1)} ({inventory[seedType] || 0})\r\n                </CropButton>\r\n              );\r\n            })}\r\n        </CropSelector>\r\n        \r\n        <GameGrid size={gridSize}>\r\n          {land.map((tile, index) => (\r\n            <LandTile\r\n              key={index}\r\n              onClick={() => handleTileClick(index)}\r\n              isPlowed={tile.isPlowed}\r\n              hasCrop={tile.hasCrop}\r\n              cropState={tile.cropState}\r\n            >\r\n              {tile.hasCrop && (\r\n                <CropIndicator \r\n                  color={cropColors[tile.cropType]} \r\n                />\r\n              )}\r\n              {Math.floor(index / gridSize) === dronePosition.y && \r\n               index % gridSize === dronePosition.x && (\r\n                <DroneSprite \r\n                  x={dronePosition.x} \r\n                  y={dronePosition.y}\r\n                />\r\n              )}\r\n            </LandTile>\r\n          ))}\r\n        </GameGrid>\r\n        \r\n        <div style={{ marginTop: '20px', marginBottom: '20px' }}>\r\n          <button onClick={() => setShowInstructions(true)}>Game Instructions</button>\r\n        </div>\r\n      </MainArea>\r\n\r\n      <ConsoleContainer>\r\n        <ConsoleTabs>\r\n          {consoles.map(console => (\r\n            <ConsoleTab\r\n              key={console.id}\r\n              active={activeConsole === console.id}\r\n              onClick={() => setActiveConsole(console.id)}\r\n            >\r\n              {console.name}\r\n              {consoles.length > 1 && (\r\n                <span \r\n                  style={{ marginLeft: '5px', cursor: 'pointer' }}\r\n                  onClick={(e) => {\r\n                    e.stopPropagation();\r\n                    removeConsole(console.id);\r\n                  }}\r\n                >\r\n                  Ã—\r\n                </span>\r\n              )}\r\n            </ConsoleTab>\r\n          ))}\r\n          <AddConsoleButton onClick={addConsole}>\r\n            +\r\n          </AddConsoleButton>\r\n        </ConsoleTabs>\r\n        \r\n        {consoles.map(console => (\r\n          <ConsoleWrapper key={console.id} active={activeConsole === console.id}>\r\n            <JavaScriptConsole \r\n              gameState={gameState} \r\n              setGameState={setGameState}\r\n              consoleId={console.id}\r\n            />\r\n          </ConsoleWrapper>\r\n        ))}\r\n      </ConsoleContainer>\r\n    </GameLayout>\r\n  );\r\n}\r\n\r\nexport default Game; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}