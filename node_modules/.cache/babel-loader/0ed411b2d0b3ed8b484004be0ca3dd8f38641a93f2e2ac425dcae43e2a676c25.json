{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\SPIDER\\\\Downloads\\\\Project\\\\Demo GPT\\\\Demo 1\\\\src\\\\components\\\\Game.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport styled from 'styled-components';\nimport Instructions from './Instructions';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GameGrid = styled.div`\n  display: grid;\n  grid-template-columns: repeat(${props => props.size}, 1fr);\n  gap: 5px;\n  max-width: 800px;\n  margin: 0 auto;\n`;\n_c = GameGrid;\nconst LandTile = styled.div`\n  width: 100%;\n  aspect-ratio: 1;\n  background-color: ${props => {\n  if (props.isPlowed) return '#8B4513';\n  if (props.hasCrop && props.cropState === 'growing') return '#90EE90';\n  if (props.hasCrop && props.cropState === 'ready') return '#228B22';\n  return '#90EE90';\n}};\n  border: 1px solid #2c3e50;\n  cursor: pointer;\n  position: relative;\n  transition: all 0.3s ease;\n\n  &:hover {\n    transform: scale(1.05);\n  }\n`;\n_c2 = LandTile;\nconst CropIndicator = styled.div`\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  width: 80%;\n  height: 80%;\n  background-color: ${props => props.color};\n  border-radius: 50%;\n`;\n_c3 = CropIndicator;\nconst GameStats = styled.div`\n  position: fixed;\n  top: 20px;\n  right: 320px;\n  background-color: rgba(52, 73, 94, 0.9);\n  padding: 10px;\n  border-radius: 5px;\n`;\n_c4 = GameStats;\nconst ToolBar = styled.div`\n  display: flex;\n  margin-bottom: 20px;\n  flex-wrap: wrap;\n`;\n_c5 = ToolBar;\nconst ToolButton = styled.button`\n  background-color: ${props => props.selected ? '#2980b9' : '#3498db'};\n  border: ${props => props.selected ? '2px solid #fff' : 'none'};\n  padding: ${props => props.selected ? '6px 14px' : '8px 16px'};\n`;\n_c6 = ToolButton;\nconst CropSelector = styled.div`\n  margin-top: 10px;\n  display: flex;\n  flex-wrap: wrap;\n`;\n_c7 = CropSelector;\nconst CropButton = styled.button`\n  background-color: ${props => props.selected ? '#27ae60' : '#2ecc71'};\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  \n  &:disabled {\n    background-color: #95a5a6;\n    cursor: not-allowed;\n  }\n`;\n_c8 = CropButton;\nconst CropIcon = styled.span`\n  display: inline-block;\n  width: 12px;\n  height: 12px;\n  border-radius: 50%;\n  background-color: ${props => props.color};\n  margin-right: 5px;\n`;\n_c9 = CropIcon;\nfunction Game() {\n  _s();\n  const [gridSize, setGridSize] = useState(5);\n  const [land, setLand] = useState(Array(gridSize * gridSize).fill(null).map(() => ({\n    isPlowed: false,\n    hasCrop: false,\n    cropType: null,\n    cropState: null,\n    plantedTime: null\n  })));\n  const [money, setMoney] = useState(100);\n  const [selectedTool, setSelectedTool] = useState('plow');\n  const [selectedCrop, setSelectedCrop] = useState('wheat');\n  const [inventory, setInventory] = useState({\n    wheat: 0,\n    corn: 0,\n    potato: 0,\n    wheat_seeds: 5,\n    corn_seeds: 3,\n    potato_seeds: 2\n  });\n  const [showInstructions, setShowInstructions] = useState(false);\n\n  // Crop growth timer\n  useEffect(() => {\n    const growthInterval = setInterval(() => {\n      let updated = false;\n      const newLand = [...land];\n      newLand.forEach((tile, index) => {\n        if (tile.hasCrop && tile.cropState === 'growing' && tile.plantedTime) {\n          const now = Date.now();\n          const growthTime = 10000; // 10 seconds for growth\n\n          if (now - tile.plantedTime > growthTime) {\n            newLand[index] = {\n              ...tile,\n              cropState: 'ready'\n            };\n            updated = true;\n          }\n        }\n      });\n      if (updated) {\n        setLand(newLand);\n      }\n    }, 1000);\n    return () => clearInterval(growthInterval);\n  }, [land]);\n  const cropColors = {\n    wheat: '#f1c40f',\n    corn: '#f39c12',\n    potato: '#d35400'\n  };\n  const handleTileClick = index => {\n    const newLand = [...land];\n    const tile = newLand[index];\n    switch (selectedTool) {\n      case 'plow':\n        if (!tile.isPlowed && !tile.hasCrop) {\n          newLand[index] = {\n            ...tile,\n            isPlowed: true\n          };\n        }\n        break;\n      case 'plant':\n        if (tile.isPlowed && !tile.hasCrop) {\n          const seedType = `${selectedCrop}_seeds`;\n          if (inventory[seedType] > 0) {\n            newLand[index] = {\n              ...tile,\n              hasCrop: true,\n              cropType: selectedCrop,\n              cropState: 'growing',\n              plantedTime: Date.now()\n            };\n            setInventory({\n              ...inventory,\n              [seedType]: inventory[seedType] - 1\n            });\n          } else {\n            alert(`You don't have any ${selectedCrop} seeds!`);\n          }\n        }\n        break;\n      case 'harvest':\n        if (tile.hasCrop && tile.cropState === 'ready') {\n          newLand[index] = {\n            ...tile,\n            hasCrop: false,\n            cropType: null,\n            cropState: null,\n            plantedTime: null,\n            isPlowed: false\n          };\n          setInventory({\n            ...inventory,\n            [tile.cropType]: inventory[tile.cropType] + 1\n          });\n        }\n        break;\n      default:\n        break;\n    }\n    setLand(newLand);\n  };\n  const toggleInstructions = () => {\n    setShowInstructions(!showInstructions);\n  };\n  const sellAllCrops = () => {\n    let profit = 0;\n    const prices = {\n      wheat: 20,\n      corn: 40,\n      potato: 30\n    };\n    const newInventory = {\n      ...inventory\n    };\n    Object.keys(prices).forEach(crop => {\n      if (newInventory[crop] > 0) {\n        profit += prices[crop] * newInventory[crop];\n        newInventory[crop] = 0;\n      }\n    });\n    setMoney(prev => prev + profit);\n    setInventory(newInventory);\n    if (profit > 0) {\n      alert(`Sold all crops for $${profit}!`);\n    } else {\n      alert('No crops to sell!');\n    }\n  };\n  const buySeedsWithType = (seedType, price) => {\n    if (money >= price) {\n      setMoney(prev => prev - price);\n      setInventory({\n        ...inventory,\n        [seedType]: inventory[seedType] + 1\n      });\n    } else {\n      alert('Not enough money!');\n    }\n  };\n  const cropKeyToName = {\n    wheat_seeds: 'Wheat Seeds',\n    corn_seeds: 'Corn Seeds',\n    potato_seeds: 'Potato Seeds'\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(GameStats, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"Money: $\", money]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 260,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"Land Size: \", gridSize, \"x\", gridSize]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 261,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: sellAllCrops,\n        children: \"Sell All Crops\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 262,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 259,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Instructions, {\n      isOpen: showInstructions,\n      onClose: toggleInstructions\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 265,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"The Farmer Was Replaced\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 267,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ToolBar, {\n      children: [/*#__PURE__*/_jsxDEV(ToolButton, {\n        selected: selectedTool === 'plow',\n        onClick: () => setSelectedTool('plow'),\n        children: \"Plow\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 270,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ToolButton, {\n        selected: selectedTool === 'plant',\n        onClick: () => setSelectedTool('plant'),\n        children: \"Plant\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 276,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ToolButton, {\n        selected: selectedTool === 'harvest',\n        onClick: () => setSelectedTool('harvest'),\n        children: \"Harvest\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 282,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 269,\n      columnNumber: 7\n    }, this), selectedTool === 'plant' && /*#__PURE__*/_jsxDEV(CropSelector, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"Select crop to plant:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 292,\n        columnNumber: 11\n      }, this), Object.keys(cropColors).map(crop => {\n        const seedType = `${crop}_seeds`;\n        return /*#__PURE__*/_jsxDEV(CropButton, {\n          selected: selectedCrop === crop,\n          onClick: () => setSelectedCrop(crop),\n          disabled: inventory[seedType] <= 0,\n          children: [/*#__PURE__*/_jsxDEV(CropIcon, {\n            color: cropColors[crop]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 302,\n            columnNumber: 17\n          }, this), crop.charAt(0).toUpperCase() + crop.slice(1), \" (\", inventory[seedType], \")\"]\n        }, crop, true, {\n          fileName: _jsxFileName,\n          lineNumber: 296,\n          columnNumber: 15\n        }, this);\n      })]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 291,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(GameGrid, {\n      size: gridSize,\n      children: land.map((tile, index) => /*#__PURE__*/_jsxDEV(LandTile, {\n        isPlowed: tile.isPlowed,\n        hasCrop: tile.hasCrop,\n        cropState: tile.cropState,\n        onClick: () => handleTileClick(index),\n        children: tile.hasCrop && /*#__PURE__*/_jsxDEV(CropIndicator, {\n          color: cropColors[tile.cropType]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 320,\n          columnNumber: 15\n        }, this)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 312,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 310,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Inventory\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 328,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: Object.entries(inventory).map(([item, count]) => count > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          margin: '5px 0'\n        },\n        children: [cropKeyToName[item] || item.charAt(0).toUpperCase() + item.slice(1), \": \", count]\n      }, item, true, {\n        fileName: _jsxFileName,\n        lineNumber: 332,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 329,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Buy Seeds\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 339,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => buySeedsWithType('wheat_seeds', 10),\n        children: \"Buy Wheat Seeds ($10)\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 341,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => buySeedsWithType('corn_seeds', 20),\n        children: \"Buy Corn Seeds ($20)\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 344,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => buySeedsWithType('potato_seeds', 15),\n        children: \"Buy Potato Seeds ($15)\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 347,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 340,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 258,\n    columnNumber: 5\n  }, this);\n}\n_s(Game, \"rZEzcRWIYdrNUYsnksRZzt6uXkQ=\");\n_c10 = Game;\nexport default Game;\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7, _c8, _c9, _c10;\n$RefreshReg$(_c, \"GameGrid\");\n$RefreshReg$(_c2, \"LandTile\");\n$RefreshReg$(_c3, \"CropIndicator\");\n$RefreshReg$(_c4, \"GameStats\");\n$RefreshReg$(_c5, \"ToolBar\");\n$RefreshReg$(_c6, \"ToolButton\");\n$RefreshReg$(_c7, \"CropSelector\");\n$RefreshReg$(_c8, \"CropButton\");\n$RefreshReg$(_c9, \"CropIcon\");\n$RefreshReg$(_c10, \"Game\");","map":{"version":3,"names":["React","useState","useEffect","styled","Instructions","jsxDEV","_jsxDEV","GameGrid","div","props","size","_c","LandTile","isPlowed","hasCrop","cropState","_c2","CropIndicator","color","_c3","GameStats","_c4","ToolBar","_c5","ToolButton","button","selected","_c6","CropSelector","_c7","CropButton","_c8","CropIcon","span","_c9","Game","_s","gridSize","setGridSize","land","setLand","Array","fill","map","cropType","plantedTime","money","setMoney","selectedTool","setSelectedTool","selectedCrop","setSelectedCrop","inventory","setInventory","wheat","corn","potato","wheat_seeds","corn_seeds","potato_seeds","showInstructions","setShowInstructions","growthInterval","setInterval","updated","newLand","forEach","tile","index","now","Date","growthTime","clearInterval","cropColors","handleTileClick","seedType","alert","toggleInstructions","sellAllCrops","profit","prices","newInventory","Object","keys","crop","prev","buySeedsWithType","price","cropKeyToName","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","isOpen","onClose","disabled","charAt","toUpperCase","slice","entries","item","count","style","margin","_c10","$RefreshReg$"],"sources":["C:/Users/SPIDER/Downloads/Project/Demo GPT/Demo 1/src/components/Game.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport styled from 'styled-components';\r\nimport Instructions from './Instructions';\r\n\r\nconst GameGrid = styled.div`\r\n  display: grid;\r\n  grid-template-columns: repeat(${props => props.size}, 1fr);\r\n  gap: 5px;\r\n  max-width: 800px;\r\n  margin: 0 auto;\r\n`;\r\n\r\nconst LandTile = styled.div`\r\n  width: 100%;\r\n  aspect-ratio: 1;\r\n  background-color: ${props => {\r\n    if (props.isPlowed) return '#8B4513';\r\n    if (props.hasCrop && props.cropState === 'growing') return '#90EE90';\r\n    if (props.hasCrop && props.cropState === 'ready') return '#228B22';\r\n    return '#90EE90';\r\n  }};\r\n  border: 1px solid #2c3e50;\r\n  cursor: pointer;\r\n  position: relative;\r\n  transition: all 0.3s ease;\r\n\r\n  &:hover {\r\n    transform: scale(1.05);\r\n  }\r\n`;\r\n\r\nconst CropIndicator = styled.div`\r\n  position: absolute;\r\n  top: 50%;\r\n  left: 50%;\r\n  transform: translate(-50%, -50%);\r\n  width: 80%;\r\n  height: 80%;\r\n  background-color: ${props => props.color};\r\n  border-radius: 50%;\r\n`;\r\n\r\nconst GameStats = styled.div`\r\n  position: fixed;\r\n  top: 20px;\r\n  right: 320px;\r\n  background-color: rgba(52, 73, 94, 0.9);\r\n  padding: 10px;\r\n  border-radius: 5px;\r\n`;\r\n\r\nconst ToolBar = styled.div`\r\n  display: flex;\r\n  margin-bottom: 20px;\r\n  flex-wrap: wrap;\r\n`;\r\n\r\nconst ToolButton = styled.button`\r\n  background-color: ${props => props.selected ? '#2980b9' : '#3498db'};\r\n  border: ${props => props.selected ? '2px solid #fff' : 'none'};\r\n  padding: ${props => props.selected ? '6px 14px' : '8px 16px'};\r\n`;\r\n\r\nconst CropSelector = styled.div`\r\n  margin-top: 10px;\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n`;\r\n\r\nconst CropButton = styled.button`\r\n  background-color: ${props => props.selected ? '#27ae60' : '#2ecc71'};\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n  \r\n  &:disabled {\r\n    background-color: #95a5a6;\r\n    cursor: not-allowed;\r\n  }\r\n`;\r\n\r\nconst CropIcon = styled.span`\r\n  display: inline-block;\r\n  width: 12px;\r\n  height: 12px;\r\n  border-radius: 50%;\r\n  background-color: ${props => props.color};\r\n  margin-right: 5px;\r\n`;\r\n\r\nfunction Game() {\r\n  const [gridSize, setGridSize] = useState(5);\r\n  const [land, setLand] = useState(Array(gridSize * gridSize).fill(null).map(() => ({ \r\n    isPlowed: false, \r\n    hasCrop: false, \r\n    cropType: null,\r\n    cropState: null,\r\n    plantedTime: null\r\n  })));\r\n  \r\n  const [money, setMoney] = useState(100);\r\n  const [selectedTool, setSelectedTool] = useState('plow');\r\n  const [selectedCrop, setSelectedCrop] = useState('wheat');\r\n  const [inventory, setInventory] = useState({\r\n    wheat: 0,\r\n    corn: 0,\r\n    potato: 0,\r\n    wheat_seeds: 5,\r\n    corn_seeds: 3,\r\n    potato_seeds: 2\r\n  });\r\n  const [showInstructions, setShowInstructions] = useState(false);\r\n\r\n  // Crop growth timer\r\n  useEffect(() => {\r\n    const growthInterval = setInterval(() => {\r\n      let updated = false;\r\n      const newLand = [...land];\r\n      \r\n      newLand.forEach((tile, index) => {\r\n        if (tile.hasCrop && tile.cropState === 'growing' && tile.plantedTime) {\r\n          const now = Date.now();\r\n          const growthTime = 10000; // 10 seconds for growth\r\n          \r\n          if (now - tile.plantedTime > growthTime) {\r\n            newLand[index] = {\r\n              ...tile,\r\n              cropState: 'ready'\r\n            };\r\n            updated = true;\r\n          }\r\n        }\r\n      });\r\n      \r\n      if (updated) {\r\n        setLand(newLand);\r\n      }\r\n    }, 1000);\r\n    \r\n    return () => clearInterval(growthInterval);\r\n  }, [land]);\r\n\r\n  const cropColors = {\r\n    wheat: '#f1c40f',\r\n    corn: '#f39c12',\r\n    potato: '#d35400'\r\n  };\r\n\r\n  const handleTileClick = (index) => {\r\n    const newLand = [...land];\r\n    const tile = newLand[index];\r\n\r\n    switch (selectedTool) {\r\n      case 'plow':\r\n        if (!tile.isPlowed && !tile.hasCrop) {\r\n          newLand[index] = { ...tile, isPlowed: true };\r\n        }\r\n        break;\r\n        \r\n      case 'plant':\r\n        if (tile.isPlowed && !tile.hasCrop) {\r\n          const seedType = `${selectedCrop}_seeds`;\r\n          \r\n          if (inventory[seedType] > 0) {\r\n            newLand[index] = { \r\n              ...tile, \r\n              hasCrop: true, \r\n              cropType: selectedCrop,\r\n              cropState: 'growing',\r\n              plantedTime: Date.now()\r\n            };\r\n            \r\n            setInventory({\r\n              ...inventory,\r\n              [seedType]: inventory[seedType] - 1\r\n            });\r\n          } else {\r\n            alert(`You don't have any ${selectedCrop} seeds!`);\r\n          }\r\n        }\r\n        break;\r\n        \r\n      case 'harvest':\r\n        if (tile.hasCrop && tile.cropState === 'ready') {\r\n          newLand[index] = { \r\n            ...tile, \r\n            hasCrop: false, \r\n            cropType: null,\r\n            cropState: null,\r\n            plantedTime: null,\r\n            isPlowed: false\r\n          };\r\n          \r\n          setInventory({\r\n            ...inventory,\r\n            [tile.cropType]: inventory[tile.cropType] + 1\r\n          });\r\n        }\r\n        break;\r\n        \r\n      default:\r\n        break;\r\n    }\r\n\r\n    setLand(newLand);\r\n  };\r\n\r\n  const toggleInstructions = () => {\r\n    setShowInstructions(!showInstructions);\r\n  };\r\n\r\n  const sellAllCrops = () => {\r\n    let profit = 0;\r\n    const prices = {\r\n      wheat: 20,\r\n      corn: 40,\r\n      potato: 30\r\n    };\r\n    \r\n    const newInventory = {...inventory};\r\n    \r\n    Object.keys(prices).forEach(crop => {\r\n      if (newInventory[crop] > 0) {\r\n        profit += prices[crop] * newInventory[crop];\r\n        newInventory[crop] = 0;\r\n      }\r\n    });\r\n    \r\n    setMoney(prev => prev + profit);\r\n    setInventory(newInventory);\r\n    \r\n    if (profit > 0) {\r\n      alert(`Sold all crops for $${profit}!`);\r\n    } else {\r\n      alert('No crops to sell!');\r\n    }\r\n  };\r\n\r\n  const buySeedsWithType = (seedType, price) => {\r\n    if (money >= price) {\r\n      setMoney(prev => prev - price);\r\n      setInventory({\r\n        ...inventory,\r\n        [seedType]: inventory[seedType] + 1\r\n      });\r\n    } else {\r\n      alert('Not enough money!');\r\n    }\r\n  };\r\n\r\n  const cropKeyToName = {\r\n    wheat_seeds: 'Wheat Seeds',\r\n    corn_seeds: 'Corn Seeds',\r\n    potato_seeds: 'Potato Seeds'\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <GameStats>\r\n        <div>Money: ${money}</div>\r\n        <div>Land Size: {gridSize}x{gridSize}</div>\r\n        <button onClick={sellAllCrops}>Sell All Crops</button>\r\n      </GameStats>\r\n      \r\n      <Instructions isOpen={showInstructions} onClose={toggleInstructions} />\r\n      \r\n      <h2>The Farmer Was Replaced</h2>\r\n      \r\n      <ToolBar>\r\n        <ToolButton \r\n          selected={selectedTool === 'plow'} \r\n          onClick={() => setSelectedTool('plow')}\r\n        >\r\n          Plow\r\n        </ToolButton>\r\n        <ToolButton \r\n          selected={selectedTool === 'plant'} \r\n          onClick={() => setSelectedTool('plant')}\r\n        >\r\n          Plant\r\n        </ToolButton>\r\n        <ToolButton \r\n          selected={selectedTool === 'harvest'} \r\n          onClick={() => setSelectedTool('harvest')}\r\n        >\r\n          Harvest\r\n        </ToolButton>\r\n      </ToolBar>\r\n      \r\n      {selectedTool === 'plant' && (\r\n        <CropSelector>\r\n          <div>Select crop to plant:</div>\r\n          {Object.keys(cropColors).map(crop => {\r\n            const seedType = `${crop}_seeds`;\r\n            return (\r\n              <CropButton\r\n                key={crop}\r\n                selected={selectedCrop === crop}\r\n                onClick={() => setSelectedCrop(crop)}\r\n                disabled={inventory[seedType] <= 0}\r\n              >\r\n                <CropIcon color={cropColors[crop]} />\r\n                {crop.charAt(0).toUpperCase() + crop.slice(1)} ({inventory[seedType]})\r\n              </CropButton>\r\n            );\r\n          })}\r\n        </CropSelector>\r\n      )}\r\n      \r\n      <GameGrid size={gridSize}>\r\n        {land.map((tile, index) => (\r\n          <LandTile\r\n            key={index}\r\n            isPlowed={tile.isPlowed}\r\n            hasCrop={tile.hasCrop}\r\n            cropState={tile.cropState}\r\n            onClick={() => handleTileClick(index)}\r\n          >\r\n            {tile.hasCrop && (\r\n              <CropIndicator \r\n                color={cropColors[tile.cropType]} \r\n              />\r\n            )}\r\n          </LandTile>\r\n        ))}\r\n      </GameGrid>\r\n      \r\n      <h3>Inventory</h3>\r\n      <div>\r\n        {Object.entries(inventory).map(([item, count]) => (\r\n          count > 0 && (\r\n            <div key={item} style={{ margin: '5px 0' }}>\r\n              {cropKeyToName[item] || item.charAt(0).toUpperCase() + item.slice(1)}: {count}\r\n            </div>\r\n          )\r\n        ))}\r\n      </div>\r\n      \r\n      <h3>Buy Seeds</h3>\r\n      <div>\r\n        <button onClick={() => buySeedsWithType('wheat_seeds', 10)}>\r\n          Buy Wheat Seeds ($10)\r\n        </button>\r\n        <button onClick={() => buySeedsWithType('corn_seeds', 20)}>\r\n          Buy Corn Seeds ($20)\r\n        </button>\r\n        <button onClick={() => buySeedsWithType('potato_seeds', 15)}>\r\n          Buy Potato Seeds ($15)\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Game; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}